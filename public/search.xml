<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GitHub+Hexo(Next)博客搭建及美化</title>
      <link href="/2022/03/09/GitHub-Hexo-Next-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/03/09/GitHub-Hexo-Next-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>参考b站教程：<a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=1">2021最新保姆级Hexo+GitHub搭建个人博客</a></p><span id="more"></span><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><h2 id="NEXT主题的安装"><a href="#NEXT主题的安装" class="headerlink" title="NEXT主题的安装"></a>NEXT主题的安装</h2><p>在博客根目录下执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span></span><br><span class="line">themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>然后设置博客配置文件<code>__config.yml</code>：（博客根目录下的<code>_config.yml</code>）</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> <span class="keyword">next</span></span><br></pre></td></tr></table></figure><h2 id="透明背景"><a href="#透明背景" class="headerlink" title="透明背景"></a>透明背景</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>博客根目录 <code>themes\next\source\css\_schemes\Pisces\_layout.styl</code> 文件 <code>.content-wrap </code>标签下 <code>background: </code>修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><p>博客根目录<code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>文件<code> .header-inner</code> 标签下 <code>background:</code> 修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>);</span><br></pre></td></tr></table></figure><h2 id="夜间模式-可切换"><a href="#夜间模式-可切换" class="headerlink" title="夜间模式(可切换)"></a>夜间模式(可切换)</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="built_in">next</span>-darkmode <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>修改主题配置，添加代码</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Dark Mode</span></span><br><span class="line">darkmode: <span class="literal">false</span></span><br><span class="line"><span class="meta"># 下面的是添加的配置</span></span><br><span class="line"><span class="meta"># Darkmode JS</span></span><br><span class="line">darkmode_js:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  bottom: <span class="string">&#x27;64px&#x27;</span> <span class="meta"># default: <span class="string">&#x27;32px&#x27;</span></span></span><br><span class="line">  right: <span class="string">&#x27;unset&#x27;</span> <span class="meta"># default: <span class="string">&#x27;32px&#x27;</span></span></span><br><span class="line">  left: <span class="string">&#x27;32px&#x27;</span> <span class="meta"># default: <span class="string">&#x27;unset&#x27;</span></span></span><br><span class="line">  time: <span class="string">&#x27;0.5s&#x27;</span> <span class="meta"># default: <span class="string">&#x27;0.3s&#x27;</span></span></span><br><span class="line">  mixColor: <span class="string">&#x27;transparent&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#fff&#x27;</span></span></span><br><span class="line">  backgroundColor: <span class="string">&#x27;transparent&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#fff&#x27;</span></span></span><br><span class="line">  buttonColorDark: <span class="string">&#x27;#100f2c&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#100f2c&#x27;</span></span></span><br><span class="line">  buttonColorLight: <span class="string">&#x27;#fff&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#fff&#x27;</span></span></span><br><span class="line">  isActivated: <span class="literal">false</span> <span class="meta"># default false</span></span><br><span class="line">  saveInCookies: <span class="literal">true</span> <span class="meta"># default: true</span></span><br><span class="line">  label: <span class="string">&#x27;🌓&#x27;</span> <span class="meta"># default: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">  autoMatchOsTheme: <span class="literal">true</span> <span class="meta"># default: true</span></span><br><span class="line">  libUrl: <span class="meta"># Set custom library cdn url for Darkmode.js</span></span><br></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="常规设置"><a href="#常规设置" class="headerlink" title="常规设置"></a>常规设置</h3><p>主题配置文件中包括高亮、复制、样式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span>         <span class="comment">#代码高亮设置</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>                        <span class="comment">#代码复制按钮</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span>                          <span class="comment">#代码样式，也就是框框的样子</span></span><br></pre></td></tr></table></figure><h3 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h3><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-sliding-spoiler <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>通过修改<code>blog/node_modules/hexo-sliding-spoiler/assets/spoiler.css</code>下的内容，从而自定义配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.spoiler</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;    #边框像素、样式、颜色</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span> <span class="selector-class">.spoiler-title</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent;          #背景颜色</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;                   #字体颜色</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;                  #字体大小</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span> <span class="selector-class">.spoiler-title</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span><span class="selector-class">.collapsed</span> <span class="selector-class">.spoiler-title</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;▼ Show Code&quot;</span>;           #展开提示内容</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span><span class="selector-class">.expanded</span> <span class="selector-class">.spoiler-title</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;▲ Hide &quot;</span>;               #隐藏提示内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><p>在markdown文章中直接以标签的形式加入，注意，中间内容支持markdown语法、代码块、数学公式</p><p>参考代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% spoiler <span class="string">&quot;点击显/隐内容&quot;</span> %&#125;</span><br><span class="line"></span><br><span class="line">隐藏的内容</span><br><span class="line"></span><br><span class="line">支持markdown语法，代码块，数学公式</span><br><span class="line"></span><br><span class="line">/```c++</span><br><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">int main() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">/```</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br><span class="line">e^&#123;ix&#125; = cosx+isinx</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br><span class="line"></span><br><span class="line">&#123;% endspoiler %&#125;</span><br></pre></td></tr></table></figure><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">隐藏的内容</span><br><span class="line"></span><br><span class="line">支持markdown语法，代码块，数学公式</span><br><span class="line"></span><br><span class="line">/```c++</span><br><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">int main() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">/```</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br><span class="line">e^&#123;ix&#125; = cosx+isinx</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br></pre></td></tr></table></figure>    </div></div><h2 id="Github入口"><a href="#Github入口" class="headerlink" title="Github入口"></a>Github入口</h2><p>1.首先到<a href="http://tholman.com/github-corners/">GitHub Corners</a>选择自己喜欢的图标，然后copy相应的代码</p><p>2.然后将刚才复制的代码粘贴到<code>themes/next/layout/_layout.swig</code>文件中<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面一行</p><p>3.把代码中的<code>href</code>后面的值替换成你要跳转的地址，比如你的GitHub主页</p><h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><p>在博客根目录下执行下列命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>generator<span class="operator">-</span><span class="keyword">search</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>安装之后，会在站点目录的 <code>public</code> 文件夹下创建一个 <code>search.xml </code>文件。</p><h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><p>在站点配置文件 <code>_config.yml</code> 中添加如下内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Search </span></span><br><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> .<span class="keyword">/public/</span>search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>path：索引文件的路径，相对于站点根目录</li><li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li><li>limit：限制搜索的条目数</li></ul><p>在主题配置文件 <code>_config.yml</code> 中找到如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>确保 enable 设成 true。</p><p>top_n_per_article 字段表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量。</p><p>然后，重新部署网站即可愉快的使用本地搜索功能了。</p><h2 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h2><p>1、下载相应的资源包：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-canvas-nest themes<span class="regexp">/next/</span>source<span class="regexp">/lib/</span>canvas-nest</span><br></pre></td></tr></table></figure><p>2、在主题配置中做相关参数修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span></span><br><span class="line"><span class="comment"># size: The width of the ribbon.</span></span><br><span class="line"><span class="comment"># alpha: The transparency of the ribbon.</span></span><br><span class="line"><span class="comment"># zIndex: The display level of the ribbon.</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果没有下面的代码，就把下面的加上</span></span><br><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="comment"># 网络背景</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,0&#x27;</span> <span class="comment"># RGB values, use &#x27;,&#x27; to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">150</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></figure><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>参考<a href="https://links.jianshu.com/go?to=https://github.com/netcan/hexo-generator-index-pin-top">Github</a>上开源项目，命令操作如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-<span class="built_in">index</span> --<span class="keyword">save</span></span><br><span class="line">$ npm install hexo-generator-<span class="built_in">index</span>-pin-top --<span class="keyword">save</span></span><br></pre></td></tr></table></figure><p>在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code> 或者<code>top: 任意数字</code>，top中数字越大，文章越靠前。比如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span>  <span class="string">java应用导致JVM内存溢出（OOM）的问题</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">2</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andy老师的题库解</title>
      <link href="/2022/03/01/Andy%E2%80%99s_anwser/"/>
      <url>/2022/03/01/Andy%E2%80%99s_anwser/</url>
      
        <content type="html"><![CDATA[<h1 id="枚举算法"><a href="#枚举算法" class="headerlink" title="枚举算法"></a>枚举算法</h1><p>使用枚举的条件：</p><p>1.可预先确定候选答案的数量</p><p>2.候选答案的范围在求解之前必须有一个确定的集合</p><p>枚举算法简单粗暴，他暴力的枚举所有可能，尽可能地尝试所有的方法。虽然<strong>枚举算法非常暴力</strong>，而且<strong>速度可能很慢</strong>，但确实我们<strong>最应该优先考虑</strong>的！因为枚举法变成实现<strong>最简单</strong>，并且得到的结果总是<strong>正确</strong>的</p><h2 id="假币问题"><a href="#假币问题" class="headerlink" title="假币问题"></a>假币问题</h2><p><code>描述</code></p><p>有12枚银币。其中有11枚真币和1枚假币。假币看起来和真币没有区别，但是重量不同。用天平称了这些币三次。如果用天平称两枚硬币，发现天平平衡，说明两枚都是真的。如果用一枚真币与另一枚银币比较，发现它比真币轻或重，说明它是假币。根据三次称量结果找出假币，并且能够确定假币是轻是重。</p><p><code>输入</code></p><p>第一行有一个数字n，表示有n组测试用例。</p><p>对于每组测试用例：</p><p>输入有三行，每行表示一次称量的结果。林克事先将银币标号为A-L。</p><p>每次称量的结果用三个以空格隔开的字符串表示：</p><p>天平左边放置的硬币 天平右边放置的硬币 平衡状态。</p><p>其中平衡状态用<code>up</code>, <code>down</code>, 或 <code>even</code>表示, 分别为右端高、右端低和平衡。天平左右的硬币数总是相等的。</p><p><code>输出</code></p><p>输出哪一个标号的银币是假币，并说明它比真币轻还是重(heavy or light)。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string Left[<span class="number">3</span>];   <span class="comment">//天平左边银币</span></span><br><span class="line">string Right[<span class="number">3</span>];  <span class="comment">//天平右边银币</span></span><br><span class="line">string result[<span class="number">3</span>]; <span class="comment">//称量结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// islight 为真表示假设假币为轻，否则表示假币为重</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isFeitCoin</span><span class="params">(<span class="type">char</span> iCoin, <span class="type">bool</span> isLight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string c;           <span class="comment">//只用string存储Coin</span></span><br><span class="line">    c.<span class="built_in">push_back</span>(iCoin); <span class="comment">// char转换为string的技巧</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//临时变量保存左右称量结果</span></span><br><span class="line">        string l = Left[i], r = Right[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果isLight为假，则在另一端判断</span></span><br><span class="line">        <span class="keyword">if</span> (!isLight)</span><br><span class="line">            <span class="built_in">swap</span>(l, r);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判定c是否为假币</span></span><br><span class="line">        <span class="keyword">switch</span> (result[i][<span class="number">0</span>]) <span class="comment">//天平右边的情况</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="comment">//两端平衡</span></span><br><span class="line">            <span class="keyword">if</span> (l.<span class="built_in">find</span>(c) != string::npos || r.<span class="built_in">find</span>(c) != string::npos)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>: <span class="comment">//右端高</span></span><br><span class="line">            <span class="keyword">if</span> (r.<span class="built_in">find</span>(c) == string::npos)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: <span class="comment">//右端低</span></span><br><span class="line">            <span class="keyword">if</span> (l.<span class="built_in">find</span>(c) == string::npos)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; Left[i] &gt;&gt; Right[i] &gt;&gt; result[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//枚举所有银币，是否是假币的所有情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> iCoin = <span class="string">&#x27;A&#x27;</span>; iCoin &lt;= <span class="string">&#x27;L&#x27;</span>; iCoin++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isFeitCoin</span>(iCoin, <span class="literal">true</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; iCoin &lt;&lt; <span class="string">&quot; is the counterfeit coin and it is light. &quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isFeitCoin</span>(iCoin, <span class="literal">false</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; iCoin &lt;&lt; <span class="string">&quot; is the counterfeit coin and it is heavy. &quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div> <span id="more"></span><h2 id="两数之和（双指针算法）"><a href="#两数之和（双指针算法）" class="headerlink" title="两数之和（双指针算法）"></a>两数之和（双指针算法）</h2><p><code>描述</code></p><p>给定一个目标值 target，请你在不包含重复元素的按升序排列的整数数组 a中，找出和为目标值的那两个整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。</p><p>例如:给定 a&#x3D; [2, 7, 10, 15], target &#x3D; 17，因为 a[1] + a[2] &#x3D; 7 + 10 &#x3D; 17，所以返回 [1 2]</p><p><code>输入</code></p><p>输入数据为2行，第一行有两个整数 target和n，其中target代表要搜索的目标和，n表示数组a的元素个数</p><p>第二行表示数组a的n个数，每个元素用空格隔开。</p><p><code>输出</code></p><p>输出和为target的两个元素的下标 i j ，其中(i&lt;j)。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> target, n;</span><br><span class="line">    cin &gt;&gt; target &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>; i &lt; j;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] + a[j] == target)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt; j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] + a[j] &gt; target ? j-- : i++; <span class="comment">//满足大于：左移，满足小于；右移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="三数之和（set算法）"><a href="#三数之和（set算法）" class="headerlink" title="三数之和（set算法）"></a>三数之和（set算法）</h2><p><code>描述</code></p><p>给定一个目标值 target，请在整数数组 a中，找出三个元素(x,y,z) 使x+y+z&#x3D;&#x3D;target。</p><p>请找到所有满足条件的三元组，并且请按从小到大的顺序输出所有合法的三元组。</p><p>注意：三元组中不允许包含重复数字，且输出的三元组中要求 x&lt;y&lt;z.</p><p>例如:给定target &#x3D; 17，n&#x3D;7, 数组a&#x3D; [0, 2, 7, 10, 15,18,25]，结果返回两个三元组：(0,2, 15), (2,7,10)</p><p><code>输入</code></p><p>输入数据为2行，第一行有两个整数 target和n，其中target代表要搜索的目标和，n表示数组a的元素个数</p><p>第二行表示数组a的n个数，每个元素用空格隔开。</p><p><code>输出</code></p><p>输出所有满足和为target的三元组(x,y,z)，要求(x&lt; y &lt;z) 并且不允许有重复数字。</p><p>把三元组按照x的大小升序输出，x相同的按照y的大小升序输出。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; Data;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> target, n;</span><br><span class="line">    cin &gt;&gt; target &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line">        Data.<span class="built_in">insert</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = Data.<span class="built_in">begin</span>(); it != Data.<span class="built_in">end</span>(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it2 = it; ++it2 != Data.<span class="built_in">end</span>();)</span><br><span class="line">        <span class="comment">//通过双重循环前两指针</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tmp = target - *it - *it2; <span class="comment">//通过第一二个元素算出第三个元素的大小</span></span><br><span class="line">            <span class="comment">//如果第三个元素小于第二个元素，违背题目要求</span></span><br><span class="line">            <span class="comment">//且由于有序性，后面的元素增大，第三个元素会始终小于第二个元素可以跳出该层循环</span></span><br><span class="line">            <span class="keyword">if</span> (tmp &lt;= *it2)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            set&lt;<span class="type">int</span>&gt;::iterator it3 = Data.<span class="built_in">find</span>(tmp);</span><br><span class="line">            <span class="comment">//使用find方法寻找是否存在满足值</span></span><br><span class="line">            <span class="keyword">if</span> (it3 != Data.<span class="built_in">end</span>()) <span class="comment">// set中如果没有查找到将返回end迭代器，如果查找到，证明有，则输出</span></span><br><span class="line">                cout &lt;&lt; *it &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *it2 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *it3 &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="二进制密码锁（位运算）"><a href="#二进制密码锁（位运算）" class="headerlink" title="二进制密码锁（位运算）"></a>二进制密码锁（位运算）</h2><p><code>描述</code></p><p>一种特殊的二进制密码锁，由n个相连的按钮组成（n&lt;30），按钮有凹&#x2F;凸两种状态，用手按按钮会改变其状态。当按一个按钮时，跟它相邻的两个按钮状态也会反转。当然，如果按的是最左或者最右边的按钮，该按钮只会影响到跟它相邻的一个按钮。当前密码锁状态已知，需要解决的问题是，林克至少需要按多少次按钮，才能将密码锁转变为所期望的目标状态。</p><p><code>输入</code></p><p>两行，给出两个由0、1组成的等长字符串，表示当前&#x2F;目标密码锁状态，其中0代表凹，1代表凸。</p><p><code>输出</code></p><p>至少需要进行的按按钮操作次数，如果无法实现转变，则输出impossible。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string line;            <span class="comment">//输入的01字符串</span></span><br><span class="line">    bitset&lt;32&gt; lock;        <span class="comment">//当前的锁的状态</span></span><br><span class="line">    <span class="type">int</span> minTimes = <span class="number">1</span> &lt;&lt; <span class="number">30</span>; <span class="comment">//初始化按钮次数为无穷大</span></span><br><span class="line">    <span class="comment">//读入字符串，初始化用bitset表示的锁的初始状态与目标状态变量</span></span><br><span class="line">    cin &gt;&gt; line;</span><br><span class="line">    <span class="function">bitset&lt;32&gt; <span class="title">sourceLock</span><span class="params">(line)</span></span>;</span><br><span class="line">    cin &gt;&gt; line;</span><br><span class="line">    <span class="function">bitset&lt;32&gt; <span class="title">targetLock</span><span class="params">(line)</span></span>;</span><br><span class="line">    <span class="comment">//枚举第一个按钮是否按下的两种情况即可。对于指定的一种情况，后面的事情都是确定的</span></span><br><span class="line">    <span class="type">int</span> n = line.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt; <span class="number">2</span>; ++p) <span class="comment">// p=0代表最左边的按钮不按，p=1代表按下</span></span><br><span class="line">    &#123;</span><br><span class="line">        lock = sourceLock;          <span class="comment">//初始化lock</span></span><br><span class="line">        <span class="type">int</span> times = <span class="number">0</span>;              <span class="comment">//按下的次数</span></span><br><span class="line">        <span class="type">int</span> nextButton = p;         <span class="comment">//初始化下一个按钮的状态，是否按下</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="comment">//遍历所有的位置</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nextButton == <span class="number">1</span>) <span class="comment">//按钮按下的状态更新</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++times;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                    lock.<span class="built_in">flip</span>(i - <span class="number">1</span>); <span class="comment">//左边取反</span></span><br><span class="line">                lock.<span class="built_in">flip</span>(i);         <span class="comment">//中间取反</span></span><br><span class="line">                <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>)</span><br><span class="line">                    lock.<span class="built_in">flip</span>(i + <span class="number">1</span>); <span class="comment">//右边取反</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断当前lock是否与目标targetlock的第i位相同</span></span><br><span class="line">            <span class="keyword">if</span> (lock[i] != targetLock[i])</span><br><span class="line">                nextButton = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//如果不同就要在下一次循环按下按钮</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextButton = <span class="number">0</span>; <span class="comment">//不要按下当前按钮</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lock == targetLock)              <span class="comment">//是否抵达目标状态</span></span><br><span class="line">            minTimes = <span class="built_in">min</span>(minTimes, times); <span class="comment">//取最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (minTimes == <span class="number">1</span> &lt;&lt; <span class="number">30</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl; <span class="comment">//没有找到目标状态</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; minTimes &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h1 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h1><h2 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h2><p><code>描述</code></p><p>有三根杆子A，B，C。A杆上有N个(N&gt;1)穿孔圆盘，盘的尺寸由下到上依次变小。要求按下列规则将所有圆盘移至C杆： 每次只能移动一个圆盘； 大盘不能叠在小盘上面。 提示：可将圆盘临时置于B杆，也可将从A杆移出的圆盘重新移回A杆，但都必须遵循上述两条规则。问：如何移？最少要移动多少次？</p><p><code>输入</code></p><p>输入为一个整数后面跟三个单字符字符串。</p><p>整数为盘子的数目，后三个字符表示三个杆子的编号。</p><p><code>输出</code></p><p>输出每一步移动盘子的记录。一次移动一行。</p><p>每次移动的记录为例如<code>3:a-&gt;b</code> 的形式，即把编号为3的盘子从a杆移至b杆。</p><p>我们约定圆盘从小到大编号为1, 2, …n。即最上面那个最小的圆盘编号为1，最下面最大的圆盘编号为n。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//把id号盘子从start移动到target中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> id, <span class="type">char</span> start, <span class="type">char</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; id &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; start &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; target &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将start上的n个盘子，以other为中转，移动到target</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> start, <span class="type">char</span> other, <span class="type">char</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123; <span class="comment">//只需移动一个盘子</span></span><br><span class="line">        <span class="built_in">move</span>(n, start, target);</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">//递归终止</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Hanoi</span>(n - <span class="number">1</span>, start, target, other); <span class="comment">//先用target作为中转，把n-1个从start中移动到other中，start中只剩下第n个</span></span><br><span class="line">    <span class="built_in">move</span>(n, start, target);             <span class="comment">//把start中剩下的第n个移动到target中</span></span><br><span class="line">    <span class="built_in">Hanoi</span>(n - <span class="number">1</span>, other, start, target); <span class="comment">//在用start作为中转，把n-1个从other中移动到target中</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> A, B, C;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; A &gt;&gt; B &gt;&gt; C; <span class="comment">//输入盘子数</span></span><br><span class="line">    <span class="built_in">Hanoi</span>(n, A, B, C);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="排列数字"><a href="#排列数字" class="headerlink" title="排列数字"></a>排列数字</h2><p><code>描述</code></p><p>给定一个整数n，将数字1~n排成一排，将会有很多种排列方法。现在，请你按照字典序将所有的排列方法输出。数据范围：1&lt;&#x3D;n&lt;&#x3D;7</p><p><code>输入</code></p><p>共一行，包含一个整数n。</p><p><code>输出</code></p><p>按字典序输出所有排列方案，每个方案占一行。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>; <span class="comment">//最大值</span></span><br><span class="line"><span class="type">int</span> n;            <span class="comment">//读入的n</span></span><br><span class="line"><span class="type">int</span> path[N];      <span class="comment">//记录路径每个位的值</span></span><br><span class="line"><span class="type">bool</span> used[N];     <span class="comment">//记录第i个数是否被用过</span></span><br><span class="line">&#123;% endspoiler %&#125;<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(i</span></span></span><br><span class="line"><span class="params"><span class="function">nt u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#123;% spoiler %&#125;<span class="keyword">if</span> (u == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//输出排列，u==n表示已经没有可以再用的数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            cout &lt;&lt; path[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//枚举数字1——n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!used[i])</span><br><span class="line">        &#123;</span><br><span class="line">            path[u] = i;     <span class="comment">//记录当前位path[u]的数字为i</span></span><br><span class="line">            used[i] = <span class="literal">true</span>;  <span class="comment">//标记数字i为已经使用过</span></span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);      <span class="comment">//递归处理下一位</span></span><br><span class="line">            used[i] = <span class="literal">false</span>; <span class="comment">//恢复现场</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="字母全排列"><a href="#字母全排列" class="headerlink" title="字母全排列"></a>字母全排列</h2><p><code>描述</code></p><p>给定一个由不同的小写字母组成的字符串，输出这个字符串的所有全排列。</p><p><code>输入</code></p><p>输入只有一行，是一个由不同的小写字母组成的字符串，已知字符串的长度在2到8之间。</p><p><code>输出</code></p><p>输出这个字符串的所有排列方式，每行一个排列。要求字母序比较小的排列在前面。字母序如下定义：</p><p>已知S &#x3D; s1s2…sk, T &#x3D; t1t2…tk，则S &lt; T 等价于，存在p (1 &lt;&#x3D; p &lt;&#x3D; k)，使得</p><p>s1&#x3D; t1, s2&#x3D; t2, …, sp - 1&#x3D; tp - 1, sp&lt; tp成立</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;string&gt; ans;</span><br><span class="line">string path;</span><br><span class="line">vector&lt;<span class="type">bool</span>&gt; used;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(string s, <span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//抵达最底层</span></span><br><span class="line">    <span class="keyword">if</span> (u == s.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历used数组，枚举下一个还没用完的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i] == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            path[u] = s[i]; <span class="comment">//记录当前尝试的元素</span></span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(s, u + <span class="number">1</span>);</span><br><span class="line">            used[i] = <span class="literal">false</span>; <span class="comment">//恢复现场</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string line;</span><br><span class="line">    cin &gt;&gt; line;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">sort</span>(line.<span class="built_in">begin</span>(), line.<span class="built_in">end</span>());   <span class="comment">//排序字符串</span></span><br><span class="line">    path = line;                      <span class="comment">// path的长度初始化（内容无所谓）</span></span><br><span class="line">    used = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(line.<span class="built_in">size</span>()); <span class="comment">//第i位字符是否被访问的状态数组</span></span><br><span class="line">    <span class="comment">//递归搜索</span></span><br><span class="line">    <span class="built_in">dfs</span>(line, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> l : ans)</span><br><span class="line">        cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h2><p><code>输入</code></p><p>输入皇后的个数n（n&lt;&#x3D;13）</p><p><code>输出</code></p><p>输出长度为n的正整数。</p><p>输出结果里的每一行都代表一种摆法。</p><p>行里的第i个数字如果是n，就代表第i行的皇后应该放在第n列。</p><p>皇后的行、列编号都是从1开始算。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N;           <span class="comment">//读入的皇后个数</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res; <span class="comment">//皇后坐标(x,y)为（res[i]，i）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == N)</span><br><span class="line">    &#123; <span class="comment">//递归出口，n从0开始到N-1全部遍历完毕</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : res)</span><br><span class="line">            cout &lt;&lt; x;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//假定n-1个皇后已经全部摆好，现在准备摆第n个皇后</span></span><br><span class="line">    <span class="comment">//意味着res[0]--res[n-1]已经有值了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="comment">//尝试0-N列位置，摆放第n个皇后</span></span><br><span class="line">    &#123;                            <span class="comment">//点(x1,y1)与点(x2,y2)在同一对角线上，则有|x1-x2|=|y1-y2|</span></span><br><span class="line">        <span class="comment">//因此若(i,n)与(res[k],k)满足|i-res[k]|==|n-k|则两点在同一对角线</span></span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            <span class="keyword">if</span> ((res[k] == i) || <span class="built_in">abs</span>(i - res[k]) == <span class="built_in">abs</span>(n - k)) <span class="comment">//发现同列、对角线，跳出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (k == n)</span><br><span class="line">        &#123;               <span class="comment">//判断循环是否正常退出</span></span><br><span class="line">            res[n] = i; <span class="comment">//把当前第n个皇后放在第i个位置上</span></span><br><span class="line">            <span class="built_in">dfs</span>(n + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//全局变量N皇后</span></span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    res.<span class="built_in">resize</span>(N);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="求八皇后的第n种解"><a href="#求八皇后的第n种解" class="headerlink" title="求八皇后的第n种解"></a>求八皇后的第n种解</h2><p><code>描述</code></p><p>如何将八个皇后放在棋盘上（有8 * 8个方格），使它们谁也不能被其他皇后吃掉！已经知道八皇后问题一共有92组解，每组解可以用一个字符串表示：对于某个满足要求的八皇后的摆放方法，定义一个皇后串a与之对应，即a&#x3D;b1b2…b8，其中bi为相应摆法中第i行皇后所处的列数。</p><p><strong>题目是：</strong></p><p>输入一个数n，要求输出八皇后问题的第n个解，也就是第n个皇后字符串。</p><p>串的比较是这样的：皇后串x置于皇后串y之前，当且仅当将x视为整数时比y小。</p><p><code>输入</code></p><p>第1行是测试数据的组数T，后面跟着T行输入。</p><p>每组测试数据占1行，包含一个正整数n (1 &lt;&#x3D; n &lt;&#x3D; 92)</p><p><code>输出</code></p><p>输出有T行，每行输出对应一个输入。输出应是一个正整数，是第n个八皇后串。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> res[<span class="number">92</span>][<span class="number">8</span>]; <span class="comment">//八皇后的解空间数组，每一行是一种皇后的摆法</span></span><br><span class="line"><span class="type">int</span> path[<span class="number">8</span>];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">//可行解的计数器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">7</span>)</span><br><span class="line">    &#123; <span class="comment">//递归出口，n从0开始到7全部遍历完毕</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++)</span><br><span class="line">            res[cnt][k] = path[k];</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//假定n-1个皇后已经全部摆好，现在准备摆第n个皇后，意味着solution[0]--solution[n-1]已经有值了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) <span class="comment">//尝试0-7列位置，摆放第n个皇后</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((path[k] == i) || <span class="built_in">abs</span>(path[k] - i) == <span class="built_in">abs</span>(n - k)) <span class="comment">//发现同列、对角线，跳出</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == n)</span><br><span class="line">        &#123;</span><br><span class="line">            path[n] = i; <span class="comment">//把当前第n个皇后放在第i个位置上</span></span><br><span class="line">            <span class="built_in">dfs</span>(n + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T, n;</span><br><span class="line">    <span class="built_in">memset</span>(path, <span class="number">0</span>, <span class="built_in">sizeof</span>(path));</span><br><span class="line">    <span class="comment">//打表法，计算92组解并排序</span></span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>); <span class="comment">//深度优先搜索</span></span><br><span class="line">    <span class="comment">// T组测试数据</span></span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; res[n - <span class="number">1</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 算法基础与在线编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello!</title>
      <link href="/2021/12/02/hello_world/"/>
      <url>/2021/12/02/hello_world/</url>
      
        <content type="html"><![CDATA[<h1><center>欢迎来到派大标的菠萝屋</center></h1><h2><center>Welcome To Patrick Star's Pineapple house</center></h2><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
