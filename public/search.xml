<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《数据结构》学习笔记</title>
      <link href="/2022/03/30/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/30/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>写在前面的话：</p><p>本文是《数据结构(c语言版)》的学习笔记</p><span id="more"></span><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性结构的特点：在数据元素的非空有限集中</p><ol><li>存在唯一的一个被称作“第一个”的数据元素</li><li>存在唯一的一个被称作“最后一个”的数据元素</li><li>除第一个之外，每个数据元素均只有一个前驱</li><li>除最后一个之外，每个数据元素均只有一个后继</li></ol><h2 id="线性表的类型定义"><a href="#线性表的类型定义" class="headerlink" title="线性表的类型定义"></a>线性表的类型定义</h2><p>抽象数据类型线性表的定义如下：</p><p>​    <strong>ADT List{</strong></p><p>​            数据对象：D &#x3D; { ai|ai∈ElemSet , i&#x3D;1,2,…,n, n&gt;&#x3D;0 }</p><p>​            数据关系：R1 &#x3D; { &lt;ai-1 , ai&gt;|ai-1 , ai∈D , i&#x3D;2,…,n }</p><p>​            基本操作：</p><table><thead><tr><th><strong>InitList(&amp;L)</strong></th><th>构造一个空的线性表L</th></tr></thead><tbody><tr><td><strong>DestroyList(&amp;L)</strong></td><td>将已存在的线性表L销毁</td></tr><tr><td><strong>ClearList(&amp;L)</strong></td><td>将已存在的线性表L重置为空表</td></tr><tr><td><strong>ListEmpty(L)</strong></td><td>若已存在的线性表L为空表，则返回TRUE，否则返回FALSE</td></tr><tr><td><strong>ListLength(L)</strong></td><td>返回已存在的线性表L中的数据元素的个数</td></tr><tr><td><strong>GetElem(L,j,&amp;e)</strong></td><td>用e返回线性表L中的第j个数据元素的值</td></tr><tr><td><strong>LocateElem(L,e,compare())</strong></td><td>返回线性表L中第一个与e满足关系compare()的数据元素的位序。若不存在，则返回值为0</td></tr><tr><td><strong>PriorElem(L,cur_e,&amp;pre_e)</strong></td><td>若cur_e是L的数据元素，且不是第一个，则用pre_e返回它的前驱，否则操作失败，pre_e无定义</td></tr><tr><td><strong>NextElem(L,cur_e,&amp;next_e)</strong></td><td>若cur_e是L的数据元素，且不是最后一个，则用next_e返回它的后继，否则操作失败，next_e无定义</td></tr><tr><td><strong>ListInsert(&amp;L,j,e)</strong></td><td>在L中第j个位置之前插入新的数据元素e，L的长度加1</td></tr><tr><td><strong>ListDelete(&amp;L,j,&amp;e)</strong></td><td>删除L的第j个数据元素，并用e返回其值，L的长度减1</td></tr><tr><td><strong>ListTraverse(L,visit())</strong></td><td>依次对L的每个数据元素调用函数visit()。一旦visit()失败，则操作失败</td></tr></tbody></table><p>​            <strong>}ADT List</strong></p><p>（算法2.1）求两个集合的并集</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">union</span><span class="params">(List &amp;La, List Lb)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//将所有在线性表Lb中但不在La中的数据元素插入到La中</span></span><br><span class="line">    La_len = ListLength(La);</span><br><span class="line">    Lb_len = ListLength(Lb); <span class="comment">//求线性表的长度</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= Lb_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        GetElem(Lb, i, e); <span class="comment">//取Lb中第i个数据元素赋给e</span></span><br><span class="line">        <span class="keyword">if</span>(!LocateElem(La,e,equal( )) ListInsert(La,++La_len,e);</span><br><span class="line">        <span class="comment">// La中不存在和e相同的数据元素，则插入之</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// unio</span></span><br></pre></td></tr></table></figure><p>（算法2.2）将两个有序线性表归并到新的有序线性表</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">void <span class="constructor">MergeList(List La, List Lb, List &amp;Lc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//已知线性表La和Lb中的数据元素按值非递减排列</span></span><br><span class="line">    <span class="comment">//归并La和Lb得到新的线性表Lc，Lc的数据元素也按值非递减排列</span></span><br><span class="line">    <span class="constructor">InitList(Lc)</span>;</span><br><span class="line">    i = j = <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    La_len = <span class="constructor">ListLength(La)</span>;</span><br><span class="line">    Lb_len = <span class="constructor">ListLength(Lb)</span>;</span><br><span class="line">    <span class="keyword">while</span> ((i &lt;= La_len)<span class="operator"> &amp;&amp; </span>(j &lt;= Lb_len)) <span class="comment">// La和Lb均非空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="constructor">GetElem(La, <span class="params">i</span>, <span class="params">ai</span>)</span>;</span><br><span class="line">        <span class="constructor">GetElem(Lb, <span class="params">j</span>, <span class="params">bj</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (ai &lt;= bj)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="constructor">ListInsert(Lc, <span class="operator">++</span><span class="params">k</span>, <span class="params">ai</span>)</span>;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="constructor">ListInsert(Lc, <span class="operator">++</span><span class="params">k</span>, <span class="params">bj</span>)</span>;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= La_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="constructor">GetElem(La, <span class="params">i</span><span class="operator">++</span>, <span class="params">ai</span>)</span>;</span><br><span class="line">        <span class="constructor">ListInsert(Lc, <span class="operator">++</span><span class="params">k</span>, <span class="params">ai</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= Lb_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="constructor">GetElem(Lb, <span class="params">j</span><span class="operator">++</span>, <span class="params">bj</span>)</span>;</span><br><span class="line">        <span class="constructor">ListInsert(Lc, <span class="operator">++</span><span class="params">k</span>, <span class="params">bj</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// MergeList</span></span><br></pre></td></tr></table></figure><h2 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h2><p>线性表的<strong>顺序表示</strong>指的是用一组<strong>地址连续的存储单元</strong>依次存储线性表的数据元素。这样的线性表的第一个数据元素的存储位置称做线性表的<strong>起始位置</strong>或<strong>基地址</strong>。线性表的这种机内表示称做线性表的<strong>顺序存储结构</strong>或<strong>顺序映像</strong>(sequential mapping)，通常称这种存储结构的线性表为<strong>顺序表</strong>。它的特点是，为表中相邻的元素赋以相邻的存储位置。由于只要确定了基地址，就可以对任一数据元素随机存取，所以线性表的顺序存储结构是一种<strong>随机存取</strong>的存储结构。这个特点也铸成这种存储结构的弱点：在作插入或删除操作时，需要移动大量元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------线性表的动态分配顺序存储结构-----------</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_INIT_SIZE 100 <span class="comment">//线性表存储空间的初始分配量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LISTINCREMENT 10   <span class="comment">//线性表存储空间的分配增量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType *elem; <span class="comment">//存储空间基址</span></span><br><span class="line">    <span class="type">int</span> length;     <span class="comment">//当前长度</span></span><br><span class="line">    <span class="type">int</span> listsize;   <span class="comment">//当前分配的存储容量(以sizeof(ElemType)为单位)</span></span><br><span class="line">&#125; SqList;</span><br></pre></td></tr></table></figure><p>顺序表的初始化操作就是为顺序表分配一个预定义大小的数组空间，并将线性表的长度设为“0”。</p><p>（算法2.3）构造一个空的顺序表</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Status InitList_Sq(SqList &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>构造一个空的线性表L</span><br><span class="line">    L.elem = (ElemType *)malloc(LIST_INIT_SIZE * sizeof(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!L.elem)</span><br><span class="line">        <span class="keyword">exit</span>(OVERFLOW);          <span class="regexp">//</span>存储分配失败</span><br><span class="line">    L.length = <span class="number">0</span>;                <span class="regexp">//</span>空表长度为<span class="number">0</span></span><br><span class="line">    L.listsize = LIST_INIT_SIZE; <span class="regexp">//</span>初始存储容量</span><br><span class="line">    return OK;</span><br><span class="line">&#125; <span class="regexp">//</span> InitList_Sq</span><br></pre></td></tr></table></figure><p>（算法2.4）在顺序表中插入元素</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Status ListInsert_Sq(SqList &amp;L, int i, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>在顺序线性表L中第i个位置之前插入新的元素e</span><br><span class="line">    <span class="regexp">//</span> i的合法值为<span class="number">1</span>&lt;=i&lt;=ListLength_Sq(L)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>)</span><br><span class="line">        return ERROR; <span class="regexp">//</span> i值不合法</span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= L.listsize)</span><br><span class="line">    &#123; <span class="regexp">//</span>当前存储空间已满，增加分配</span><br><span class="line">        newbase = (ElemType *)realloc(L.elem, (L.listsize + LISTINCREMENT) * sizeof(ElemType));</span><br><span class="line">        <span class="keyword">if</span> (!newbase)</span><br><span class="line">            <span class="keyword">exit</span>(OVERFLOW);          <span class="regexp">//</span>存储分配失败</span><br><span class="line">        L.elem = newbase;            <span class="regexp">//</span>新基址</span><br><span class="line">        L.listsize += LISTINCREMENT; <span class="regexp">//</span>增加存储容量</span><br><span class="line">    &#125;</span><br><span class="line">    q = &amp;(L.elem[i - <span class="number">1</span>]); <span class="regexp">//</span> q为插入位置</span><br><span class="line">    <span class="keyword">for</span> (p = &amp;(L.elem[L.length - <span class="number">1</span>]); p &gt;= q; --p)</span><br><span class="line">        *(p + <span class="number">1</span>) = *p; <span class="regexp">//</span>插入位置及之后的元素右移</span><br><span class="line">    *q = e;            <span class="regexp">//</span>插入e</span><br><span class="line">    ++L.length;        <span class="regexp">//</span>表长增<span class="number">1</span>；</span><br><span class="line">    return OK;</span><br><span class="line">&#125; <span class="regexp">//</span> ListInsert_Sq</span><br></pre></td></tr></table></figure><p>（算法2.5）在顺序表中删除元素</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status ListDelete_S<span class="string">q(SqList &amp;L, int i, ElemType &amp;e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>在顺序线性表L中删除第i个元素，并用e返回其值</span><br><span class="line">    // i的合法值为<span class="number">1</span>&lt;=i&lt;=ListLength_S<span class="string">q(L)</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;          <span class="regexp">//</span> i值不合法</span><br><span class="line">    p = &amp;(L.elem[i - <span class="number">1</span>]);      <span class="regexp">//</span> p为被删除元素的位置</span><br><span class="line">    e = *p;                    <span class="regexp">//</span>被删除元素的值赋给e</span><br><span class="line">    <span class="keyword">q</span> = L.elem + L.length - <span class="number">1</span>; <span class="regexp">//</span>表尾元素的位置</span><br><span class="line">    <span class="keyword">for</span> (++p; p &lt;= <span class="keyword">q</span>; ++p)</span><br><span class="line">        *(p - <span class="number">1</span>) = *p; <span class="regexp">//</span>被删除元素之后的元素左移</span><br><span class="line">    --L.length;        <span class="regexp">//</span>表长减<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125; // ListDelete_Sq</span><br></pre></td></tr></table></figure><p>（算法2.6）在顺序表中查找元素</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="constructor">LocateElem_Sq(SqList L, ElemType <span class="params">e</span>, Status (<span class="operator">*</span><span class="params">compare</span>)</span>(ElemType, ElemType))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在顺序线性表L中查找第1个值与e满足compare()的元素的位序</span></span><br><span class="line">    <span class="comment">//若找到，则返回其在L中的位序，否则返回0</span></span><br><span class="line">    i = <span class="number">1</span>;      <span class="comment">// i的初值为第一个元素的位序</span></span><br><span class="line">    p = <span class="module-access"><span class="module"><span class="identifier">L</span>.</span></span>elem; <span class="comment">// p的初值为第一个元素的存储位置</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="module-access"><span class="module"><span class="identifier">L</span>.</span></span>length<span class="operator"> &amp;&amp; </span>!(*compare)(*p++, e))</span><br><span class="line">        ++i;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="module-access"><span class="module"><span class="identifier">L</span>.</span></span>length)</span><br><span class="line">        return i;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        return <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">// LocateElem Sq</span></span><br></pre></td></tr></table></figure><p>（算法2.7）顺序表的归并</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void MergeList_Sq(SqList La, SqList Lb, SqList &amp;Lc)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>已知顺序线性表La和Lb的元素按值非递减排列</span><br><span class="line">    <span class="regexp">//</span>归并La和Lb得到新的顺序线性表Lc，Lc的元素也按值非递减排列</span><br><span class="line">    pa = La.elem;</span><br><span class="line">    pb = Lb.elem;</span><br><span class="line">    Lc.listsize = Lc.length = La.length + Lb.length;</span><br><span class="line">    pc = Lc.elem = (ElemType *)malloc(Lc.listsize * sizeof(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!Lc.elem)</span><br><span class="line">        <span class="keyword">exit</span>(OVERFLOW); <span class="regexp">//</span>存储分配失败</span><br><span class="line">    pa_last = La.elem + La.length - <span class="number">1</span>;</span><br><span class="line">    pb_last = Lb.elem + Lb.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (pa &lt;= pa_last &amp;&amp; pb &lt;= pb_last)</span><br><span class="line">    &#123; <span class="regexp">//</span>归并</span><br><span class="line">        <span class="keyword">if</span> (*pa &lt;= *pb)</span><br><span class="line">            *pc++ = *pa++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            *pc++ = *pb++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (pa &lt;= pa_last)</span><br><span class="line">        *pc++ = *pa++; <span class="regexp">//</span>插入La的剩余元素</span><br><span class="line">    <span class="keyword">while</span> (pb &lt;= pb_last)</span><br><span class="line">        *pc++ = *pb++; <span class="regexp">//</span>插入Lb的剩余元素</span><br><span class="line">&#125; <span class="regexp">//</span> MergeList_Sq</span><br></pre></td></tr></table></figure><h2 id="线性表的链式表示和实现"><a href="#线性表的链式表示和实现" class="headerlink" title="线性表的链式表示和实现"></a>线性表的链式表示和实现</h2><p>链式存储结构不要求逻辑上相邻的元素在物理位置上也相邻，因此它没有顺序存储结构所具有的弱点，但同时也失去了顺序表可随机存取的优点</p><h3 id="线性链表"><a href="#线性链表" class="headerlink" title="线性链表"></a>线性链表</h3><p>线性表的链式存储结构的特点是用一组<strong>任意的</strong>存储单元存储数据元素。对数据元素来说，除了存储其本身的信息之外，<strong>还需存储直接后继的存储位置</strong>，这两部分信息组成数据元素的存储映像，称为<strong>结点</strong>(node)。它包括两个域：其中存储数据元素信息的域称为数据域；存储直接后继存储位置的域称为指针域。n个结点链结成一个链表，即为线性表的链式存储结构。又由于此链表的每个结点中只包含一个指针域，故又称线性链表或单链表</p><p>整个链表的存取必须从<strong>头指针</strong>开始进行，头指针指示链表中第一个结点的存储位置。同时，最后一个结点的指针为“空”(<strong>NULL</strong>)</p><p>单链表可由头指针唯一确定，在C语言中可用“结构指针“来描述</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----线性表的单链表存储结构-----</span></span><br><span class="line">typedef <span class="keyword">struct</span> <span class="type">LNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="type">LNode</span> *next;</span><br><span class="line">&#125; LNode, *LinKList;</span><br></pre></td></tr></table></figure><p>有时会在单链表的第一个结点之前附设一个结点，称之为<strong>头结点</strong>。头结点的数据域可以不存储任何信息，其指针域存储指向第一个结点的指针。</p><p>（算法2.8）函数GetElem在单链表中的实现</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Status GetElem_L(LinkList L, int i, ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span> L为带头结点的单链表的头指针</span><br><span class="line">    <span class="regexp">//</span>当第i个元素存在时，其值赋给e并返回OK，否则返回ERROR</span><br><span class="line">    p = L-&gt;<span class="keyword">next</span>;</span><br><span class="line">    j = <span class="number">1</span>; <span class="regexp">//</span>初始化，p指向第一个结点，j为计数器</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;<span class="keyword">next</span>;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p || j &gt; i)</span><br><span class="line">        return ERROR; <span class="regexp">//</span>第i个元素不存在</span><br><span class="line">    e = p-&gt;data;      <span class="regexp">//</span>取第i个元素</span><br><span class="line">    return OK;</span><br><span class="line">&#125; <span class="regexp">//</span> GetElem_L</span><br></pre></td></tr></table></figure><p>（算法2.9）在链表中插入元素</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status ListInsert_L(LinkList &amp;L, int i, ElemType)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在带头结点的单链线性表L中第i个位置之前插入元素e</span></span><br><span class="line">    p = L;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) <span class="comment">//寻找第i-1个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p || j &gt; i - <span class="number">1</span>)</span><br><span class="line">        return ERROR;                    <span class="comment">// i小于1或者大于表长加1</span></span><br><span class="line">    s = (LinkList)malloc(sizeof(LNode)); <span class="comment">//生成新结点</span></span><br><span class="line">    <span class="function"><span class="title">s</span>-&gt;</span><span class="keyword">data</span> = e;</span><br><span class="line">    <span class="function"><span class="title">s</span>-&gt;</span><span class="function"><span class="title">next</span> = p-&gt;</span>next; <span class="comment">//插入L中</span></span><br><span class="line">    <span class="function"><span class="title">p</span>-&gt;</span>next = s;</span><br><span class="line">    return OK;</span><br><span class="line">&#125; <span class="comment">// ListInsert_L</span></span><br></pre></td></tr></table></figure><p>（算法2.10）删除链表中的元素</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status ListDelete_L(LinkList &amp;L, int i, ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在带头结点的单链线性表L中，删除第i个元素，并由e返回其值</span></span><br><span class="line">    p = L;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="title">while</span> (p-&gt;</span>next &amp;&amp; j &lt; i - <span class="number">1</span>) <span class="comment">//寻找第i个结点，并令p指向其前趋</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (!(p-&gt;</span>next) || j &gt; i - <span class="number">1</span>)</span><br><span class="line">        return ERROR; <span class="comment">//删除位置不合理</span></span><br><span class="line">    <span class="function"><span class="title">q</span> = p-&gt;</span>next;</span><br><span class="line">    <span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">next</span> = q-&gt;</span>next; <span class="comment">//删除并释放结点</span></span><br><span class="line">    <span class="function"><span class="title">e</span> = q-&gt;</span><span class="keyword">data</span>;</span><br><span class="line">    free(q);</span><br><span class="line">    return OK;</span><br><span class="line">&#125; <span class="comment">// ListDelete_L</span></span><br></pre></td></tr></table></figure><p>（算法2.11）从表尾到表头逆向建立单链表</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void CreateList_L(LinkList &amp;L, int n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>逆位序输入n个元素的值，建立带表头结点的单链线性表L</span><br><span class="line">    L = (LinkList)malloc(sizeof(LNode));</span><br><span class="line">    L-&gt;<span class="keyword">next</span> = NULL; <span class="regexp">//</span>先建立一个带头结点的单链表</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt; <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (LinkList)malloc(sizeof(LNode)); <span class="regexp">//</span>生成新结点</span><br><span class="line">        scanf(&amp;p-&gt;data);                     <span class="regexp">//</span>输入元素值</span><br><span class="line">        p-&gt;<span class="keyword">next</span> = L-&gt;<span class="keyword">next</span>;</span><br><span class="line">        L-&gt;<span class="keyword">next</span> = p; <span class="regexp">//</span>插入到表头</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="regexp">//</span> CreateList L</span><br></pre></td></tr></table></figure><p>（算法2.12）归并两个有序单链表</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void MergeList_L(LinkList &amp;La, LinkList &amp;Lb, LinkList &amp;Lc)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//已知单链线性表La和Lb的元素按值非递减排列</span></span><br><span class="line">    <span class="comment">//归并La和Lb得到新的单链线性表Lc，Lc的元素也按值非递减排列</span></span><br><span class="line">    <span class="function"><span class="title">pa</span> = La-&gt;</span>next;</span><br><span class="line">    <span class="function"><span class="title">pb</span> = Lb-&gt;</span>next;</span><br><span class="line">    Lc = pc = La; <span class="comment">//用La的头结点作为Lc的头结点</span></span><br><span class="line">    <span class="keyword">while</span> (pa &amp;&amp; pb)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (pa-&gt;</span><span class="function"><span class="title">data</span> &lt;= pb-&gt;</span><span class="keyword">data</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="title">pc</span>-&gt;</span>next = pa;</span><br><span class="line">            pc = pa;</span><br><span class="line">            <span class="function"><span class="title">pa</span> = pa-&gt;</span>next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="title">pc</span>-&gt;</span>next = pb;</span><br><span class="line">            pc = pb;</span><br><span class="line">            <span class="function"><span class="title">pb</span> = pb-&gt;</span>next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">pc</span>-&gt;</span>next = pa ? pa : pb; <span class="comment">//插入剩余段</span></span><br><span class="line">    free(Lb);                <span class="comment">//释放Lb的头结点</span></span><br><span class="line">&#125; <span class="comment">// MergeList_L</span></span><br></pre></td></tr></table></figure><p>静态链表，用一维数组来描述线性链表，用游标（指示器cur）代替指针指示结点在数组中的相对位置、</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----线性表的静态单链表存储结构-----</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 1000 <span class="comment">//链表的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">&#125; component, SLinkList[MAXSIZE];</span><br></pre></td></tr></table></figure><p>（算法2.13）在静态链表中实现的定位函数LocateElem</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int LocateElem_SL(SLinkList S, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>在静态单链线性表L中查找第<span class="number">1</span>个值为e的元素</span><br><span class="line">    <span class="regexp">//</span>若找到，则返回它在L中的位序，否则返回<span class="number">0</span></span><br><span class="line">    i = S[<span class="number">0</span>].cur; <span class="regexp">//</span> i指示表中第一个结点</span><br><span class="line">    <span class="keyword">while</span> (i &amp;&amp; S[i].data != e)</span><br><span class="line">        i = S[i].cur; <span class="regexp">//</span>在表中顺链查找</span><br><span class="line">    return i;</span><br><span class="line">&#125; <span class="regexp">//</span> LocateElem_SL</span><br></pre></td></tr></table></figure><p>（算法2.14）将整个数组空间初始化成一个链表</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void InitSpace_SL<span class="params">(SLinkList &amp;space)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">//</span>将一维数组space中各分量链成一个备用链表，space[0]<span class="string">.cur</span>为头指针，</span><br><span class="line">    <span class="string">//</span><span class="string">&quot;0&quot;</span>表示空指针</span><br><span class="line">    for <span class="params">(<span class="attr">i</span> = 0; i &lt; MAXSIZE - 1; ++i)</span></span><br><span class="line">        space[i]<span class="string">.cur</span> = i + 1;</span><br><span class="line">    space[MAXSIZE - 1]<span class="string">.cur</span> = 0;</span><br><span class="line">&#125; <span class="string">//</span> InitSpace_SL</span><br></pre></td></tr></table></figure><p>（算法2.15）从备用空间取得一个结点</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">int</span> Malloc_SL(SLinkList &amp;<span class="meta">space</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//若备用空间链表非空，则返回分配的结点下标，否则返回0</span></span><br><span class="line">    i = <span class="meta">space</span>[<span class="number">0</span>].cur<span class="comment">;</span></span><br><span class="line">    <span class="meta">if</span> (<span class="meta">space</span>[<span class="number">0</span>].cur)</span><br><span class="line">        <span class="meta">space</span>[<span class="number">0</span>].cur = <span class="meta">space</span>[i].cur<span class="comment">;</span></span><br><span class="line">    return i<span class="comment">;</span></span><br><span class="line">&#125; <span class="comment">// Malloc_SL</span></span><br></pre></td></tr></table></figure><p>（算法2.16）将空闲结点链结到备用链表上</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">void</span> Free_SL(SLinkList &amp;<span class="meta">space</span>, int k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//将下标为k的空闲结点回收到备用链表</span></span><br><span class="line">    <span class="meta">space</span>[k].cur = <span class="meta">space</span>[<span class="number">0</span>].cur<span class="comment">;</span></span><br><span class="line">    <span class="meta">space</span>[<span class="number">0</span>].cur = k<span class="comment">;</span></span><br><span class="line">&#125; <span class="comment">// Free_SL</span></span><br></pre></td></tr></table></figure><p>（算法2.17）（A-B）∪（B-A）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">void difference(SLinkList &amp;space, int &amp;S)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>依次输入集合A和B的元素，在一维数组space中建立表示集合（A-B）∪（B-A）</span><br><span class="line">    <span class="regexp">//</span>的静态链表，S为其头指针。假设备用空间足够大，space[<span class="number">0</span>].cur为其头指针</span><br><span class="line">    InitSpace_SL(space);  <span class="regexp">//</span>初始化备用空间</span><br><span class="line">    S = Malloc_SL(space); <span class="regexp">//</span>生成S的头结点</span><br><span class="line">    r = S;                <span class="regexp">//</span> r指向S的当前最后结点</span><br><span class="line">    scanf(m, n);          <span class="regexp">//</span>输入A和B的元素个数</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">    &#123;                         <span class="regexp">//</span>建立集合A的链表</span><br><span class="line">        i = Malloc_SL(space); <span class="regexp">//</span>分配结点</span><br><span class="line">        scanf(space[i].data); <span class="regexp">//</span>输入A的元素值</span><br><span class="line">        space[r].cur = <span class="number">1</span>;</span><br><span class="line">        r = i;        <span class="regexp">//</span>插入到表尾</span><br><span class="line">    &#125;                 <span class="regexp">//</span> <span class="keyword">for</span></span><br><span class="line">    space[r].cur = <span class="number">0</span>; <span class="regexp">//</span>尾结点的指针为空</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">    &#123; <span class="regexp">//</span>依次输入B的元素，若不在当前表中，则插入，否则删除</span><br><span class="line">        scanf(b);</span><br><span class="line">        p = S;</span><br><span class="line">        k = space[S].cur; <span class="regexp">//</span> k指向集合A中第一个结点</span><br><span class="line">        <span class="keyword">while</span> (k != space[r].cur &amp;&amp; space[k].data != b)</span><br><span class="line">        &#123; <span class="regexp">//</span>在当前表中查找</span><br><span class="line">            p = k;</span><br><span class="line">            k = space[k].cur;</span><br><span class="line">        &#125; <span class="regexp">//</span> whiel</span><br><span class="line">        <span class="keyword">if</span> (k == space[r].cur)</span><br><span class="line">        &#123; <span class="regexp">//</span>当前表中不存在该元素，插入在r所指结点之后，且r的位置不变</span><br><span class="line">            i = Malloc_SL(space);</span><br><span class="line">            space[i].data = b;</span><br><span class="line">            space[i].cur = space[r].cur;</span><br><span class="line">            space[r].cur = i;</span><br><span class="line">        &#125; <span class="regexp">//</span> <span class="keyword">if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123; <span class="regexp">//</span>该元素已在表中，删除之</span><br><span class="line">            space[p].cur = space[k].cur;</span><br><span class="line">            Free_SL(space, k);</span><br><span class="line">            <span class="keyword">if</span> (r == k)</span><br><span class="line">                r = p; <span class="regexp">//</span>若删除的是r所指结点，则需修改尾指针</span><br><span class="line">        &#125;              <span class="regexp">//</span> <span class="keyword">else</span></span><br><span class="line">    &#125;                  <span class="regexp">//</span> <span class="keyword">for</span></span><br><span class="line">&#125; <span class="regexp">//</span> difference</span><br></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的C++学习笔记</title>
      <link href="/2022/03/30/%E6%88%91%E7%9A%84C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/30/%E6%88%91%E7%9A%84C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>写在前面的话：<br>以下为作者阅读《c++primer（第五版）》所做的笔记</p><span id="more"></span><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h1 id="第Ⅰ部分"><a href="#第Ⅰ部分" class="headerlink" title="第Ⅰ部分"></a>第Ⅰ部分</h1><h2 id="第2章-变量和基本类型"><a href="#第2章-变量和基本类型" class="headerlink" title="第2章 变量和基本类型"></a>第2章 变量和基本类型</h2><h3 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h3><h4 id="算术类型"><a href="#算术类型" class="headerlink" title="算术类型"></a>算术类型</h4><p>——整型（包括字符和布尔类型在内）和浮点型</p><ul><li>带符号（signed）类型和无符号（unsigned）类型<ul><li>unsigned类型仅能表示大于等于0的值</li><li>一般整型分为两种，字符型被分为三种：char、signed char和unsigned      char，其中char即可指代signed也可以是unsigned，取决于编译器</li></ul></li></ul><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li>非布尔类型的算术值赋给bool类型时，初始值为0则为false，否则为true</li><li>bool值赋给非布尔类型时，初始值为false则为0，否则为1</li><li>浮点数赋给整数类型时，结果只保留浮点数中的小数点之前的部分</li><li>整数赋给浮点类型时，小数部分为0，如果超出精度，会损失</li><li>赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示数值总数取模后的余数。例如，8比特大小的unsigned char可以表示0到255总共256个数，把-1赋给unsigned char所得的结果是-1对256取模后所得的余数255</li><li>赋给带符号类型一个超出它表示范围的值时，结果是未定义的。可能继续工作、可能崩溃，也可能生产垃圾数据</li></ul><h4 id="字面值常量"><a href="#字面值常量" class="headerlink" title="字面值常量"></a>字面值常量</h4><ul><li>整型和浮点型字面值<ul><li>整型  20（十进制） 024（八进制） 0x14（十六进制）</li><li>浮点型      3.14159      3.14159E0        0.         0e0          .001</li></ul></li><li>字符和字符串字面值<ul><li>字符       ‘a’</li><li>字符串   “hello”</li></ul></li><li>转义序列<ul><li>不可打印的字符，如退格；特殊含义的字符，如引号<br>换行符             \n      横向制表符     \t        报警（响铃）符      \a<br>纵向制表符      \v      退格符            \b       双引号                      \“<br>反斜线              \      问号                  ?        单引号                      \‘<br>回车符             \r      进纸符              \f</li></ul></li><li>指定字面值的类型</li><li>布尔字面值和指针字面值<ul><li>布尔  true和false</li><li>指针      nullptr</li></ul></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><p>类型说明符，紧跟一个或多个变量名组成的列表，用逗号隔开，分号结束，定义时可以同时赋值</p><ul><li>初始值<ul><li>初始化：创建变量时赋予其一个初始值</li><li>赋值：把对象的当前值擦除，而以一个新值来替代</li></ul></li><li>列表初始化<ul><li>用花括号来初始化变量，如 int num&#x3D;{0}</li><li>如果我们使用列表初始化且初始值存在丢失信息的风险，则编译器将报错</li></ul></li><li>默认初始化<ul><li>内置类型的变量未被显式初始化，它的值由定义的位置决定。</li><li>定义于任何函数体之外的变量被初始化为0</li><li>定义在函数体之内的将不被初始化，其值是未定义的，试图访问时会引发错误</li><li>类的对象如果没有显式地初始化，则其值由类确定</li></ul></li></ul><h4 id="变量声明和定义的关系"><a href="#变量声明和定义的关系" class="headerlink" title="变量声明和定义的关系"></a>变量声明和定义的关系</h4><ul><li><p><strong>声明</strong>使得名字为程序所知，一个文件若想使用别处定义的名字则必须包含对那个名字的声明。声明变量添加关键字extern，并不要显式地初始化变量。<strong>不建立新的储存空间</strong></p></li><li><p><strong>定义</strong>负责创建与名字关联的实体。<strong>建立了新的储存空间</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;<span class="comment">//声明</span></span><br><span class="line"><span class="type">int</span> i;<span class="comment">//定义</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//定义</span></span><br></pre></td></tr></table></figure><p>函数体内部，若试图初始化一个由extern关键字标记的变量，将引发错误  </p><p><strong>变量可以被多次声明，但只能被定义一次</strong></p></li></ul><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul><li>由字母、数字和下划线组成，必须以字母或下划线开头，对长度没有限制，但对大小写字母敏感<ul><li>不能连续出现两个下划线</li><li>不能以下划线紧连大写字母开头</li><li>定义在函数体外的标识符不能以下划线开头</li></ul></li><li>变量命名规范<ul><li>标识符要能体现实际含义</li><li>变量名一般用小写字母</li><li>用户自定义的类名一般以大写字母开头</li><li>如果标识符由多个单词组成，则单词间应有明显的区分，如student_loan或studentLoan</li></ul></li></ul><h4 id="名字的作用域"><a href="#名字的作用域" class="headerlink" title="名字的作用域"></a>名字的作用域</h4><ul><li>名字指向一个特定的实体：变量、函数、类型等</li><li>作用域是程序的一部分，在其中名字有其特定的含义。以花括号分隔</li><li>同一个名字在不同的作用域中可能指向不同的实体。名字的有效区域始于名字的声明语句，以声明语句所在的作用域末端为结束</li><li>全局作用域</li><li>块作用域</li><li>嵌套的作用域：内层作用域，外层作用域。</li><li>作用域中一旦声明了某个名字，他所嵌套的所有作用域中都能访问改名字。同时，允许在内层作用域中重新定义外层作用域已有的名字</li></ul><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><p>基于其他类型定义的类型<br>一条声明语句由一个<strong>基本数据类型</strong>和紧随其后的一个<strong>声明符</strong>列表组成。每个声明符命名了一个变量并指定该变量为与基本数据类型有关的某种类型</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><ul><li>左值引用<br>为对象起另外一个名字，引用类型引用另外一种类型<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="built_in">int</span> &amp;<span class="built_in">ref</span>Val = ival;<span class="comment">//refVal指向ival（ival的另外一个名字）</span></span><br><span class="line"><span class="built_in">int</span> &amp;<span class="built_in">ref</span>Val2;<span class="comment">//报错：引用必须被初始化</span></span><br></pre></td></tr></table></figure><ul><li>引用即别名<br><strong>引用并非对象</strong>，相反的，他只是为一个已经存在的对象起的<strong>另外一个名字</strong><br>因为引用本身不是一个对象，所以不能定义引用的引用</li><li>引用的定义<br>引用只能绑定在对象上，<strong>引用类型的初始值必须是一个对象</strong>，且<strong>引用类型和初始值类型一致</strong></li></ul></li><li>右值引用</li></ul><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p>指针本身就是一个对象，允许对指针赋值和拷贝，而且在指针的生命周期内它可以先后指向几个不同的对象<br>指针无须在定义时赋值</p><ul><li><p>获取对象的地址<br><strong>指针存放对象的地址</strong>，使用取地址符（操作符&amp;）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int *p = <span class="meta">&amp;ival;</span></span><br></pre></td></tr></table></figure><p>不能定义指向引用的指针，因为引用不是对象，没有实际地址<br><strong>指针的类型和其指向的对象的类型相匹配</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> dval;</span><br><span class="line"><span class="built_in">double</span> *pd = &amp;dval;<span class="comment">//初始值是double型对象的地址</span></span><br><span class="line"><span class="built_in">double</span> *pd2 = pd;<span class="comment">//初始值是指向double对象的指针</span></span><br></pre></td></tr></table></figure></li><li><p>指针值<br>指针的值（即地址）应属于下列4种状态之一：</p><ul><li>指向一个对象</li><li>指向紧邻对象所占空间的下一个位置</li><li>空指针，意味着指针没有指向任何对象</li><li>无效指针，也就是上述情况以外的其他值</li></ul></li><li><p>利用指针访问对象<br>使用解引用符（操作符*）来访问对象</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int <span class="attr">ival</span> = <span class="number">42</span>;</span><br><span class="line">int *<span class="attr">p</span> = &amp;ival;</span><br><span class="line">*<span class="attr">p</span> = <span class="number">0</span>;//对指针p所指的对象赋值<span class="number">0</span>，即<span class="attr">ival=0</span></span><br></pre></td></tr></table></figure><p>解引用操作仅适用于那些确实指向了某个对象的有效指针</p></li><li><p>空指针<br>不指向任何对象</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int *p1 <span class="operator">=</span> nullptr<span class="comment">;</span></span><br><span class="line">int *p2 <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">int *p3 <span class="operator">=</span> NULL<span class="comment">;//需要首先#include cstdlib</span></span><br></pre></td></tr></table></figure></li><li><p>赋值和指针<br>记住赋值永远改变的是等号左侧的对象</p></li></ul><h4 id="理解复合类型的声明"><a href="#理解复合类型的声明" class="headerlink" title="理解复合类型的声明"></a>理解复合类型的声明</h4><ul><li>定义多个变量<br>类型修饰符（*或&amp;）属于声明符的一部分，也就是说，类型修饰符只作用于一个变量</li><li>指向指针的指针<br>通过*的个数区分指针的级别<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="built_in">int</span> *<span class="built_in">pi</span> = &amp;ival;//<span class="built_in">pi</span>指向一个<span class="built_in">int</span>型的数</span><br><span class="line"><span class="built_in">int</span> **ppi = &amp;<span class="built_in">pi</span>;//ppi指向一个<span class="built_in">int</span>型的指针 </span><br></pre></td></tr></table></figure></li><li>指向指针的引用<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i = <span class="number">42</span>;</span><br><span class="line">int *p;<span class="regexp">//</span>p是一个int型指针</span><br><span class="line">int *&amp;r = p;<span class="regexp">//</span>r是一个对指针p的引用</span><br><span class="line">r = &amp;i;<span class="regexp">//</span>r引用了一个指针，即p指向i</span><br><span class="line">*r = <span class="number">0</span>;<span class="regexp">//</span>解引用r得到i，也就是p指向的对象，然后赋值为<span class="number">0</span></span><br></pre></td></tr></table></figure><strong>离变量名最近的符号对变量的类型有最直接的影响</strong>，因此r是一个引用，声明符其余部分以确定r引用的类型<br>面对一条比较复杂的指针或引用的声明语句时，<strong>从右向左</strong>阅读有助于弄清楚他的真实含义</li></ul><h3 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h3><p>关键字const对变量的类型加以限定，使其值不再改变<br>因为const对象一旦创建后其值就不能再改变，所以<strong>const对象必须初始化</strong><br>默认状态下，const对象仅在文件内有效，如果想在多个文件之间共享const对象，必须在变量的<strong>定义之前</strong>添加extern关键字</p><h4 id="const的引用"><a href="#const的引用" class="headerlink" title="const的引用"></a>const的引用</h4><p>对常量的引用，不能被用作修改它所绑定的对象<br>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> ci = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> &amp;r1 = ci;</span><br></pre></td></tr></table></figure></p><ul><li><p>初始化和对const的引用<br><strong>引用的类型必须与其所引用对象的类型一致</strong>，但是有<strong>两个例外</strong><br>第一种，在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。尤其，允许为一个常量引用绑定非常量的对象、字面值，甚至是个一般表达式</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span><span class="comment">;</span></span><br><span class="line">const <span class="keyword">int</span> &amp;<span class="built_in">r1</span> = i<span class="comment">;</span></span><br><span class="line">const <span class="keyword">int</span> &amp;<span class="built_in">r2</span> = <span class="number">42</span><span class="comment">;</span></span><br><span class="line">const <span class="keyword">int</span> &amp;<span class="built_in">r3</span> = <span class="built_in">r1</span>*<span class="number">2</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>下面是一个复杂的情况：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">int</span> &amp;ri = dval;<span class="comment">//错误</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> &amp;ri = dval;<span class="comment">//正确</span></span><br></pre></td></tr></table></figure><p>实际上编译器把上述代码变成了</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> temp = dval;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> &amp;ri = temp;</span><br></pre></td></tr></table></figure><p>ri绑定了一个临时量对象，即当编译器需要一个空间来暂存表达式的求值结果临时创建的一个未命名的对象</p></li><li><p>对const的引用可能引用一个并非const的对象<br><strong>常量引用</strong>仅对引用<strong>可参与的操作</strong>做出了限定，对于引用的<strong>对象本身是不是一个常量未作限定</strong><br>对象也可能是个非常量，所以<strong>允许通过其他途径改变他的值</strong></p></li></ul><h4 id="指针和const"><a href="#指针和const" class="headerlink" title="指针和const"></a>指针和const</h4><p>指向常量的指针，<strong>不能用于改变其所指对象的值</strong>，但没有规定那个对象的值不能<strong>通过其他途径</strong>改变</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> pi = <span class="number">3.14</span>;<span class="comment">//pi是个常量，它的值不能改变</span></span><br><span class="line"><span class="built_in">double</span> *ptr = &amp;pi;<span class="comment">//错误，ptr是一个普通指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> *cptr = &amp;pi;<span class="comment">//正确，cptr可以指向一个双精度常量</span></span><br><span class="line">*cptr = <span class="number">42</span>;<span class="comment">//错误，不能给*cptr赋值</span></span><br></pre></td></tr></table></figure><p><strong>指针的类型必须与其所指对象的类型一致</strong>，但是有<strong>两个例外</strong>。第一种是允许令一个指向常量的指针指向一个非常量对象</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> *cptr = &amp;dval;</span><br></pre></td></tr></table></figure><p>所谓指向常量的指针或引用，不过是“自以为是”罢了，他们觉得自己指向了常量，所以<strong>自觉地不去改变所指对象的值</strong></p><ul><li><p>const指针<br><strong>常量指针必须初始化</strong>，而且一旦初始化完成，则它的<strong>值（也就是存放在指针中的那个地址）就不能再改变了</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> errNumb = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> *<span class="keyword">const</span> curErr = &amp;errNumb;<span class="comment">//curErr将一直指向errNumb</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> *<span class="keyword">const</span> pip = &amp;pi;<span class="comment">//pip是一个指向常量对象的常量指针</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h4><p>顶层表示指针本身是个常量，底层表示指针所指的对象是一个常量<br>更一般的，<strong>顶层const</strong>可以表示<strong>任意的对象是常量</strong>，底层const则与指针和引用等复合类型的基本类型部分有关<br>比较特殊的是，<strong>指针类型既可以是顶层const也可以是底层</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> *<span class="keyword">const</span> pl = &amp;I;<span class="comment">//不能改变pl的值，顶层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> ci = <span class="number">42</span>;<span class="comment">//不能改变ci的值，顶层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> *p2 = &amp;ci;<span class="comment">//允许改变p2的值，底层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> *<span class="keyword">const</span> p3 = p2;<span class="comment">//靠右的const是顶层const，靠左的是底层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> &amp;r = ci;<span class="comment">//用于声明引用的const都是底层const</span></span><br></pre></td></tr></table></figure><p>当执行对象的拷贝操作时，常量是顶层const还是底层const区别明显。其中，顶层const不受什么影响：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">i</span> <span class="operator">=</span> ci<span class="comment">;//正确，拷贝ci的值，ci是一个顶层const，对此操作无影响</span></span><br><span class="line"><span class="attribute">p2</span> <span class="operator">=</span> p3<span class="comment">;//正确，p2和p3指向的对象类型相同，p3顶层const的部分不影响</span></span><br></pre></td></tr></table></figure><p>另一方面，<strong>底层const的限制</strong>却不能忽视。当执行对象的拷贝操作时，<strong>拷入和拷出的对象必须具有相同的底层const资格</strong>，或者<strong>两个对象的数据类型必须能够转换</strong>。一般来说，<strong>非常量可以转换成常量</strong>，反之则不行</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int *p = p3;//错误，p3包含底层const的定义，而p没有</span><br><span class="line">p2 = p3;//正确，p2和p3都是底层const</span><br><span class="line">p2 = &amp;i;//正确，int*能转换成const int*<span class="built_in"></span></span><br><span class="line"><span class="built_in">int </span>&amp;r = ci;//错误，普通的int&amp;不能绑定到int常量上<span class="built_in"></span></span><br><span class="line"><span class="built_in">const </span>int &amp;r2 = i;//正确，const int&amp;可以绑定到一个普通int上</span><br><span class="line">p3既是顶层const也是底层const，拷贝p3时可以不在乎它是一个顶层const，但是必须清楚它指向的对象得是一个常量。因此，不能用p3去初始化p，因为p指向的是一个普通的（非常量）整数。另一方面，p3的值可以赋给p2，是因为这两个指针都是底层const，尽管p3同时也是一个常量指针（顶层const）仅就这次赋值而言不会有什么影响</span><br></pre></td></tr></table></figure><h4 id="constexpr和常量表达式"><a href="#constexpr和常量表达式" class="headerlink" title="constexpr和常量表达式"></a>constexpr和常量表达式</h4><p><strong>常量表达式</strong>是指值不会改变并且在编译过程就能得到计算结果的表达式。一个对象（或表达式）是不是常量表达式由它的<strong>数据类型</strong>和<strong>初始值</strong>共同决定。例如</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> max_files = <span class="number">20</span>;         <span class="comment">//max_files是常量表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> limit = max_files + <span class="number">1</span>;  <span class="comment">//limit是常量表达式</span></span><br><span class="line"><span class="built_in">int</span> staff_size = <span class="number">27</span>;              <span class="comment">//staff_size不是常量表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> sz = get_size();        <span class="comment">//sz不是常量表达式</span></span><br><span class="line">尽管staff_size的初始值是个字面值常量，但由于他的数据类型只是一个普通<span class="built_in">int</span>而非<span class="keyword">const</span> <span class="built_in">int</span>，所以它不属于常量表达式。另一方面，尽管sz本身是一个常量，但它的具体值直到运行时才获取到，所以也不是常量表达式</span><br></pre></td></tr></table></figure><ul><li><p>constexpr变量</p><p>允许将变量声明为constexpr类型以便由编译器来验证变量的值是否是一个常量表达式。声明为constexpr的变量一定是一个常量，而且必须用常量表达式初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mf = <span class="number">20</span>;         <span class="comment">//20是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> limit = mf + <span class="number">1</span>;  <span class="comment">//mf+1是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> sz = <span class="built_in">size</span>();     <span class="comment">//只有当size是一个constexpr函数时才是一条正确的声明语句</span></span><br></pre></td></tr></table></figure><p>一般来说，如果认定变量是一个常数表达式，那就把它声明成constexpr类型</p></li><li><p>字面值类型</p><p>常量表达式的值需要在编译时就得到计算，因此对声明constexpr时用到的类型必须有所限制。</p><p>尽管指针和引用都能定义成constexpr，但它们的初始值却受到严格的限制。一个constexpr指针的初始值必须是nullptr或者0，或者是存储于某个固定地址中的对象</p><p>函数体内定义的变量一般来说并非存放在固定地址中，因此constexpr指针不能指向这样的变量。相反的，定义于所有函数体之外的对象其地址固定不变，能用来初始化constexpr指针</p><p>允许函数定义一类有效范围超出函数本身的变量，这类变量和定义在函数体之外的变量一样也有固定地址。因此，constexpr引用能绑定到这样的变量上，constexpr指针也能指向这样的变量</p></li><li><p>指针和constexpr</p><p>在constexpr声明中如果定义了一个指针，限定符constexpr仅对指针有效，与指针所指的对象无关：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p = <span class="literal">nullptr</span>;         <span class="comment">//p是一个指向整型常量的指针</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *q = <span class="literal">nullptr</span>;     <span class="comment">//q是一个指向整数的常量指针</span></span><br><span class="line">p和q的类型相差甚远，p是一个指向常量的指针，而q是一个常量指针，其中的关键在于<span class="keyword">constexpr</span>把它所定义的对象置为了顶层<span class="type">const</span></span><br></pre></td></tr></table></figure><p>与其他常量指针类似，constexpr指针既可以指向常量也可以指向一个非常量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *np = <span class="literal">nullptr</span>;   <span class="comment">//np是一个指向整数的常量指针，其值为空</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> i = <span class="number">42</span>;          <span class="comment">//i的类型是整型常量</span></span><br><span class="line"><span class="comment">//i和j都必须定义在函数体之外</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">const</span> <span class="type">int</span> *p = &amp;i;   <span class="comment">//p是常量指针，指向整型常量i</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *p1 = &amp;j;        <span class="comment">//p1是常量指针，指向整数j</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h3><h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><p>类型别名是一个名字，他是某种类型的同义词。有两种方法可用于定义类型别名，</p><p>传统的方法是使用关键字<strong>typedef</strong>：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">double</span> wages;    <span class="comment">//wages是double的同义词</span></span><br><span class="line"><span class="keyword">typedef</span> wages base, *p;  <span class="comment">//base是double的同义词，p是double*的同义词</span></span><br></pre></td></tr></table></figure><p>typedef作为声明语句中的基本数据类型的一部分出现，含有typedef的声明语句定义的不再是变量而是类型别名</p><p>新标准规定了一种新的方法，使用<strong>别名声明</strong>来定义类型的别名：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using SI <span class="operator">=</span> Sales_item<span class="comment">;  //SI是Sales——item的同义词</span></span><br></pre></td></tr></table></figure><h4 id="指针、常量和类型别名"><a href="#指针、常量和类型别名" class="headerlink" title="指针、常量和类型别名"></a>指针、常量和类型别名</h4><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+Hexo(Next)博客搭建及美化</title>
      <link href="/2022/03/09/GitHub-Hexo-Next-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/03/09/GitHub-Hexo-Next-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>参考b站教程：<a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=1">2021最新保姆级Hexo+GitHub搭建个人博客</a></p><span id="more"></span><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><h2 id="NEXT主题的安装"><a href="#NEXT主题的安装" class="headerlink" title="NEXT主题的安装"></a>NEXT主题的安装</h2><p>在博客根目录下执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span></span><br><span class="line">themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>然后设置博客配置文件<code>__config.yml</code>：（博客根目录下的<code>_config.yml</code>）</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> <span class="keyword">next</span></span><br></pre></td></tr></table></figure><h2 id="透明背景"><a href="#透明背景" class="headerlink" title="透明背景"></a>透明背景</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>博客根目录 <code>themes\next\source\css\_schemes\Pisces\_layout.styl</code> 文件 <code>.content-wrap </code>标签下 <code>background: </code>修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><p>博客根目录<code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>文件<code> .header-inner</code> 标签下 <code>background:</code> 修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>);</span><br></pre></td></tr></table></figure><h2 id="夜间模式-可切换"><a href="#夜间模式-可切换" class="headerlink" title="夜间模式(可切换)"></a>夜间模式(可切换)</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="built_in">next</span>-darkmode <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>修改主题配置，添加代码</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Dark Mode</span></span><br><span class="line">darkmode: <span class="literal">false</span></span><br><span class="line"><span class="meta"># 下面的是添加的配置</span></span><br><span class="line"><span class="meta"># Darkmode JS</span></span><br><span class="line">darkmode_js:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  bottom: <span class="string">&#x27;64px&#x27;</span> <span class="meta"># default: <span class="string">&#x27;32px&#x27;</span></span></span><br><span class="line">  right: <span class="string">&#x27;unset&#x27;</span> <span class="meta"># default: <span class="string">&#x27;32px&#x27;</span></span></span><br><span class="line">  left: <span class="string">&#x27;32px&#x27;</span> <span class="meta"># default: <span class="string">&#x27;unset&#x27;</span></span></span><br><span class="line">  time: <span class="string">&#x27;0.5s&#x27;</span> <span class="meta"># default: <span class="string">&#x27;0.3s&#x27;</span></span></span><br><span class="line">  mixColor: <span class="string">&#x27;transparent&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#fff&#x27;</span></span></span><br><span class="line">  backgroundColor: <span class="string">&#x27;transparent&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#fff&#x27;</span></span></span><br><span class="line">  buttonColorDark: <span class="string">&#x27;#100f2c&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#100f2c&#x27;</span></span></span><br><span class="line">  buttonColorLight: <span class="string">&#x27;#fff&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#fff&#x27;</span></span></span><br><span class="line">  isActivated: <span class="literal">false</span> <span class="meta"># default false</span></span><br><span class="line">  saveInCookies: <span class="literal">true</span> <span class="meta"># default: true</span></span><br><span class="line">  label: <span class="string">&#x27;🌓&#x27;</span> <span class="meta"># default: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">  autoMatchOsTheme: <span class="literal">true</span> <span class="meta"># default: true</span></span><br><span class="line">  libUrl: <span class="meta"># Set custom library cdn url for Darkmode.js</span></span><br></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="常规设置"><a href="#常规设置" class="headerlink" title="常规设置"></a>常规设置</h3><p>主题配置文件中包括高亮、复制、样式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span>         <span class="comment">#代码高亮设置</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>                        <span class="comment">#代码复制按钮</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span>                          <span class="comment">#代码样式，也就是框框的样子</span></span><br></pre></td></tr></table></figure><h3 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h3><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-sliding-spoiler <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>通过修改<code>blog/node_modules/hexo-sliding-spoiler/assets/spoiler.css</code>下的内容，从而自定义配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.spoiler</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;    #边框像素、样式、颜色</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span> <span class="selector-class">.spoiler-title</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent;          #背景颜色</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;                   #字体颜色</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;                  #字体大小</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span> <span class="selector-class">.spoiler-title</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span><span class="selector-class">.collapsed</span> <span class="selector-class">.spoiler-title</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;▼ Show Code&quot;</span>;           #展开提示内容</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span><span class="selector-class">.expanded</span> <span class="selector-class">.spoiler-title</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;▲ Hide &quot;</span>;               #隐藏提示内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><p>在markdown文章中直接以标签的形式加入，注意，中间内容支持markdown语法、代码块、数学公式</p><p>参考代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% spoiler <span class="string">&quot;点击显/隐内容&quot;</span> %&#125;</span><br><span class="line"></span><br><span class="line">隐藏的内容</span><br><span class="line"></span><br><span class="line">支持markdown语法，代码块，数学公式</span><br><span class="line"></span><br><span class="line">/```c++</span><br><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">int main() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">/```</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br><span class="line">e^&#123;ix&#125; = cosx+isinx</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br><span class="line"></span><br><span class="line">&#123;% endspoiler %&#125;</span><br></pre></td></tr></table></figure><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">隐藏的内容</span><br><span class="line"></span><br><span class="line">支持markdown语法，代码块，数学公式</span><br><span class="line"></span><br><span class="line">/```c++</span><br><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">int main() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">/```</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br><span class="line">e^&#123;ix&#125; = cosx+isinx</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br></pre></td></tr></table></figure>    </div></div><h2 id="Github入口"><a href="#Github入口" class="headerlink" title="Github入口"></a>Github入口</h2><p>1.首先到<a href="http://tholman.com/github-corners/">GitHub Corners</a>选择自己喜欢的图标，然后copy相应的代码</p><p>2.然后将刚才复制的代码粘贴到<code>themes/next/layout/_layout.swig</code>文件中<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面一行</p><p>3.把代码中的<code>href</code>后面的值替换成你要跳转的地址，比如你的GitHub主页</p><h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><p>在博客根目录下执行下列命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>generator<span class="operator">-</span><span class="keyword">search</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>安装之后，会在站点目录的 <code>public</code> 文件夹下创建一个 <code>search.xml </code>文件。</p><h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><p>在站点配置文件 <code>_config.yml</code> 中添加如下内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Search </span></span><br><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> .<span class="keyword">/public/</span>search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>path：索引文件的路径，相对于站点根目录</li><li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li><li>limit：限制搜索的条目数</li></ul><p>在主题配置文件 <code>_config.yml</code> 中找到如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>确保 enable 设成 true。</p><p>top_n_per_article 字段表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量。</p><p>然后，重新部署网站即可愉快的使用本地搜索功能了。</p><h2 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h2><p>1、下载相应的资源包：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-canvas-nest themes<span class="regexp">/next/</span>source<span class="regexp">/lib/</span>canvas-nest</span><br></pre></td></tr></table></figure><p>2、在主题配置中做相关参数修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span></span><br><span class="line"><span class="comment"># size: The width of the ribbon.</span></span><br><span class="line"><span class="comment"># alpha: The transparency of the ribbon.</span></span><br><span class="line"><span class="comment"># zIndex: The display level of the ribbon.</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果没有下面的代码，就把下面的加上</span></span><br><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="comment"># 网络背景</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,0&#x27;</span> <span class="comment"># RGB values, use &#x27;,&#x27; to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">150</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></figure><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>参考<a href="https://links.jianshu.com/go?to=https://github.com/netcan/hexo-generator-index-pin-top">Github</a>上开源项目，命令操作如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-<span class="built_in">index</span> --<span class="keyword">save</span></span><br><span class="line">$ npm install hexo-generator-<span class="built_in">index</span>-pin-top --<span class="keyword">save</span></span><br></pre></td></tr></table></figure><p>在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code> 或者<code>top: 任意数字</code>，top中数字越大，文章越靠前。比如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span>  <span class="string">java应用导致JVM内存溢出（OOM）的问题</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">2</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
