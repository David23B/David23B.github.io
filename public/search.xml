<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Machine Learning学习笔记</title>
      <link href="/2022/07/19/Machine_Learning%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/19/Machine_Learning%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>写在前面的话：<br>这是我在coursera上听吴恩达老师的Machine Learning，所做的笔记<br><span id="more"></span></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="What-is-Machine-Learning"><a href="#What-is-Machine-Learning" class="headerlink" title="What is Machine Learning"></a>What is Machine Learning</h2><p>Tom Mitchell Well-posed Learning Problen:A computer program is said to learn from <strong>experience E</strong> with respect to some <strong>task T</strong> and some <strong>performance measure P</strong>, if its performance on T, as measured by P, improves with experience E.</p><p>Example: playing checkers.</p><p><strong>E</strong> = the experience of playing many games of checkers</p><p><strong>T</strong> = the task of playing checkers</p><p><strong>P</strong> = the probability that the program will win the next game</p><h2 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h2><p>In <strong>supervised learning</strong>, we are given a data set and <strong>already know what our correct output</strong> should look like, having the idea that there is a relationship between the input and the output.</p><p>Supervised learning problems are categorized into “<strong>regression</strong>“(回归)and”<strong>classification</strong>“(分类)problems. </p><p>In a <strong>regression</strong> problem, we are trying to predict results within a continuous output, meaning that we are trying to map input variables to some continuous function. 连续的</p><p>In a <strong>classification</strong> problem, we are instead trying to predict results in a discrete output. In other words, we are trying to map input variables into discrete categories. 离散的</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python笔记</title>
      <link href="/2022/07/19/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/19/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>写在前面的话:<br>这是我在学习《Python编程：从入门到实践》(第二版)的笔记<br><span id="more"></span></p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="变量和简单数据类型"><a href="#变量和简单数据类型" class="headerlink" title="变量和简单数据类型"></a>变量和简单数据类型</h2><ol><li>变量的命名<ul><li>只能包含字母、数字和下划线，变量名只能以字母或下划线打头</li><li>变量名不能包含空格，但能使用下划线来分隔单词</li><li>不要将Python关键字和函数名用作变量名</li><li>变量名应既简短又具有描述性</li><li>慎用小写字母l和大写字母O，容易看成1和0</li></ul></li><li>字符串<ul><li>用引号括起来（外双里单，外单里双）</li><li>使用方法，方法是python可对数据执行的操作。例如<code>name.title()</code>，<code>.</code>表示让python对变量<code>name</code>执行方法<code>title()</code>。<code>()</code>内是方法完成工作所需的额外信息<ul><li><code>.title()</code>以首字母大写的方式显示每个单词</li><li><code>.upper()</code>全部大写</li><li><code>.lower()</code>全部小写</li></ul></li><li>字符串中使用变量，在引号前加上字母f，再将变量用花括号括起来<ul><li>f字符串，f是format（设置格式）的简写</li><li>f字符串的格式： <code>full_name = f&quot;&#123;first_name.title()&#125; &#123;last_name.title()&#125;&quot;</code></li><li>format的格式： <code>full_name = &quot;&#123;&#125; &#123;&#125;&quot;.format(first_name, last_name)</code></li></ul></li><li>添加空白，空白泛指任何非打印字符<ul><li><code>\t</code>   制表符（Tap）</li><li><code>\n</code>  换行符（Enter）</li></ul></li><li>（暂时）删除空白<ul><li><code>.rstrip()</code> 末尾</li><li><code>.lstrip()</code>  开头</li><li><code>.strip()</code>  两头</li></ul></li></ul></li><li>数<ul><li>整数和浮点数</li><li>数中的下划线，易读，不打印</li><li>同时给多个变量赋值<ul><li><code>x, y, z = 1, 2, 3</code></li></ul></li><li>常量，全部字母大写</li></ul></li><li>注释<ul><li>用 <code>#</code></li></ul></li></ol><h2 id="列表简介"><a href="#列表简介" class="headerlink" title="列表简介"></a>列表简介</h2><ol><li>列表是什么<ul><li>用[]表示，例如<code>people=[&#39;mike&#39;,&#39;david&#39;,&#39;jane&#39;]</code></li><li>打印列表，<code>print(people)</code></li><li>访问列表，用索引，从0开始，例如<code>people[0]=mike</code></li></ul></li><li>修改、添加和删除元素<ul><li>修改</li><li>添加<ul><li><code>.append()</code>添加到末尾</li><li><code>.insert()</code>添加到指定位置</li></ul></li><li>删除<ul><li>del语句，例如<code>del people(1)</code>,删除<code>david</code>，删除相应位置元素</li><li><code>.pop()</code>，弹出相应位置元素</li><li><code>.remove()</code>，根据值删除，删除第一个指定的值</li></ul></li></ul></li><li>组织列表<ul><li>永久排序<ul><li><code>.sort()</code>，字母正序</li><li><code>.sort(reverse=True)</code>，字母倒序</li><li><code>.reverse()</code>，整个列表顺序倒过来</li></ul></li><li>临时排序<ul><li>函数<code>sorted()</code>，字母正序</li><li>函数<code>sorted(reverse=True)</code>，字母倒序</li></ul></li><li>确定列表长度，使用函数<code>len()</code></li></ul></li></ol><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><ol><li>遍历整个列表<ul><li>循环：例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;david&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Thank you, everyone!&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>避免缩进错误<ul><li>循环内容要缩进</li><li>非循环内容不缩进</li><li>冒号不要漏</li></ul></li></ul></li><li>创建数值列表<ul><li>使用函数<code>range()</code>。<code>range(a,b,c)</code>表示从a开始到b，包括a但不包括b，每隔c取一个数，如range(2,11,2)表示2，4，6，8，10。a默认为0，c默认为1。</li><li>使用函数<code>list()</code>，创建列表。创建数字列表<code>numbers=list(range(3))</code>，得到列表<code>numbers=[0,1,2]</code></li><li>对数字列表执行简单的统计计算<ul><li>函数<code>min()</code></li><li><code>max()</code></li><li><code>sum()</code></li></ul></li></ul></li><li>使用列表的一部分<ul><li>切片，例如<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">players[<span class="number">0</span>:<span class="number">3</span>]=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,c<span class="string">&#x27;]</span></span><br></pre></td></tr></table></figure>两边不填的话默认从头或尾开始</li><li>遍历切片，在循环里限定切片</li><li>复制列表，创建新列表，然后创建一个从头到尾的切片。一定不要写成两个列表相等，如<code>my_foods=friend_foods</code>，这样表示两个变量名指向同一个列表，即一个列表两个名。</li></ul></li><li>元组、不可变的列表<ul><li>定义元组，<code>numbers=(0,1,2,3,4)</code>。元组用逗号标识，一个元素的元组<code>number=(1,)</code></li><li>遍历</li><li>修改元组变量。重新赋值</li></ul></li><li>设置代码格式</li></ol><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><ol><li>条件测试<ul><li>等或不等，<code>==</code>或<code>!=</code></li><li>检查多个条件，<code>and</code>和<code>or</code></li><li>检查特定值是否包含在列表中，<code>in</code>和<code>not in</code></li><li>布尔表达式</li></ul></li><li>if语句<ul><li><code>if</code></li><li><code>if-else</code></li><li><code>if-elif-else</code></li><li>省略<code>else</code>代码块，用<code>elif</code>替代</li><li>测试多个条件，多个if</li></ul></li><li>处理列表<ul><li>检查特殊元素</li><li>确定列表不是空的，<code>if name[]</code>，如果列表为空，则返回<code>false</code></li><li>使用多个列表</li></ul></li><li>设置if语句的格式，在比较运算符两侧各加一个空格</li></ol><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ol><li>使用字典<ul><li>用放在花括号{}中的一系列键值对表示。键值对是两个相关联的值，键与值用冒号分开，键值对间用逗号。如<code>alien=&#123;&#39;color&#39;:&#39;green&#39;,&#39;points&#39;:5&#125;</code></li><li>访问字典中的值，例如<code>alien[&#39;color&#39;]</code></li><li>添加键值对，<code>alien[&#39;x_position&#39;]=0</code></li><li>定义一个空字典，<code>alien=&#123;&#125;</code></li><li>修改字典中的值</li><li>删除键值对，使用del语句，<code>del alien[&#39;color&#39;]</code></li><li>使用方法<code>.get()</code>来访问值，如<code>alien.get(&#39;speed&#39;,&#39;No speed value assigned.&#39;)</code>没有<code>speed</code>的时候返回后面的值，没写则默认返回<code>None</code></li></ul></li><li>遍历字典<ul><li>遍历所有键值对，<code>for k,v in user.items()</code>，方法<code>.items()</code>返回一个键值对列表</li><li>遍历所有键，用方法<code>.keys()</code>，返回包含所有键的列表。或直接遍历字典，<code>for k in user</code></li><li>按特定顺序遍历所有的键，<code>for k in sorted(users.keys())</code></li><li>遍历所有的值，用方法<code>.values()</code><ul><li>用集合set剔除重复的值，<code>for v in set(users.values())</code></li></ul></li></ul></li><li>嵌套<ul><li>字典列表</li><li>在字典中存储列表</li><li>在字典中存储字典</li></ul></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV笔记</title>
      <link href="/2022/07/09/OpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/09/OpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>OpenCV—Python中文文档笔记<br><span id="more"></span></p><h1 id="OpenCV中的GUI特性"><a href="#OpenCV中的GUI特性" class="headerlink" title="OpenCV中的GUI特性"></a>OpenCV中的GUI特性</h1><h2 id="图像入门"><a href="#图像入门" class="headerlink" title="图像入门"></a>图像入门</h2><ol><li>如何读取图像、如何显示图像、如何将其保存。<strong>cv.imread()</strong>、<strong>cv.imshow()</strong>、<strong>cv.imwrite()</strong></li><li>用OpenCV读取彩色图像，在Matplotlib中显示的解决方法</li></ol><h3 id="读取图像"><a href="#读取图像" class="headerlink" title="读取图像"></a>读取图像</h3><p>使用<strong>cv.imread()</strong>函数读取图像。第一个参数是图像的文件名（在当前目录）或是完整的路径（不在当前目录）。第二个参数是指定读取方式的标志</p><ul><li>cv.IMREAD_COLOR：加载彩色图像，透明度被忽视，默认读取方式</li><li>cv.IMREAD_GRAYSCALE：加载灰度图像</li><li>cv.IMREAD_UNCHANGED：加载图像，包括alpha通道（透明和半透明度）</li></ul><p>除此之外，还可以分别简单地传递整数1，0或-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载彩色灰度图像</span></span><br><span class="line">img = cv.imread(<span class="string">'image.jpg'</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>若图像路径错误，则<code>print img</code>会给出<code>None</code></p><h3 id="显示图像"><a href="#显示图像" class="headerlink" title="显示图像"></a>显示图像</h3><p>使用<strong>cv.imshow()</strong>函数，在窗口中显示图像，窗口自动适合图像尺寸。第一个参数是一个字符串，表示窗口名。第二个参数是对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cv.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><strong>cv.waitKey()</strong>是一个键盘绑定函数，参数是毫秒级，0表示按任意键结束，也可以指定按键<strong>必须使用它来实际显示图像</strong></p><p><strong>cv.destroyAllWindows()</strong>破坏创建的所有窗口，<strong>cv.destroyWindow()</strong>传递特定的窗口名作为参数进行破坏</p><p>在特殊情况下，可以创建一个空窗口，然后再将图像加载到该窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cv.nameWindow(<span class="string">'image'</span>, cv.WINDOW_NORMAL)</span><br><span class="line">cv.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>默认标志为<strong>cv.WINDOW_AUTOSIZE</strong>，但是标志<strong>cv.WINDOW_NORMAL</strong>则可以调整窗口大小。当图像尺寸过大以及向窗口添加跟踪栏时，这将很有帮助</p><h3 id="写入函数"><a href="#写入函数" class="headerlink" title="写入函数"></a>写入函数</h3><p>使用<strong>cv.imwrite()</strong>函数保存图像。第一个参数是文件名，第二个参数是要保存的图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.imwrite(<span class="string">'messigray.png'</span>, img)</span><br></pre></td></tr></table></figure><p>这会将图像以PNG格式保存在当前工作目录中</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'test.jpg'</span>, <span class="number">0</span>)    <span class="comment">#以灰度加载图像</span></span><br><span class="line">cv.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">k = cv.waitKey(<span class="number">0</span>)    <span class="comment">#如果是64位计算机，必须使用 k = cv.waitKey(0) &amp; 0xFF</span></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">27</span>:    <span class="comment">#按ESC键直接退出</span></span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"><span class="keyword">else</span> k == <span class="built_in">ord</span>(<span class="string">'s'</span>):    <span class="comment">#按s键保存并退出</span></span><br><span class="line">    cv.imwrite(<span class="string">'messigray.png'</span>, img)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="使用Matplotlib"><a href="#使用Matplotlib" class="headerlink" title="使用Matplotlib"></a>使用Matplotlib</h3><p>Matplotlib是python的绘图库，参考<a href="https://matplotlib.org/stable/">Matplotlib documentation</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示灰度图像</span></span><br><span class="line">img = cv.imread(<span class="string">'test.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">plt.imshow(img, cmap = <span class="string">'gray'</span>, interpolation = <span class="string">'bicubic'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])    <span class="comment">#隐藏x轴和y轴上的刻度值</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>OpenCV加载的彩色图像处于BGR模式，但是Matplotlib以RGB模式显示。</strong>如果使用OpenCV读取彩色图像，则Matplotlib中将无法正确显示彩色图像。解决办法如下</p><p>方法一：将OpenCV的BGR变为RGB：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'test.jpg'</span>, cv.IMREAD_COLOR)    <span class="comment">#读取</span></span><br><span class="line">img = img[:,:,::-<span class="number">1</span>]    <span class="comment">#将OpenCV的BGR转为RGB</span></span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.xticks([])    <span class="comment">#隐藏x轴和y轴上的刻度值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>方法二：使用cv.cvtColor()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'test.jpg'</span>, cv.IMREAD_COLOR)    <span class="comment">#读取</span></span><br><span class="line">img = cv.cvtColor(img, cv.COLOR_BGR2RGB)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.xticks([])    <span class="comment">#隐藏x轴和y轴上的刻度值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="视频入门"><a href="#视频入门" class="headerlink" title="视频入门"></a>视频入门</h2><ol><li>读取视频、显示视频、保存视频。<strong>cv.VideoCapture()</strong>、<strong>cv.VideoWrite()</strong></li><li></li></ol><h3 id="从相机中读取视频"><a href="#从相机中读取视频" class="headerlink" title="从相机中读取视频"></a>从相机中读取视频</h3><p>创建一个<strong>VideoCapture</strong>对象，参数可以是设备索引或视频文件的名称，在此之后，逐帧捕获，最后记得释放俘虏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">cap = cv.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Cannot open camera"</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改窗口的宽高</span></span><br><span class="line">cap.<span class="built_in">set</span>(cv.CAP_PROP_FRAME_WIDTH, <span class="number">320</span>)</span><br><span class="line">cap.<span class="built_in">set</span>(cv.CAP_PROP_FRAME_HEIGHT, <span class="number">240</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#逐帧捕获</span></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="comment">#如果正确读取帧，ret为True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Can't receive frame (stream end?).Exiting ..."</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY) 灰度显示</span></span><br><span class="line">    <span class="comment">#显示结果帧e</span></span><br><span class="line">    cv.imshow(<span class="string">'frame'</span>, gray)</span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#完成所有操作后，释放捕获器</span></span><br><span class="line">cap.release()</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><code>cap.read()</code>返回布尔值，可以通过检查返回值来检查视频的结尾</p><p>有时，cap可能尚未初始化捕获，可以通过<code>cap.isOpened()</code>方法检查是否已初始化，若没有初始化，使用<code>cap.open()</code>打开它</p><p>可以使用<code>cap.get(propId)</code>方法访问视频的某些功能，propId是0~18之间的一个数字，每个数字表示一个属性。有些值可以使用<code>cap.set(propId, value)</code>进行修改，value是新值</p><p>例如，通过<code>cap.get(cv.CAP_PROP_FRAME_WIDTH)</code>检查框架的宽度，使用<code>ret = cap.set(cv.CAP_PROP_FRAME_WIDTH, 320)</code>修改宽度为320</p><h3 id="从文件播放视频"><a href="#从文件播放视频" class="headerlink" title="从文件播放视频"></a>从文件播放视频</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cap = cv.VideoCapture(<span class="string">'vtest.avi'</span>)</span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="comment">#如果正确读取帧，ret为True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Can't receive frame (stream end?).Exiting ..."</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">        gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)</span><br><span class="line">        cv.imshow(<span class="string">'frame'</span>, gray)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#1ms 等待按键1ms，如果没有按键返回-1</span></span><br><span class="line">        <span class="keyword">if</span> cv.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">'q'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>在显示框架时，使用适当的时间<code>cv.waitKey()</code>如果太小，则视频将非常快，太大则很慢，正常情况下25就可以</p><h3 id="保存视频"><a href="#保存视频" class="headerlink" title="保存视频"></a>保存视频</h3><p>创建一个<strong>VideoWriter</strong>对象，指定输出文件名（filname），例如output.avi。然后指定<strong>FourCC</strong>代码。然后传递帧率（fps）和帧大小（frameSize）。最后是颜色标志（isColor）,默认为彩色True。</p><p><code>VideoWriter(filname, fourcc, fps, frameSize, isColor)</code></p><p>FourCC代码作为MJPG的<code>cv.VideoWriter_fourcc('M', 'J', 'P', 'G')</code>或者<code>cv.VideoWriter_fourcc(*'MJPG')</code>传递</p><p>在从摄像机捕获的代码下面，沿垂直方向翻转每一帧并保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cap = cv.VideoCapture(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#定义编解码器并创建VideoWriter对象</span></span><br><span class="line">    fourcc = cv.VideoWriter_fourcc(*<span class="string">'XVID'</span>)</span><br><span class="line">    out = cv.VideoWriter(<span class="string">'output.avi'</span>, fourcc, <span class="number">20.0</span>, (<span class="number">640</span>, <span class="number">480</span>))</span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Can't receive frame (stream end?).Exiting ..."</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        frame = cv.flip(frame, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">#写翻转的框架</span></span><br><span class="line">        out.write(frame)</span><br><span class="line">        cv.imshow(<span class="string">'frame'</span>, frame)</span><br><span class="line">        <span class="keyword">if</span> cv.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">'q'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#完成工作后释放所有内容</span></span><br><span class="line">    cap.release()</span><br><span class="line">    out.release()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="OpenCV中的绘图功能"><a href="#OpenCV中的绘图功能" class="headerlink" title="OpenCV中的绘图功能"></a>OpenCV中的绘图功能</h2><ol><li>OpenCV中的绘图功能，<strong>cv.line()</strong>、<strong>cv.circle()</strong>、<strong>cv.rectangle()</strong>、<strong>cv.ellipse()</strong>、<strong>cv.putText()</strong></li><li>putText()不能显示中文问题的解决办法</li></ol><p>常见参数：</p><ul><li>img：要绘制形状的图像</li><li>color：形状的颜色。对于BGR，作为元组传递。对于灰度，只需传递标量值</li><li>厚度：线或圆等的粗细。对闭合图形传递-1，它将填充形状。默认厚度=1</li><li>lineType：线的类型，是否为8连接线，抗锯齿线等。默认情况下为8连接线</li></ul><h3 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h3><p>绘制一条线，需要传递线的开始和结束坐标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="comment">#创建黑色的图像</span></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line"><span class="comment">#绘制一条厚度为5的蓝色对角线</span></span><br><span class="line">cv.line(img, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h3><p>绘制矩形，需要矩形的左上角和右下角</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.rectangle(img, (<span class="number">384</span>, <span class="number">0</span>), (<span class="number">510</span>, <span class="number">128</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="画圆圈"><a href="#画圆圈" class="headerlink" title="画圆圈"></a>画圆圈</h3><p>绘制一个圆，需要其中心坐标和半径</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cv</span>.circle(img, (<span class="number">447</span>, <span class="number">63</span>), <span class="number">63</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), -<span class="number">1</span>)    #-<span class="number">1</span>表示完全填充</span><br></pre></td></tr></table></figure><h3 id="画椭圆"><a href="#画椭圆" class="headerlink" title="画椭圆"></a>画椭圆</h3><p><code>cv2.ellipse(image, centerCoordinates, axesLength, angle, startAngle, endAngle, color, thickness, lineType, shift)</code></p><ul><li>centerCoordinates：中心坐标（x，y）</li><li>axesLength：轴长（长，短）</li><li>angle：椭圆旋转角度</li><li>startAngle：椭圆弧的起始角度</li><li>endAngle：椭圆弧的终止角度</li><li>lineType：可选参数，给出椭圆边界类型</li><li>shift：可选参数，中心坐标和轴值中的小数位数</li><li>返回值：返回图像</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在图像的中心绘制一个椭圆形</span></span><br><span class="line">cv.ellipse(img, (<span class="number">256</span>, <span class="number">256</span>), (<span class="number">100</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">180</span>, <span class="number">255</span>, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="画多边形"><a href="#画多边形" class="headerlink" title="画多边形"></a>画多边形</h3><p>绘制多边形，需要顶点坐标，将这些点组成形状为<code>ROWSx1x2</code>的数组，其中<code>ROWS</code>是顶点数，类型为int32</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绘制一个带有四个顶点的黄色小多边形</span></span><br><span class="line">pts = np.array([[<span class="number">10</span>, <span class="number">5</span>], [<span class="number">20</span>, <span class="number">30</span>], [<span class="number">70</span>, <span class="number">20</span>], [<span class="number">50</span>, <span class="number">10</span>]], np.int32)</span><br><span class="line">pts = pts.reshape((-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">cv.polylines(img, [pts], <span class="literal">True</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><p>如果第三个参数是False，将获得一条连接所有点的折现。<strong>cv.polylines()</strong>可用于绘制多条线，只需创建要绘制的所有线条的列表，然后将其传递给函数即可。所有线条将单独绘制。与为每条线调用<strong>cv.line</strong>相比，绘制一组线更好、更快</p><h3 id="向图像添加文本"><a href="#向图像添加文本" class="headerlink" title="向图像添加文本"></a>向图像添加文本</h3><p><code>cv.putText(img,text,origin,fontFace,fontScale,color,thickness,lineType,bottomLeftOrigin)</code></p><ul><li>text：文字数据</li><li>origin：文本框左下角位置</li><li>fontFace：字体</li><li>fontScale：尺寸</li><li>bottomLeftOrigin：bool值false，true=‘origin at lower left’</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在白色图像上写入OpenCV</span></span><br><span class="line">font = cv.FONT_HERSHEY_SIMPLEX</span><br><span class="line">cv.putText(img, <span class="string">'OpenCV'</span>, (<span class="number">10</span>, <span class="number">500</span>), font, <span class="number">4</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>, cv.LINE_AA)</span><br></pre></td></tr></table></figure><p>解决putText()不能显示中文问题：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import numpy as <span class="built_in">np</span></span><br><span class="line">import cv2 as <span class="built_in">cv</span></span><br><span class="line">from PLL import Image, ImageDraw, ImageFont</span><br><span class="line"></span><br><span class="line">#创建黑色的图像</span><br><span class="line">img = <span class="built_in">np</span>.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), <span class="built_in">np</span>.uint8)</span><br><span class="line">#方法：</span><br><span class="line">#OpenCV图片格式转换成PLL的图片格式</span><br><span class="line">#使用PLL绘制文字</span><br><span class="line">#PLL图片格式转换成OpenCV格式</span><br><span class="line"></span><br><span class="line">img = Image.fromarray(<span class="built_in">cv</span>.cvtColor(img, <span class="built_in">cv</span>.COLOR_BGR2RGB))</span><br><span class="line"><span class="built_in">draw</span> = ImageDraw.Draw(img)</span><br><span class="line"><span class="built_in">font</span> = ImageFont.truetype(<span class="string">"msyh.ttc"</span>, <span class="number">30</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="built_in">draw</span>.text((<span class="number">10</span>, <span class="number">400</span>), <span class="string">"测试"</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="built_in">font</span>=<span class="built_in">font</span>)    #这里的颜色是RGB</span><br><span class="line">img = <span class="built_in">cv</span>.cvtColor(<span class="built_in">np</span>.asarray(img), <span class="built_in">cv</span>.COLOR_RGB2BGR)    #转回opencv格式</span><br><span class="line"></span><br><span class="line"><span class="built_in">cv</span>.imshow('hello', img)</span><br><span class="line"><span class="built_in">cv</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cv</span>.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="鼠标作为画笔"><a href="#鼠标作为画笔" class="headerlink" title="鼠标作为画笔"></a>鼠标作为画笔</h2><ol><li>OpenCV中处理鼠标事件，<strong>cv.setMouseCallback()</strong></li></ol><h3 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h3><p>在鼠标双击的地方绘制一个大小固定的圆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"> </span><br><span class="line"><span class="comment">#鼠标回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">event, x, y, flags, param</span>):</span><br><span class="line">    <span class="keyword">if</span> event == cv.EVENT_LBUTTONDBLCLK:</span><br><span class="line">        cv.circle(img, (x, y), <span class="number">100</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="comment">#创建一个黑色的图像，一个窗口，并绑定到窗口的功能</span></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">cv.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">cv.setMouseCallback(<span class="string">'image'</span>, draw_circle)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="更高级的演示"><a href="#更高级的演示" class="headerlink" title="更高级的演示"></a>更高级的演示</h3><p>拖动鼠标绘制，点击m键切换曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">drawing = <span class="literal">False</span>    <span class="comment">#如果按下鼠标，则为真</span></span><br><span class="line">mode = <span class="literal">True</span>    <span class="comment">#如果为真，绘制矩形，按m键可以切换到曲线</span></span><br><span class="line">ix, iy = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"><span class="comment">#鼠标回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">event, x, y, flags, param</span>):</span><br><span class="line">    <span class="keyword">global</span> ix, iy, drawing, mode</span><br><span class="line">    <span class="keyword">if</span> event == cv.EVENT_LBUTTONDOWN:</span><br><span class="line">        drawing = <span class="literal">True</span></span><br><span class="line">        ix, iy = x, y</span><br><span class="line">    <span class="keyword">elif</span> event == cv.EVENT_MOUSEMOVE:</span><br><span class="line">        <span class="keyword">if</span> drawing == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> mode == <span class="literal">True</span>:</span><br><span class="line">                cv.rectangle(img, (ix, iy), (x, y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cv.circle(img, (x, y), <span class="number">50</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> event == cv.EVENT_LBUTTONUP:</span><br><span class="line">        drawing = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> mode == <span class="literal">True</span>:</span><br><span class="line">            cv.rectangle(img, (ix, iy), (x,y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv.circle(img, (x, y), <span class="number">5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="comment">#创建一个黑色的图像，一个窗口，并绑定到窗口的功能</span></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">cv.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">cv.setMouseCallback(<span class="string">'image'</span>, draw_circle)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> cv.waitKey(<span class="number">20</span>) == <span class="built_in">ord</span>(<span class="string">'m'</span>):    <span class="comment">#按m键切换圆形</span></span><br><span class="line">        mode = <span class="literal">False</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>拖动鼠标画矩形，或者点击鼠标画一个大小固定的圆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">drawing = <span class="literal">False</span> <span class="comment"># 如果按下鼠标，则为真</span></span><br><span class="line">mode = <span class="literal">True</span> <span class="comment"># 如果为真，绘制矩形。按 m 键可以切换到曲线</span></span><br><span class="line">ix,iy = -<span class="number">1</span>,-<span class="number">1</span></span><br><span class="line"><span class="comment"># 鼠标回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">event, x, y, flags, param</span>):</span><br><span class="line">    <span class="keyword">global</span> ix,iy,drawing,mode</span><br><span class="line">    <span class="keyword">if</span> event == cv.EVENT_LBUTTONDOWN:</span><br><span class="line">        drawing = <span class="literal">True</span></span><br><span class="line">        ix,iy = x,y</span><br><span class="line">    <span class="keyword">elif</span> event == cv.EVENT_LBUTTONUP:</span><br><span class="line">        drawing = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> mode == <span class="literal">True</span>:</span><br><span class="line">            cv.rectangle(img, (ix, iy), (x, y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv.circle(img, (x,y), <span class="number">50</span>, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="comment">#创建一个黑色的图像，一个窗口，并绑定到窗口的功能</span></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">cv.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">cv.setMouseCallback(<span class="string">'image'</span>, draw_circle)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> cv.waitKey(<span class="number">20</span>) == <span class="built_in">ord</span>(<span class="string">'m'</span>):    <span class="comment">#按m键切换圆形</span></span><br><span class="line">        mode = <span class="literal">False</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="绘制未填充的矩形"><a href="#绘制未填充的矩形" class="headerlink" title="绘制未填充的矩形"></a>绘制未填充的矩形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">drawing = <span class="literal">False</span> <span class="comment"># 如果按下鼠标，则为真</span></span><br><span class="line">mode = <span class="literal">True</span> <span class="comment"># 如果为真，绘制矩形。按 m 键可以切换到曲线</span></span><br><span class="line">ix,iy = -<span class="number">1</span>,-<span class="number">1</span></span><br><span class="line"><span class="comment"># 鼠标回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">event, x, y, flags, param</span>):</span><br><span class="line">    <span class="keyword">global</span> ix,iy,drawing,mode</span><br><span class="line">    <span class="keyword">if</span> event == cv.EVENT_LBUTTONDOWN:</span><br><span class="line">        drawing = <span class="literal">True</span></span><br><span class="line">        ix,iy = x,y</span><br><span class="line">    <span class="keyword">elif</span> event == cv.EVENT_LBUTTONUP:</span><br><span class="line">        drawing = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> mode == <span class="literal">True</span>:</span><br><span class="line">            cv.rectangle(img, (ix, iy), (x, y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)    <span class="comment">#把-1改成1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv.circle(img, (x, y), <span class="number">50</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)    <span class="comment">#把-1改成1</span></span><br><span class="line"><span class="comment">#创建一个黑色的图像，一个窗口，并绑定到窗口的功能</span></span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">cv.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">cv.setMouseCallback(<span class="string">'image'</span>, draw_circle)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> cv.waitKey(<span class="number">20</span>) == <span class="built_in">ord</span>(<span class="string">'m'</span>):    <span class="comment">#按m键切换圆形</span></span><br><span class="line">        mode = <span class="literal">False</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="轨迹栏作为调色板"><a href="#轨迹栏作为调色板" class="headerlink" title="轨迹栏作为调色板"></a>轨迹栏作为调色板</h2><ol><li>将轨迹栏固定到OpenCV窗口，<strong>cv.getTrackbarPos</strong>、<strong>cv.createTrackbar</strong></li><li>用Trackbar创建颜色和画笔半径可调的Paint应用程序</li></ol><p>创建一个简单的程序，以显示指定的颜色。有一个显示颜色的窗口，以及三个用于指定B、G、R的跟踪栏，以及一个开关，只有开关为ON的情况下，才可以运行，否则屏幕始终为黑色</p><p>对于<code>cv.getTrackbarPos()</code>函数，第一个参数是轨迹栏名称，第二个是它附加到的窗口名称，第三个是默认值，第四个是最大值，第五个是执行的回调函数每次跟踪栏值更改。回调函数始终具有默认参数，即轨迹栏位置。轨迹栏的另一个重要应用是将其用作按钮或开关。默认情况下，OpenCV不具有按钮功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nothing</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#创建一个黑色的图像，一个窗口</span></span><br><span class="line">img = np.zeros((<span class="number">300</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">cv.namedWindow(<span class="string">'image'</span>)</span><br><span class="line"><span class="comment">#创建颜色变化的轨迹栏</span></span><br><span class="line">cv.createTrackbar(<span class="string">'R'</span>, <span class="string">'image'</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line">cv.createTrackbar(<span class="string">'G'</span>, <span class="string">'image'</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line">cv.createTrackbar(<span class="string">'B'</span>, <span class="string">'image'</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line"><span class="comment">#为ON/OFF功能创建开关</span></span><br><span class="line">switch = <span class="string">'0 : OFF \n1 : ON'</span></span><br><span class="line">cv.createTrackbar(switch, <span class="string">'image'</span>, <span class="number">0</span>, <span class="number">1</span>, nothing)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">    k = cv.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#得到四条轨迹的当前位置</span></span><br><span class="line">    r = cv.getTrackbarPos(<span class="string">'R'</span>, <span class="string">'image'</span>)</span><br><span class="line">    g = cv.getTrackbarPos(<span class="string">'G'</span>, <span class="string">'image'</span>)</span><br><span class="line">    b = cv.getTrackbarPos(<span class="string">'B'</span>, <span class="string">'image'</span>)</span><br><span class="line">    s = cv.getTrackbarPos(switch, <span class="string">'image'</span>)</span><br><span class="line">    <span class="keyword">if</span> s == <span class="number">0</span>:</span><br><span class="line">        img[:] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        img[:] = [b,g,r]</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>用Trackbar创建颜色和画笔半径可调的Paint应用程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">drawing = <span class="literal">False</span></span><br><span class="line">ix, iy = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">r,g,b,radius = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">event, x, y, flags, param</span>):</span><br><span class="line">    <span class="keyword">global</span> ix, iy, drawing,r,g,b,radius</span><br><span class="line">    <span class="keyword">if</span> event == cv.EVENT_LBUTTONDOWN:</span><br><span class="line">        drawing = <span class="literal">True</span></span><br><span class="line">        ix, iy = x, y</span><br><span class="line">    <span class="keyword">elif</span> event == cv.EVENT_LBUTTONUP:</span><br><span class="line">        drawing = <span class="literal">False</span></span><br><span class="line">        cv.rectangle(img, (ix, iy), (x, y), (b, g, r), radius)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nothing</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建一个黑色的图像，一个窗口</span></span><br><span class="line">    img = np.zeros((<span class="number">300</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">    cv.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">    cv.setMouseCallback(<span class="string">'image'</span>, draw_circle)</span><br><span class="line">    <span class="comment"># 创建颜色变化的轨迹栏</span></span><br><span class="line">    cv.createTrackbar(<span class="string">'R'</span>, <span class="string">'image'</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line">    cv.createTrackbar(<span class="string">'G'</span>, <span class="string">'image'</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line">    cv.createTrackbar(<span class="string">'B'</span>, <span class="string">'image'</span>, <span class="number">0</span>, <span class="number">255</span>, nothing)</span><br><span class="line">    <span class="comment"># 创建画笔半径</span></span><br><span class="line">    cv.createTrackbar(<span class="string">'Radius'</span>, <span class="string">'image'</span>, <span class="number">1</span>, <span class="number">10</span>, nothing)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        cv.imshow(<span class="string">'image'</span>, img)</span><br><span class="line">        k = cv.waitKey(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 得到四条轨迹的当前数值</span></span><br><span class="line">        r = cv.getTrackbarPos(<span class="string">'R'</span>, <span class="string">'image'</span>)</span><br><span class="line">        g = cv.getTrackbarPos(<span class="string">'G'</span>, <span class="string">'image'</span>)</span><br><span class="line">        b = cv.getTrackbarPos(<span class="string">'B'</span>, <span class="string">'image'</span>)</span><br><span class="line">        radius = cv.getTrackbarPos(<span class="string">'Radius'</span>, <span class="string">'image'</span>)</span><br><span class="line"></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h1 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h1><h2 id="图像的基本操作"><a href="#图像的基本操作" class="headerlink" title="图像的基本操作"></a>图像的基本操作</h2><ol><li>访问像素值并修改它们 — 访问图像属性 — 设置感兴趣区域(ROI) — 分割和合并图像</li><li>本节的操作几乎都主要与Numpy相关，而不是与OpenCV相关。要使用OpenCv编写更好的优化代码，需要Numpy的丰富知识</li></ol><h3 id="访问和修改像素值"><a href="#访问和修改像素值" class="headerlink" title="访问和修改像素值"></a>访问和修改像素值</h3><p>加载彩色图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>improt numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>improt cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>img = cv.imread(<span class="string">'messi5.jpg'</span>)</span><br></pre></td></tr></table></figure><p>可以通过行和列坐标来访问像素值。对于BGR图像，返回一个有B、G、R值组成的数组。对于灰度图像，只返回相应的灰度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>px = img[<span class="number">100</span>,<span class="number">100</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(px)</span><br><span class="line">[<span class="number">157</span> <span class="number">166</span> <span class="number">200</span>]</span><br><span class="line"><span class="comment">#仅访问蓝色像素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>blue = img[<span class="number">100</span>,<span class="number">100</span>,<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(blue)</span><br><span class="line"><span class="number">157</span></span><br></pre></td></tr></table></figure><p>修改像素值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>img[<span class="number">100</span>,<span class="number">100</span>] = [<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(img[<span class="number">100</span>,<span class="number">100</span>])</span><br><span class="line">[<span class="number">255</span> <span class="number">255</span> <span class="number">255</span>]</span><br></pre></td></tr></table></figure><p>Numpy是用于快速数组计算的优化库，因此，简单地访问每个像素值并对其进行修改将非常缓慢</p><p><strong>注意</strong>上面的方法通常用于选择数组的区域，例如前5行和后3列。对于单个像素访问，Numpy数组方法array.item()和array.itemset()被认为更好，但它们的返回量是标量。如果要访问所有B、G、R值，则需要分别调用所有的array.item()</p><p>更好的像素访问和编辑方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#访问RED值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>img.item(<span class="number">10</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">59</span></span><br><span class="line"><span class="comment">#修改RED值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>img.itemset((<span class="number">10</span>,<span class="number">10</span>,<span class="number">2</span>),<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>img.item(<span class="number">10</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="访问图像属性"><a href="#访问图像属性" class="headerlink" title="访问图像属性"></a>访问图像属性</h3><p>图像形状访问<code>img.shape</code>，返回行、列、通道数的元组（如果是彩色）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(img.shape)</span><br><span class="line">(<span class="number">342</span>,<span class="number">548</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>像素总数访问<code>img.size</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(img.size)</span><br><span class="line"><span class="number">562248</span></span><br></pre></td></tr></table></figure><p>图像数据类型访问<code>img.dtype</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(img.dtype)</span><br><span class="line">uint8</span><br></pre></td></tr></table></figure><p><strong>img.dtype在调试时非常重要，因为OpenCV-Python代码中的大量错误是由无效的数据类型引起的</strong></p><h3 id="图像感兴趣区域ROI"><a href="#图像感兴趣区域ROI" class="headerlink" title="图像感兴趣区域ROI"></a>图像感兴趣区域ROI</h3><p>选择一个区域并将其复制到另外一个区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>img1 = img[<span class="number">200</span>:<span class="number">300</span>,<span class="number">200</span>:<span class="number">300</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>img[<span class="number">300</span>:<span class="number">400</span>,<span class="number">300</span>:<span class="number">400</span>] = img1</span><br></pre></td></tr></table></figure><h3 id="拆分和合并图像通道"><a href="#拆分和合并图像通道" class="headerlink" title="拆分和合并图像通道"></a>拆分和合并图像通道</h3><p>将BGR图像拆分为单个通道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b,g,r = cv.split(img)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>img = cv.merge((b,g,r))</span><br></pre></td></tr></table></figure><p>或者用numpy索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = img[:,:,<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>img[:,:,<span class="number">2</span>] = <span class="number">0</span>    <span class="comment">#将所有红色像素都设置为0</span></span><br></pre></td></tr></table></figure><p><code>cv.split()</code>是一项耗时的操作，仅在必要时才这样做，否则请进行Numpy索引</p><h3 id="为图像设置边框（填充）"><a href="#为图像设置边框（填充）" class="headerlink" title="为图像设置边框（填充）"></a>为图像设置边框（填充）</h3><p>如果要在图像周围创建边框，可以使用<code>cv.copyMakeBorder()</code>。但它在卷积运算、零填充等方面有更多应用。此函数采用以下参数：</p><ul><li>src - 输入图像</li><li>top、bottom、left、right - 边界宽度（以相应方向上的像素数为单位）</li><li>borderType - 定义要边框标志，有以下类型：<ul><li>cv.BORDER_CONSTANT value - 添加恒定的彩色边框，value是边框的颜色</li><li>cv.BORDER_REFLECT - 边框将是边框元素的镜像，hgfedcba|abcdefgh|hgfedcba</li><li>cv.BORDER_REFLEVT_101 或 cv.BORDER_DEFAULT - 同上，但是，hgfedcb|abcdefgh|gfedcba</li><li>cv.BORDER_REPLICATE - 最后一个元素被复制，aaaaaa|abcdefgh|hhhhhh</li><li>cv.BORDER_WRAP - 难以解释，cdefgh|abcdefgh|abcdef</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'ironman.jpg'</span>)</span><br><span class="line"></span><br><span class="line">replicate = cv.copyMakeBorder(img, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, borderType=cv.BORDER_REPLICATE)</span><br><span class="line">reflect = cv.copyMakeBorder(img, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, cv.BORDER_REFLECT)</span><br><span class="line">reflect101 = cv.copyMakeBorder(img, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, cv.BORDER_REFLECT_101)</span><br><span class="line">wrap = cv.copyMakeBorder(img, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, cv.BORDER_WRAP)</span><br><span class="line">constant = cv.copyMakeBorder(img, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, cv.BORDER_CONSTANT, value=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">231</span>), plt.imshow(img, <span class="string">'gray'</span>), plt.title(<span class="string">'ORIGINAL'</span>)</span><br><span class="line">plt.subplot(<span class="number">232</span>), plt.imshow(replicate, <span class="string">'gray'</span>), plt.title(<span class="string">'REPLICATE'</span>)</span><br><span class="line">plt.subplot(<span class="number">233</span>), plt.imshow(reflect, <span class="string">'gray'</span>), plt.title(<span class="string">'REFLECT'</span>)</span><br><span class="line">plt.subplot(<span class="number">234</span>), plt.imshow(reflect101, <span class="string">'gray'</span>), plt.title(<span class="string">'REFLECT_101'</span>)</span><br><span class="line">plt.subplot(<span class="number">235</span>), plt.imshow(wrap, <span class="string">'gray'</span>), plt.title(<span class="string">'WRAP'</span>)</span><br><span class="line">plt.subplot(<span class="number">236</span>), plt.imshow(constant, <span class="string">'gray'</span>), plt.title(<span class="string">'CONSTANT'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="图像上的算法运算"><a href="#图像上的算法运算" class="headerlink" title="图像上的算法运算"></a>图像上的算法运算</h2><ol><li>图像的几种算术运算，例如加法、减法、按位运算。<strong>cv.add</strong>、<strong>cv.addWeighted</strong></li><li>使用<code>cv.addWeighted</code>函数在文件夹中创建图像的幻灯片放映，并在图像之间进行平滑过渡</li></ol><h3 id="图像加法"><a href="#图像加法" class="headerlink" title="图像加法"></a>图像加法</h3><p>通过OpenCV函数<code>cv.add()</code>或仅通过numpy操作<code>res = img1 + img2</code>添加两个图像。<strong>两个图像应具有相同的深度和类型</strong>，或者第二个图像可以是一个标量值</p><p><strong>注意</strong>OpenCV加法是饱和运算，Numpy加法是模运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.uint8([<span class="number">250</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = np.uint8([<span class="number">10</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(cv.add(x,y))    <span class="comment"># 250 + 10 = 260 =&gt; 255</span></span><br><span class="line">[[<span class="number">255</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x+y)    <span class="comment"># 250 + 10 = 260 % 256 = 4</span></span><br><span class="line">[<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>OpenCV功能将提供更好的结果，因此，始终最好坚持使用OpenCV功能</p><h3 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h3><p>也是图像加法，但对图像赋予不同的权重，以使其具有融合或透明的感觉</p><script type="math/tex; mode=display">G(x)=(1−\alpha)f_0(x)+(1-\alpha)f_1(x)</script><p><code>cv.addWeighted()</code>在图像上应用以下公式,，γ是透明度</p><script type="math/tex; mode=display">dst=\alpha·img1+\beta·img2+\gamma</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img1 = cv.imread(<span class="string">'test1.jpg'</span>)</span><br><span class="line">img2 = cv.imread(<span class="string">'test2.jpg'</span>)</span><br><span class="line">dst = cv.addWeighted(img1,<span class="number">0.7</span>,img2,<span class="number">0.3</span>,<span class="number">0</span>)</span><br><span class="line">cv.imshow(<span class="string">'dst'</span>,dst)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="按位运算"><a href="#按位运算" class="headerlink" title="按位运算"></a>按位运算</h3><p>包括按位<code>AND</code>、<code>OR</code>、<code>NOT</code>和<code>XOR</code>操作。它们在提取图像的任何部分、定义和处理非矩形ROI等方面非常有用。</p><p>在图像上方放置OpenCV徽标。如果添加两个图像，它将改变颜色。如果混合它，将获得透明效果。为了不透明，如果是矩形区域，可以使用ROI，如果不是矩形，可以按位操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加载两张图片</span></span><br><span class="line">img1 = cv.imread(<span class="string">'test1.jpg'</span>)</span><br><span class="line">img2 = cv.imread(<span class="string">'test2.jpg'</span>)</span><br><span class="line"><span class="comment">#要把logo放在左上角，所以创建了ROI</span></span><br><span class="line">rows, cols, channels = img2.shape</span><br><span class="line">roi = img1[<span class="number">0</span>:rows,<span class="number">0</span>:cols]</span><br><span class="line"><span class="comment">#现在创建logo的掩码，并同时创建其相反掩码</span></span><br><span class="line">img2gray = cv.cvtColor(img2, cv.COLOR_BGR2GRAY)</span><br><span class="line">ret, mask = cv.threshold(img2gray, <span class="number">10</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">mask_inv = cv.bitwise_not(mask)</span><br><span class="line"><span class="comment">#现在将ROI中logo的区域涂黑</span></span><br><span class="line">img1_bg = cv.bitwise_and(roi, roi, mask = mask_inv)</span><br><span class="line"><span class="comment">#仅从logo图像中提取logo区域</span></span><br><span class="line">img2_fg = cv.bitwise_and(img2, img2, mask = mask)</span><br><span class="line"><span class="comment">#将logo放入ROI并修改主图像</span></span><br><span class="line">dst = cv,add(img1_bg, img2_fg)</span><br><span class="line">img1[<span class="number">0</span>:rows, <span class="number">0</span>:cols] = dst</span><br><span class="line">cv.imshow(<span class="string">'res'</span>, img1)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyWindows()</span><br></pre></td></tr></table></figure><p>使用<code>cv.addWeighted</code>函数在文件夹中创建图像的幻灯片放映，并在图像之间进行平滑过渡</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    #加载文件夹的图片</span><br><span class="line">    l = <span class="selector-attr">[]</span></span><br><span class="line">    <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        l<span class="selector-class">.append</span>(cv<span class="selector-class">.imread</span>(f<span class="string">'images/{i}.jpg'</span>))</span><br><span class="line">        </span><br><span class="line">    cv<span class="selector-class">.namedWindow</span>(<span class="string">'ppt'</span>, True)</span><br><span class="line">    dst = cv<span class="selector-class">.addWeighted</span>(l<span class="selector-attr">[0]</span>, l<span class="selector-attr">[1]</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    cv<span class="selector-class">.imshow</span>(<span class="string">'ppt'</span>, dst)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="number">1</span>) - <span class="number">1</span>):</span><br><span class="line">        <span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line">        img1 = l<span class="selector-attr">[idx]</span></span><br><span class="line">        img2 = l<span class="selector-attr">[idx + 1]</span></span><br><span class="line">        cv<span class="selector-class">.waitKey</span>(<span class="number">0</span>)</span><br><span class="line">        while <span class="selector-tag">a</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            dst = cv<span class="selector-class">.addWeighted</span>(img1, <span class="selector-tag">a</span>, img2, <span class="number">1</span> - <span class="selector-tag">a</span>, <span class="number">0</span>)</span><br><span class="line">            cv<span class="selector-class">.imshow</span>(<span class="string">'ppt'</span>, dst)</span><br><span class="line">            cv<span class="selector-class">.waitKey</span>(<span class="number">0</span>)</span><br><span class="line">            <span class="selector-tag">a</span> -= <span class="number">0.1</span></span><br><span class="line">cv<span class="selector-class">.destroyAllWindows</span>()</span><br></pre></td></tr></table></figure><h2 id="性能衡量和提升技术"><a href="#性能衡量和提升技术" class="headerlink" title="性能衡量和提升技术"></a>性能衡量和提升技术</h2><ol><li>在图像处理中，由于每秒要处理大量操作，因此必须使代码不仅提供正确的解决方案，而且还必须以最快的方式提供，因此我们要了解：衡量代码的性能，一些提高代码性能的技巧</li><li>性能优化的措施：<ol><li>尽量避免在Python中使用循环，尤其是双/三重循环等。他们本来就很慢</li><li>由于Numpy和OpenCV已针对向量运算进行了优化，因此将算法/代码向量化到最大程度</li><li>利用缓存一致性</li><li>除非需要，否则切勿创建数组的副本。尝试改用视图。数组复制是一项昂贵的操作</li><li>使用Cython等其他库来使其更快</li></ol></li></ol><h3 id="使用OpenCV衡量性能"><a href="#使用OpenCV衡量性能" class="headerlink" title="使用OpenCV衡量性能"></a>使用OpenCV衡量性能</h3><p><code>cv.getTickCount</code>函数返回参考事件到调用此函数那一刻之间的时钟周期数。因此，在函数执行之前和之后调用，会获得用于执行函数的时钟周期数</p><p><code>cv.getTickFrequency</code>函数返回时钟周期的频率或每秒的时钟周期数。因此，要找到执行时间，可以执行以下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img1 = cv.imread(<span class="string">'test1.jpg'</span>)</span><br><span class="line">e1 = cv.getTickCount()</span><br><span class="line"><span class="comment">#你的执行代码</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">49</span>, <span class="number">2</span>)</span><br><span class="line">    img1 = cv.medianBlur(img1, i)</span><br><span class="line">e2 = cv.getTickCount()</span><br><span class="line">time = (e2 - e1)/ cv.getTickFrequency()</span><br><span class="line"><span class="built_in">print</span>(time)</span><br></pre></td></tr></table></figure><p>还可以使用时间模块<code>time</code>执行相同的操作。代替cv.getTickCount()，使用time.time()函数，然后取差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">img1 = cv.imread(<span class="string">'test1.jpg'</span>)</span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">49</span>, <span class="number">2</span>):</span><br><span class="line">    img1 = cv.medianBlur(img1, i)</span><br><span class="line"><span class="built_in">print</span>(time.time() - t1)</span><br></pre></td></tr></table></figure><h3 id="OpenCV中的默认优化"><a href="#OpenCV中的默认优化" class="headerlink" title="OpenCV中的默认优化"></a>OpenCV中的默认优化</h3><p>许多OpenCV函数都是使用SSE2、AVX等进行优化的。使用<code>cvUseoptimized</code>检查是否启用/禁用和<code>cvSetuseoptimized</code>以启用/禁用优化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查是否启用了优化</span></span><br><span class="line"><span class="built_in">print</span>(cv.useOptimized())</span><br><span class="line">cv.setUseOptimized(<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(cv.useOptimized())</span><br></pre></td></tr></table></figure><h1 id="OpenCV中的图像处理"><a href="#OpenCV中的图像处理" class="headerlink" title="OpenCV中的图像处理"></a>OpenCV中的图像处理</h1><h2 id="改变颜色空间"><a href="#改变颜色空间" class="headerlink" title="改变颜色空间"></a>改变颜色空间</h2><ol><li>改变颜色通道，提取单个颜色的对象。</li><li>提取多个彩色对象。</li></ol><p>OpenCV中有超过150种颜色空间转换方法。对于颜色转换，使用<code>cv.cvtColor(input_image, flag)</code>函数，其中<code>flag</code>决定转换类型。对于BGR -&gt; 灰度，使用标志<code>cv.COLOR_BGR2GRAY</code></p><p>获取其他标志，只需在Python终端中运行以下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flags = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dir</span>(cv) <span class="keyword">if</span> i.startswith(<span class="string">'COLOR_'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><strong>HSV</strong>是根据颜色的直观特性由 A. R. Smith 在 1978 年创建的一种颜色空间, 也称六角锥体模型（Hexcone Model）。这个模型中颜色的参数分别是色调（H）、饱和度（S）和明度（V）。</p><p>在OpenCV中HSV的取值范围是H：[0,180]，S：[0,255]，V：[0,255]。不同的软件使用不同的规模。因此，如果要将OpenCV值和它们比较，需要将这些范围标准化。</p><p>对于基本色中应对应的HSV分量需要给定一个严格的范围，下面给出一个模糊的范围，其中把部分红色归为紫色范围。想了解更多可以参考<a href="https://www.cnblogs.com/wangyblzu/p/5710715.html">OpenCV中HSV颜色模型及颜色分量范围 - wangyblzu - 博客园 (cnblogs.com)</a></p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">黑</th><th style="text-align:center">灰</th><th style="text-align:center">白</th><th style="text-align:center">红</th><th style="text-align:center">橙</th><th style="text-align:center">黄</th><th style="text-align:center">绿</th><th style="text-align:center">青</th><th style="text-align:center">蓝</th><th style="text-align:center">紫</th></tr></thead><tbody><tr><td style="text-align:center">Hmin</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0    \</td><td style="text-align:center">156</td><td style="text-align:center">11</td><td style="text-align:center">26</td><td style="text-align:center">35</td><td style="text-align:center">78</td><td style="text-align:center">100</td><td>125</td></tr><tr><td style="text-align:center">Hmax</td><td style="text-align:center">180</td><td style="text-align:center">180</td><td style="text-align:center">180</td><td style="text-align:center">10  \</td><td style="text-align:center">180</td><td style="text-align:center">25</td><td style="text-align:center">34</td><td style="text-align:center">77</td><td style="text-align:center">99</td><td style="text-align:center">124</td><td>155</td></tr><tr><td style="text-align:center">Smin</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">43</td><td style="text-align:center">43</td><td style="text-align:center">43</td><td style="text-align:center">43</td><td style="text-align:center">43</td><td style="text-align:center">43</td><td style="text-align:center">43</td></tr><tr><td style="text-align:center">Smax</td><td style="text-align:center">255</td><td style="text-align:center">43</td><td style="text-align:center">30</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td></tr><tr><td style="text-align:center">Vmin</td><td style="text-align:center">0</td><td style="text-align:center">46</td><td style="text-align:center">221</td><td style="text-align:center">46</td><td style="text-align:center">46</td><td style="text-align:center">46</td><td style="text-align:center">46</td><td style="text-align:center">46</td><td style="text-align:center">46</td><td style="text-align:center">46</td></tr><tr><td style="text-align:center">Vmax</td><td style="text-align:center">46</td><td style="text-align:center">220</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td><td style="text-align:center">255</td></tr></tbody></table></div><h3 id="对象追踪"><a href="#对象追踪" class="headerlink" title="对象追踪"></a>对象追踪</h3><p>尝试提取一个蓝色的图像：取视频的每一帧 — 转换从BGR到HSV颜色空间 — 对HSV图像设置蓝色范围的阈值 — 单独提取蓝色对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cap = cv.VideoCapture(<span class="number">0</span>)    <span class="comment">#从相机中读取视频</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#读取帧</span></span><br><span class="line">    _, frame = cap.read()</span><br><span class="line">    <span class="comment">#转换颜色空间BGR到HSV</span></span><br><span class="line">    hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)</span><br><span class="line">    <span class="comment">#定义HSV中蓝色的范围</span></span><br><span class="line">    lower_blue = np.array([<span class="number">110</span>,<span class="number">50</span>,<span class="number">50</span>])</span><br><span class="line">    upper_blue = np.array([<span class="number">130</span>,<span class="number">255</span>,<span class="number">255</span>])</span><br><span class="line">    <span class="comment">#设置HSV的阈值使得只取蓝色</span></span><br><span class="line">    mask = cv.inRange(hsv, lower_blue, upper_blue)</span><br><span class="line">    <span class="comment">#将掩膜和图像逐像素相加</span></span><br><span class="line">    res = cv.bitwise_and(frame, frame, mask=mask)</span><br><span class="line">    cv.imshow(<span class="string">'frame'</span>, frame)</span><br><span class="line">    cv.imshow(<span class="string">'mask'</span>, mask)</span><br><span class="line">    cv.imshow(<span class="string">'res'</span>, res)</span><br><span class="line">    k = cv.waitKey(<span class="number">5</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="如何找到要追踪的HSV值"><a href="#如何找到要追踪的HSV值" class="headerlink" title="如何找到要追踪的HSV值"></a>如何找到要追踪的HSV值</h3><p>可以使用相同的函数<strong>cv.cvtColor()</strong>，你只需要传递你想要的BGR值，而不是传递图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找绿色的HSV值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>green = np.uint8([[[<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hsv_green = cv.cvtColor(green,cv.COLOR_BGR2HSV)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(hsv_green)</span><br><span class="line">[[[<span class="number">60</span> <span class="number">255</span> <span class="number">255</span>]]]</span><br></pre></td></tr></table></figure><p>尝试提取多个彩色对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cap = cv.VideoCapture(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        _, frame = cap.read()</span><br><span class="line">        <span class="comment"># Convert BGR to HSV</span></span><br><span class="line">        hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># define range of color in HSV</span></span><br><span class="line">        lower_red = np.array([<span class="number">150</span>,<span class="number">50</span>,<span class="number">50</span>])</span><br><span class="line">        upper_red = np.array([<span class="number">179</span>,<span class="number">255</span>,<span class="number">255</span>])</span><br><span class="line">        </span><br><span class="line">        lower_green = np.array([<span class="number">35</span>,<span class="number">50</span>,<span class="number">50</span>])</span><br><span class="line">        upper_green = np.array([<span class="number">77</span>,<span class="number">255</span>,<span class="number">255</span>])</span><br><span class="line">        </span><br><span class="line">        lower_blue = np.array([<span class="number">100</span>,<span class="number">50</span>,<span class="number">50</span>])</span><br><span class="line">        upper_blue = np.array([<span class="number">125</span>,<span class="number">255</span>,<span class="number">255</span>])</span><br><span class="line">        </span><br><span class="line">        red_mask = cv.inRange(hsv, lower_red,upper_red)</span><br><span class="line">        green_mask = cv.inRange(hsv, lower_green, upper_green)</span><br><span class="line">        blue_mask = cv.inRange(hsv, lower_blue, upper_blue)</span><br><span class="line">        mask = red_mask + green_mask + blue_mask</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#Bitwise-AND mask and original image</span></span><br><span class="line">        res = cv.bitwise_and(frame, frame, mask=mask)</span><br><span class="line">        </span><br><span class="line">        cv.imshow(<span class="string">'frame'</span>, frame)</span><br><span class="line">        cv.imshow(<span class="string">'mask'</span>, mask)</span><br><span class="line">        cv.imshow(<span class="string">'res'</span>, res)</span><br><span class="line">        k = cv.waitKey(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="图像几何变换"><a href="#图像几何变换" class="headerlink" title="图像几何变换"></a>图像几何变换</h2><ol><li>缩放、平移、旋转、仿射变换、透视变换</li><li>OpenCV提供两个转换函数<strong>cv.warpAffine</strong>和<strong>cv.warpPerspective</strong>。cv.warpAffine采用2x3转换矩阵，cv.warpPerspective采用3x3转换矩阵作为输入</li></ol><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>缩放只是调整图像的大小。为此，OpenCV带有一个函数<strong>cv.resize()</strong>。图像的大小可以自定义也可以指定缩放比例。或者使用不同的插值方法。首选的插值方法是<strong>cv.INTER_AREA</strong>用于缩小，<strong>cv.INTER_CUBIC</strong>和<strong>cv.INTER_LINEAR</strong>用于缩放。默认情况下，出于所用调整大小的目的，使用的插值方法为<strong>cv.INTER_LINEAR</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">res = cv.resize(img, <span class="literal">None</span>, fx=<span class="number">2</span>, fy=<span class="number">2</span>, interpolation = cv.INTER_CUBIC)</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">height, width = img.shape[:<span class="number">2</span>]</span><br><span class="line">res = cv.resize(img, (<span class="number">2</span>*width, <span class="number">2</span>*height), interpolation = cv.INTER_CUBIC)</span><br></pre></td></tr></table></figure><h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3><p>平移是物体位置的移动。如果您知道在（x，y）方向上的位移，则将其设为（tx，ty），可以创建转换矩阵M</p><script type="math/tex; mode=display">M=\begin{bmatrix}1&0&t_x\\0&1&t_y\\\end{bmatrix}</script><p>可以将其放入<strong>np.float32</strong>类型的Numpy数组中，并将其传递给<strong>cv.warpAffine</strong>函数。<strong>cv.wrapAffine</strong>函数的第三个参数是输出图像的大小，其形式应为（width，heigh）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'test.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">rows, cols = img.shape</span><br><span class="line">M = np.float32([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">100</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">50</span>]])</span><br><span class="line">dst = cv.warpAffine(img,M,(cols,rows))</span><br><span class="line">cv.imshow(<span class="string">'img'</span>,dst)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>图像旋转角度为θ是通过以下形式的变换矩阵实现的：</p><script type="math/tex; mode=display">M=\begin{bmatrix}\cos\theta&-\sin\theta\\\sin\theta&\cos\theta\\\end{bmatrix}</script><p>OpenCV提供了可缩放的旋转以及可调整的旋转中心</p><script type="math/tex; mode=display">\begin{bmatrix}\alpha&\beta&(1-\alpha)·center.x-\beta·center.y\\-\beta&\alpha&\beta·center.x+(1-\alpha)·center.y\\\end{bmatrix}</script><p>其中：</p><script type="math/tex; mode=display">\alpha=scale·\cos\theta\\\beta=scale·\sin\theta</script><p>为了找到此转换矩阵，OpenCV提供了一个函数<strong>cv.getRotationMatrix2D</strong>。</p><p>将图像相对于中心旋转90°而没有任何缩放比例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:    </span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">    rows, cols = img.shape</span><br><span class="line">    <span class="comment"># cols-1和rows-1是坐标极限</span></span><br><span class="line">    M = cv.getRotationMatrix2D(((cols-<span class="number">1</span>)/<span class="number">2.0</span>, (rows-<span class="number">1</span>)/<span class="number">2.0</span>), <span class="number">90</span>, <span class="number">1</span>)</span><br><span class="line">    dst = cv.warpAffine(img, M, (cols, rows))</span><br><span class="line">    cv.imshow(<span class="string">"rotated"</span>, dst)</span><br><span class="line">    </span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h3><p>在仿射变换中，原始图像中的所有平行线在输出图像上仍将平行。为了找到变换矩阵，我们需要输入图像中的三个点及其在输出图像中的对应位置。然后<strong>cv.getAffineTransform</strong>将创建一个2x3矩阵，该矩阵将传递给<strong>cv.warpAffine</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">rows, cols, ch = img.shape</span><br><span class="line">pts1 = np.float32([[<span class="number">50</span>, <span class="number">50</span>], [<span class="number">200</span>, <span class="number">50</span>], [<span class="number">50</span>, <span class="number">200</span>]])</span><br><span class="line">pts2 = np.float32([[<span class="number">10</span>, <span class="number">100</span>], [<span class="number">200</span>, <span class="number">50</span>], [<span class="number">100</span>, <span class="number">250</span>]])</span><br><span class="line">M = cv.getAffineTransform(pts1, pts2)</span><br><span class="line">dst = cv.warpAffine(img, M, (cols, rows))</span><br><span class="line">plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Input'</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>), plt.imshow(dst), plt.title(<span class="string">'Output'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="透视变换"><a href="#透视变换" class="headerlink" title="透视变换"></a>透视变换</h3><p>对于透视变换，需要3x3变换矩阵。要找到此变换矩阵，需要在输入图像上有4个点，在输出图像上需要相应的点。在这四个点中，其中三个不应共线。然后可以通过<strong>cv.getPerspectiveTransform</strong>找到变换矩阵。然后将<strong>cv.warpPerspective</strong>应用于此3x3转换矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">rows, cols, ch = img.shape</span><br><span class="line">pts1 = np.float32([[<span class="number">56</span>, <span class="number">65</span>], [<span class="number">368</span>, <span class="number">52</span>], [<span class="number">28</span>, <span class="number">387</span>], [<span class="number">389</span>, <span class="number">390</span>]])</span><br><span class="line">pts2 = np.float32([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">300</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">300</span>], [<span class="number">300</span>, <span class="number">300</span>]])</span><br><span class="line">M = cv.getPerspectiveTransform(pts1, pts2)</span><br><span class="line">dst = cv.warpPerspective(img, M, (<span class="number">300</span>, <span class="number">300</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Input'</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>), plt.imshow(dst), plt.title(<span class="string">'Output'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="图像阈值"><a href="#图像阈值" class="headerlink" title="图像阈值"></a>图像阈值</h2><ol><li>简单阈值、自适应阈值、Otsu的二值化</li></ol><h3 id="简单阈值"><a href="#简单阈值" class="headerlink" title="简单阈值"></a>简单阈值</h3><p>对于每个像素，应用相同的阈值。如果像素值小于阈值，则将其设置为0，否则将其设置为最大值。函数<strong>cv.threshold</strong>用于应用阈值，该方法返回两个输出，第一个是使用的阈值，第二个是阈值后的图像。第一个参数是源图像，它应该是灰度图像。第二个是阈值，用于对像素值进行分类。第三个是分配给超过阈值的像素值的最大值。OpenCV提供了不同类型的阈值，这由函数的第四个参数给出。所有简单的阈值类型为：</p><ul><li>cv.THRESH_BINARY    小于阈值置0，大于阈值置最大</li><li>cv.THRESH_BINARY_INV    小于阈值置最大，大于阈值置0</li><li>cv.THRESH_TRUNC    小于阈值不变，大于阈值置最大</li><li>cv.THRESH_TOZERO    小于阈值置0，大于阈值不变</li><li>cv.THRESH_TOZERO_INV    小于阈值不变，大于阈值置0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">ret, thresh1 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">ret, thresh2 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_BINARY_INV)</span><br><span class="line">ret, thresh3 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_TRUNC)</span><br><span class="line">ret, thresh4 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_TOZERO)</span><br><span class="line">ret, thresh5 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.RHRESH_TOZERO_INV)</span><br><span class="line">titles = [<span class="string">'Original'</span>, <span class="string">'BINARY'</span>, <span class="string">'BINARY_INV'</span>, <span class="string">'TRUNC'</span>, <span class="string">'TOZERO'</span>, <span class="string">'TOZERO_INV'</span>]</span><br><span class="line">images = [img, thresh1, thresh2, thresh3, thresh4, thresh5]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">6</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="自适应阈值"><a href="#自适应阈值" class="headerlink" title="自适应阈值"></a>自适应阈值</h3><p>算法基于像素周围的小区域确定像素的阈值。因此，对于同一图像的不同区域，我们获得了不同的阈值，这为光照度变化的图像提供了更好的结果。除了上述参数外，方法<strong>cv.adaptiveThreshold</strong>还包含三个输入参数：</p><ol><li>adaptiveMethod决定阈值是如何计算的<ul><li>cv.ADAPTIVE_THRESH_MEAN_C    阈值是邻近区域的平均值减去常数C</li><li>cv.ADAPTIVE_THRESH_GAUSSIAN_C    阈值是邻域值得高斯加权总和减去常数C</li></ul></li><li>BLOCKSIZE确定附近区域的大小</li><li>C是从邻域像素的平均或加权总和中减去的一个常数</li></ol><p>下面代码比较了光照变化的图像的全局阈值和自适应阈值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>, cv.IMREAD_GRAYSCALE)</span><br><span class="line">    img = cv.medianBlur(img, <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># medianBlur 基本思想是用像素点邻域灰度值的中值来代替该像素点的灰度值，</span></span><br><span class="line">    <span class="comment">#让周围的像素值接近真实的值从而消除孤立的噪声点。</span></span><br><span class="line">    <span class="comment">#该方法在取出脉冲噪声、椒盐噪声的同时能保留图像的边缘细节。</span></span><br><span class="line">    <span class="comment">#这些优良特性是线性滤波所不具备的</span></span><br><span class="line">    <span class="comment">#第二个参数是滤波模板的尺寸大小，必须是大于1的奇数，如3、5、7……</span></span><br><span class="line">    </span><br><span class="line">    _, th1 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">    th2 = cv.adaptiveThreshold(img, <span class="number">255</span>, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY, <span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line">    th3 = cv.adaptiveThreshold(img, <span class="number">255</span>, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY, <span class="number">11</span>, <span class="number">2</span>)</span><br><span class="line">    titles = [<span class="string">'Original Image'</span>, <span class="string">'Global Thresholding (v = 127)'</span>, <span class="string">'Adaptive Mean Thresholding'</span>,<span class="string">'Adaptive Gaussian Thresholding'</span>]</span><br><span class="line">    images = [img, th1, th2, th3]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        plt.subplot(<span class="number">2</span>, <span class="number">2</span>, i + <span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)</span><br><span class="line">        plt.title(titles[i])</span><br><span class="line">        plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h3 id="Otsu的二值化"><a href="#Otsu的二值化" class="headerlink" title="Otsu的二值化"></a>Otsu的二值化</h3><p>Otsu的方法避免了必须选择一个值并自动确定它的情况。考虑仅具有两个不同图像值的图像（<em>双峰图像</em>），其中直方图将仅包含两个峰。一个好的阈值应该在这两个值的中间。类似地，Otsu的方法从图像直方图中确定最佳全局阈值。为此，使用了<strong>cv.threshold</strong>作为附加标志传递。阈值可以任意选择。然后，算法找到最佳阈值，该阈值作为第一输出返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'noisy1.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 全局阈值</span></span><br><span class="line">    ret1, th1 = cv.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">    <span class="comment"># Otsu阈值</span></span><br><span class="line">    ret2, th2 = cv.threshold(img, <span class="number">0</span>, <span class="number">255</span>, cv.THRESH_BINARY + cv.THRESH_OTSU)</span><br><span class="line">    <span class="comment"># 高斯滤波后再采用Otsu阈值</span></span><br><span class="line">    blur = cv.GaussianBlur(img, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line">    ret3, th3 = cv.threshold(blur, <span class="number">0</span>, <span class="number">255</span>, cv.THRESH_BINARY + cv.THRESH_OTSU)</span><br><span class="line">    <span class="comment"># 绘制所有图像及其直方图</span></span><br><span class="line">    images = [img, <span class="number">0</span>, th1,</span><br><span class="line">              img, <span class="number">0</span>, th2,</span><br><span class="line">              blur, <span class="number">0</span>, th3]</span><br><span class="line">    titles = [<span class="string">'Original Noisy Image'</span>, <span class="string">'Histogram'</span>, <span class="string">'Global Thresholding (v=127)'</span>,</span><br><span class="line">              <span class="string">'Original Noisy Image'</span>, <span class="string">'Histogram'</span>, <span class="string">"Otsu's Thresholding"</span>,</span><br><span class="line">              <span class="string">'Gaussian filtered Image'</span>, <span class="string">'Histogram'</span>, <span class="string">"Otsu's Thresholding"</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i * <span class="number">3</span> + <span class="number">1</span>), plt.imshow(images[i * <span class="number">3</span>], <span class="string">'gray'</span>)</span><br><span class="line">        plt.title(titles[i * <span class="number">3</span>]), plt.xticks([]), plt.yticks([])</span><br><span class="line">        plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i * <span class="number">3</span> + <span class="number">2</span>), plt.hist(images[i * <span class="number">3</span>].ravel(),<span class="number">256</span>)  <span class="comment"># numpy.ndarray 类的一个方法 .ravel() 。Return a flattened array._</span></span><br><span class="line"></span><br><span class="line">        plt.title(titles[i * <span class="number">3</span> + <span class="number">1</span>]), plt.xticks([]), plt.yticks([])</span><br><span class="line">        plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i * <span class="number">3</span> + <span class="number">3</span>), plt.imshow(images[i * <span class="number">3</span> + <span class="number">2</span>], <span class="string">'gray'</span>)</span><br><span class="line">        plt.title(titles[i * <span class="number">3</span> + <span class="number">2</span>]), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>了解更多，可以阅读<a href="http://www.woshicver.com/FifthSection/4_3_图像阈值/">二值化如何实现</a></p><h2 id="图像平滑"><a href="#图像平滑" class="headerlink" title="图像平滑"></a>图像平滑</h2><ol><li>使用各种低通滤镜模糊图像 — 将定制的滤镜应用于图像（2D卷积）</li></ol><h3 id="2D卷积（图像过滤）"><a href="#2D卷积（图像过滤）" class="headerlink" title="2D卷积（图像过滤）"></a>2D卷积（图像过滤）</h3><p>与一维信号一样，可以使用各种低通滤波器（LPF）和高通滤波器（HPF）等对图像进行滤波。LPF有助于消除噪声，使图像模糊等。HPF有助于在图像中找到边缘</p><p>OpenCV提供了一个函数<strong>cv.filter2D</strong>来将内核与图像进行卷积。例如，尝试对图像进行平均滤波。5x5平均滤波器内核如下所示：</p><script type="math/tex; mode=display">K=\frac{1}{25}\begin{bmatrix}1&1&1&1&1\\1&1&1&1&1\\1&1&1&1&1\\1&1&1&1&1\\1&1&1&1&1\\\end{bmatrix}</script><p>操作如下：保持这个内核在一个像素上，将所有低于这个内核的25个像素相加，取其平均值，然后用新的平均值替换中心像素。它将对图像中的所有像素继续此操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matploylib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">    kernel = np.ones((<span class="number">5</span>, <span class="number">5</span>), np.float32)/<span class="number">25</span></span><br><span class="line">    dst = cv.filter2D(img, -<span class="number">1</span>, kernel)</span><br><span class="line">    plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">122</span>), plt.imshow(dst), plt.title(<span class="string">'Averaging'</span>)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h3 id="图像模糊（图像平滑）"><a href="#图像模糊（图像平滑）" class="headerlink" title="图像模糊（图像平滑）"></a>图像模糊（图像平滑）</h3><p>通过将图像与LPF内核进行卷积来实现图像模糊。实际上是消除了图像的高频部分（例如噪声、边缘）。因此，在此操作中边缘有些模糊。有一些模糊技术可以不模糊边缘。OpenCV主要提供四种类型的模糊技术</p><h4 id="平均"><a href="#平均" class="headerlink" title="平均"></a><strong>平均</strong></h4><p>通过将图像与归一化框滤镜进行卷积来完成。它仅获取内核区域下所有像素的平均值，并替换中心元素。通过功能<strong>cv.blur()</strong>或<strong>cv.boxFilter()</strong>来完成。我们应该指定内核的宽度和高度。3x3归一化框式过滤器如下所示</p><script type="math/tex; mode=display">K=\frac{1}{9}\begin{bmatrix}1&1&1\\1&1&1\\1&1&1\end{bmatrix}</script><p><strong>注意</strong>如果不使用标准化的框式过滤器，请使用<strong>cv.boxFilter()</strong>，将参数<code>normalize = False</code>传递给函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">    blur = cv.blur(img, (<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">    plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">122</span>), plt.imshow(blur), plt.title(<span class="string">'Blurred'</span>)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h4 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h4><p>用高斯核代替盒式滤波器。通过功能<strong>cv.GaussianBlur()</strong>完成。应该指定内核的宽度和高度，且宽度和高度应为正数和奇数。还应指定X和Y方向的标准偏差，分别为sigmaX和sigmaY。若仅指定sigmaX，则sigmaY与其相同。若两个都为0，则根据内核大小进行计算。可以使用函数<strong>cv.getGaussianKernel()</strong>创建高斯内核</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">    <span class="comment">#实现高斯模糊</span></span><br><span class="line">    blur = cv.GaussianBlur(img, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">122</span>), plt.imshow(blur), plt.title(<span class="string">'Blurred'</span>)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h4 id="中位模糊"><a href="#中位模糊" class="headerlink" title="中位模糊"></a>中位模糊</h4><p>函数<strong>cv.medianBlur()</strong>提取内核区域下所有像素的中值，并将中心元素替换为该中值。这对于消除图像中的椒盐噪声非常有效。其内核大小应为正奇数整数。在上述过滤器中，中心元素是新计算的值，该值可以是图像中的像素值或新值。但是在中值模糊中，中心元素总是被图像中的某些像素值代替，有效降低噪音。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">    <span class="comment">#实现中位模糊</span></span><br><span class="line">    blur = cv.medianBlur(img, <span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">122</span>), plt.imshow(blur), plt.title(<span class="string">'medianBlur'</span>)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>双边滤波</p><p><strong>cv.bilateralFilter()</strong>在去除噪声的同时保持边缘清晰锐利非常有效。但是，与其他过滤器相比，该操作速度较慢。高斯滤波器采用像素周围的邻域并找到其高斯加权平均值。高斯滤波器仅是空间的函数，也就是说，滤波时会考虑附近的像素。它不考虑像素是否具有几乎相同的强度。它不考虑像素是否是边缘像素。因此它也模糊了边缘，这是我们不想做的。</p><p>双边滤波器在空间中也采用高斯滤波器，但是又有一个高斯滤波器，它是像素差的函数。空间的高斯函数确保仅考虑附近像素的模糊，而强度差的高斯函数确保仅考虑强度与中心像素相似的那些像素的模糊。由于边缘的像素强度变化较大，因此可以保留边缘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">    <span class="comment">#实现中位模糊</span></span><br><span class="line">    blur = cv.bilateralFilter(img, <span class="number">9</span>, <span class="number">75</span>, <span class="number">75</span>)</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">122</span>), plt.imshow(blur), plt.title(<span class="string">'bilateralFilter'</span>)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="形态转换"><a href="#形态转换" class="headerlink" title="形态转换"></a>形态转换</h2><ol><li>侵蚀、膨胀、开运算、闭运算</li></ol><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>形态变换是一些基于图像形状的简单操作。通常在二进制图像上执行。需要两个输入，一个是原始图像，第二个是决定<strong>操作性质的结构元素</strong>或<strong>内核</strong>。两种基本的形态学算子是侵蚀和膨胀。然后，他的变体形式也开始起作用。</p><h4 id="侵蚀"><a href="#侵蚀" class="headerlink" title="侵蚀"></a>侵蚀</h4><p>侵蚀前景物体的边界（尽量使前景保持白色）。内核滑动通过图像（在2D卷积中）。原始图像中的一个像素（无论是1还是0）只有当内核下的所有像素都是1时才被认为是1，否则它就会被侵蚀（变成0）。结果是，根据内核的大小，边界附近的所有像素都会被丢弃。因此，前景物体的厚度或大小减小，或只是图像中的白色区域减小。它有助于去除小的白色噪声，分离两个连接的对象等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">improt cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">    kernel = np.ones((<span class="number">5</span>, <span class="number">5</span>), np.uint8)    <span class="comment">#使用一个5x5内核</span></span><br><span class="line">    erosion = cv.erode(img, kernel, iterations = <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">"img"</span>, img)</span><br><span class="line">    cv.imshow(<span class="string">"erode"</span>, erosion)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="扩张"><a href="#扩张" class="headerlink" title="扩张"></a>扩张</h4><p>与侵蚀相反。若内核下的至少一个像素为1，则像素元素为1。因此，他会增加图像中的白色区域或增加前景对象的大小。通常，在消除噪音的情况下，腐蚀后会膨胀。因为腐蚀会消除白噪音，但也会缩小物体。因此对其进行扩展。由于噪音消失了，它们不会回来，但是我们的目标区域增加了。在连接对象的损坏部分时也很有用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">    kerel = np.ones((<span class="number">5</span>, <span class="number">5</span>), np.uint8)    <span class="comment">#使用一个5x5内核</span></span><br><span class="line">    dilation = cv.dilate(img, kernel, iterations = <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">"img"</span>, img)</span><br><span class="line">    cv.imshow(<span class="string">"dilation"</span>, dilation)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="开运算"><a href="#开运算" class="headerlink" title="开运算"></a>开运算</h4><p>开放只是<strong>侵蚀然后扩张</strong>的另一个名称。对于消除噪音很有用。使用函数<strong>cv.morphologyEx()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">    kerel = np.ones((<span class="number">5</span>, <span class="number">5</span>), np.uint8)    <span class="comment">#使用一个5x5内核</span></span><br><span class="line">    opening = cv.morphologyEx(img, cv.MORPH_OPEN, kernel)</span><br><span class="line">    cv.imshow(<span class="string">"img"</span>, img)</span><br><span class="line">    cv.imshow(<span class="string">"open"</span>, opening)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="闭运算"><a href="#闭运算" class="headerlink" title="闭运算"></a>闭运算</h4><p><strong>先扩张再侵蚀</strong>。在关闭前景对象内部的小孔或对象上的小黑点时很有用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">    kerel = np.ones((<span class="number">5</span>, <span class="number">5</span>), np.uint8)    <span class="comment">#使用一个5x5内核</span></span><br><span class="line">    closing = cv.morphologyEx(img, cv.MORPH_CLOSE, kernel)</span><br><span class="line">    cv.imshow(<span class="string">"img"</span>, img)</span><br><span class="line">    cv.imshow(<span class="string">"close"</span>, closing)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="形态学梯度"><a href="#形态学梯度" class="headerlink" title="形态学梯度"></a>形态学梯度</h4><p>这是扩张和侵蚀之间的区别，结果看起来像对象的轮廓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">    kerel = np.ones((<span class="number">5</span>, <span class="number">5</span>), np.uint8)    <span class="comment">#使用一个5x5内核</span></span><br><span class="line">    gradient = cv.morphologyEx(img, cv.MORPH_GRADIENT, kernel)</span><br><span class="line">    cv.imshow(<span class="string">"img"</span>, img)</span><br><span class="line">    cv.imshow(<span class="string">"gradient"</span>, gradient)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="顶帽"><a href="#顶帽" class="headerlink" title="顶帽"></a>顶帽</h4><p>它是输入图像和图像开运算之差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">    kerel = np.ones((<span class="number">9</span>, <span class="number">9</span>), np.uint8)    <span class="comment">#使用一个9x9内核</span></span><br><span class="line">    tophat = cv.morphologyEx(img, cv.MORPH_TOPHAT, kernel)</span><br><span class="line">    cv.imshow(<span class="string">"img"</span>, img)</span><br><span class="line">    cv.imshow(<span class="string">"tophat"</span>, tophat)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="黑帽"><a href="#黑帽" class="headerlink" title="黑帽"></a>黑帽</h4><p>这是输入图像和图像闭运算之差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">    kerel = np.ones((<span class="number">5</span>, <span class="number">5</span>), np.uint8)    <span class="comment">#使用一个5x5内核</span></span><br><span class="line">    blackhat = cv.morphologyEx(img, cv.MORPH_BLACKHAT, kernel)</span><br><span class="line">    cv.imshow(<span class="string">"img"</span>, img)</span><br><span class="line">    cv.imshow(<span class="string">"blackhat"</span>, blackhat)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="结构元素"><a href="#结构元素" class="headerlink" title="结构元素"></a>结构元素</h3><p>在Numpy的帮助下，我们在前面的示例中手动创建了一个结构元素，它是矩形。但是在某些情况下，可能需要椭圆形/圆形的内核。因此，OpenCV具有一个函数<strong>cv.getStructuringElement()</strong>，只需要传递内核的形状和大小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩形内核</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cv.getStructuringElement(cv.MORPH_RECT,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], dtype=uint8)</span><br><span class="line"><span class="comment"># 椭圆内核</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cv.getStructuringElement(cv.MORPH_ELLIPSE,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]], dtype=uint8)</span><br><span class="line"><span class="comment"># 十字内核</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cv.getStructuringElement(cv.MORPH_CROSS,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]], dtype=uint8)</span><br></pre></td></tr></table></figure><h2 id="图像梯度"><a href="#图像梯度" class="headerlink" title="图像梯度"></a>图像梯度</h2><ol><li>如何查找图像梯度、边缘<strong>cv.Sobel()</strong>、<strong>cv.Scharr()</strong>、<strong>cv.Laplacian()</strong>等</li></ol><h3 id="理论-1"><a href="#理论-1" class="headerlink" title="理论"></a>理论</h3><p>OpenCV提供三种类型的梯度滤波器或高通滤波器，即<code>Sobel</code>、<code>Scharr</code>和<code>Laplacian</code></p><h4 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a>Sobel算子</h4><p>Sobel算子是高斯平滑加微分运算的联合运算，因此它更抗噪声。可以指定要采用的导数方向，垂直或水平（分别通过参数yorder和xorder）。还可以通过参数ksize指定内核的大小。</p><p>边界检测，</p><script type="math/tex; mode=display">G_x=\begin{bmatrix}-1&0&1\\-2&0&2\\-1&0&1\end{bmatrix}\times\begin{bmatrix}P1&P2&P3\\P4&P5&P6\\P7&P8&P9\end{bmatrix}</script><script type="math/tex; mode=display">G_Y=\begin{bmatrix}-1&-2&-1\\0&0&0\\1&2&1\end{bmatrix}\times\begin{bmatrix}P1&P2&P3\\P4&P5&P6\\P7&P8&P9\end{bmatrix}</script><p>计算近似梯度：</p><script type="math/tex; mode=display">G=\sqrt{(G_x)^2+(G_y)^2}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'test.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">    sobelx = cv.Sobel(img, cv.CV_64F, <span class="number">1</span>, <span class="number">0</span>, ksize=<span class="number">5</span>) <span class="comment">#x</span></span><br><span class="line">    sobelx = cv.convertScaleAbs(sobelx) <span class="comment">#调整为绝对值，配合cv.CV_64F用，不然就只有右面的边界了</span></span><br><span class="line">    sobely = cv.Sobel(img, cv.CV_64F, <span class="number">0</span>, <span class="number">1</span>, ksize=<span class="number">5</span>) <span class="comment">#y</span></span><br><span class="line">    sobely = cv.convertScaleAbs(sobely)</span><br><span class="line">    sobelxy =cv.addWeighted(sobelx, <span class="number">0.5</span>, sobely, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    sobelxy11 = cv.Sobel(img, cv.CV_64F, <span class="number">1</span>, <span class="number">1</span>, ksize=<span class="number">5</span>) <span class="comment"># x,y  不能同时设为1,1 效果不行</span></span><br><span class="line">    sobelxy11 = cv.convertScaleAbs(sobelxy11)</span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>), plt.imshow(img, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Original'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>), plt.imshow(sobelx, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Sobel X'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>), plt.imshow(sobely, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Sobel Y'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>), plt.imshow(sobelxy, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Sobel XY'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>), plt.imshow(sobelxy11, cmap=<span class="string">'gray'</span>) <span class="comment"># 效果就不行</span></span><br><span class="line">    plt.title(<span class="string">'Sobel XY11'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show(</span><br></pre></td></tr></table></figure><h4 id="Scharr算子"><a href="#Scharr算子" class="headerlink" title="Scharr算子"></a>Scharr算子</h4><p>若ksize=-1，则使用3x3 Scharr滤波器，比3x3 Sobel滤波器具有更好的结果</p><script type="math/tex; mode=display">sobel算子\\G_x=\begin{bmatrix}-1&0&1\\-2&0&2\\-1&0&1\end{bmatrix},G_y=\begin{bmatrix}-1&-2&-1\\0&0&0\\1&2&1\end{bmatrix}\\scharr算子\\G_x=\begin{bmatrix}-3&0&3\\-10&0&10\\-3&0&3\end{bmatrix},G_y=\begin{bmatrix}-3&-10&-3\\0&0&0\\3&10&3\end{bmatrix}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'images/aaa.jpg'</span>, cv.IMREAD_GRAYSCALE)</span><br><span class="line">    scharrx = cv.Scharr(img, cv.CV_64F, <span class="number">1</span>, <span class="number">0</span>)  <span class="comment"># x ==等价于 cv.Sobel(img, cv.CV_64F, 1, 0,ksize=-1)</span></span><br><span class="line">    scharrx = cv.convertScaleAbs(scharrx)  <span class="comment"># 调整为绝对值，配合cv.CV_64F 用,不然就只有右面的边界了</span></span><br><span class="line">    scharry = cv.Scharr(img, cv.CV_64F, <span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># y</span></span><br><span class="line">    scharry = cv.convertScaleAbs(scharry)</span><br><span class="line">    scharrxy = cv.addWeighted(scharrx, <span class="number">0.5</span>, scharry, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>), plt.imshow(img, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Original'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), plt.imshow(scharrx, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Scharr X'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>), plt.imshow(scharry, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Scharr Y'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>), plt.imshow(scharrxy, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Scharr XY'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h4 id="Laplacian算子"><a href="#Laplacian算子" class="headerlink" title="Laplacian算子"></a>Laplacian算子</h4><p>它计算了由关系</p><script type="math/tex; mode=display">\Delta src=\frac{\partial^2src}{\partial x^2}+\frac{\partial^2src}{\partial y^2}</script><p>给出的图像的拉普拉斯图，它是每一阶导数通过Sobel算子计算。若<code>ksize=1</code>，然后使用以下内核用于过滤：</p><script type="math/tex; mode=display">kernel=\begin{bmatrix}0&1&0\\1&-4&1\\0&1&0\end{bmatrix}</script><script type="math/tex; mode=display">Sobel算子\\G_x=\begin{bmatrix}-1&0&1\\-2&0&2\\-1&0&1\end{bmatrix},G_y=\begin{bmatrix}-1&-2&-1\\0&0&0\\1&2&1\end{bmatrix}\\Scharr算子\\G_x=\begin{bmatrix}-3&0&3\\-10&0&10\\-3&0&3\end{bmatrix},G_y=\begin{bmatrix}-3&-10&-3\\0&0&0\\3&10&3\end{bmatrix}\\Laplacian算子\\\begin{bmatrix}0&1&0\\1&-4&1\\0&1&0\end{bmatrix}</script><ul><li>一阶导数：<ul><li>Sobel算子 = |左 - 右|+|下 - 上|</li><li>Scharr算子 = |左 - 右|+|下 - 上|</li></ul></li><li>二阶导数：<ul><li>Laplacian算子 = |左 - 右|+|左 - 右|+|下 - 上|+|下 - 上|</li></ul></li></ul><p>Laplacian算子之所以是二阶导数，是因为在同一方向上进行了两次操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'images/aaa.jpg'</span>, cv.IMREAD_GRAYSCALE)</span><br><span class="line">    laplacian = cv.Laplacian(img, cv.CV_64F)</span><br><span class="line">    laplacian = cv.convertScaleAbs(laplacian) </span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>), plt.imshow(img, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Original'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), plt.imshow(laplacian, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Laplacian'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h3 id="一个重要事项"><a href="#一个重要事项" class="headerlink" title="一个重要事项"></a>一个重要事项</h3><p>黑色到白色的过渡被视为正斜率（具有正值），而白色到黑色的过渡被视为负斜率（具有负值）。因此，当将数据转换为np.uint8时，所有负斜率均设为零。简而言之，会错过这一边缘信息。</p><p>如果要检测两个边缘，更好的选择是将输出数据类型保留为更高的形式，例如<code>cv.CV_16S</code>，<code>cv.CV_64F</code>等，取其绝对值，然后转换回<code>cv.CV_8U</code>。 下面的代码演示了用于水平Sobel滤波器和结果差异的此过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'box.png'</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># Output dtype = cv.CV_8U</span></span><br><span class="line">    sobelx8u = cv.Sobel(img,cv.CV_8U,<span class="number">1</span>,<span class="number">0</span>,ksize=<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># Output dtype = cv.CV_64F. Then take its absolute and convert to cv.CV_8U</span></span><br><span class="line">    sobelx64f = cv.Sobel(img,cv.CV_64F,<span class="number">1</span>,<span class="number">0</span>,ksize=<span class="number">5</span>)</span><br><span class="line">    abs_sobel64f = np.absolute(sobelx64f)</span><br><span class="line">    sobel_8u = np.uint8(abs_sobel64f)</span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>),plt.imshow(img,cmap = <span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Original'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>),plt.imshow(sobelx8u,cmap = <span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Sobel CV_8U'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>),plt.imshow(sobel_8u,cmap = <span class="string">'gray'</span>)</span><br><span class="line">    plt.title(<span class="string">'Sobel abs(CV_64F)'</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="Canny边缘检测"><a href="#Canny边缘检测" class="headerlink" title="Canny边缘检测"></a>Canny边缘检测</h2><h3 id="理论-2"><a href="#理论-2" class="headerlink" title="理论"></a>理论</h3><p>Candy Edge Detection是一种流行的边缘检测算法，四个步骤</p><h4 id="降噪"><a href="#降噪" class="headerlink" title="降噪"></a>降噪</h4><p>由于边缘检测容易受到图像中噪声的影响，因此第一步是使用5x5高斯滤波器消除图像中的噪声</p><h4 id="查看图像的强度梯度"><a href="#查看图像的强度梯度" class="headerlink" title="查看图像的强度梯度"></a>查看图像的强度梯度</h4><p>使用Sobel核在水平和垂直方向上对平滑的图像进行滤波，以在水平方向和垂直方向上获得一阶导数。梯度方向一般总是与边界垂直。梯度方向被归为四类：垂直、水平、和两个对角线</p><script type="math/tex; mode=display">Edge\_Gradient \; (G) = \sqrt{G_x^2 + G_y^2} \\ Angle \; (\theta) = \tan^{-1} \bigg(\frac{G_y}{G_x}\bigg)</script><h4 id="非极大值抑制"><a href="#非极大值抑制" class="headerlink" title="非极大值抑制"></a>非极大值抑制</h4><p>在获得梯度大小和方向后，将对图像进行全面扫描，以去除可能不构成边缘的所有不需要的像素。为此，在每个像素处，检查像素是否是其在梯度方向上附近的局部最大值。</p><h4 id="磁滞阈值"><a href="#磁滞阈值" class="headerlink" title="磁滞阈值"></a>磁滞阈值</h4><p>该阶段确定哪些边缘全部是真正的边缘。为此，需要两个阈值<code>minVal</code>和<code>maxVal</code>。强度梯度大于maxVal的任何边缘必定是边缘，而小于minVal的那些边缘必定是非边缘，因此将其丢弃。介于这两个阈值之间的对象根据其连通性被分类为边缘或非边缘。若将它们连接到“边缘”像素，则将它们视为边缘的一部分。否则，它们也将被丢弃</p><p><img src="/2022/07/09/OpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/shuangyuzhi.png" alt></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的C语言学习笔记</title>
      <link href="/2022/06/29/%E6%88%91%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/29/%E6%88%91%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>写在前面的话：<br>以下为作者在学习c语言时所遇到的问题<br><span id="more"></span></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><h3 id="一维动态数组"><a href="#一维动态数组" class="headerlink" title="一维动态数组"></a>一维动态数组</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;<span class="comment">//数组长度</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="type">int</span> *arr;<span class="comment">//数组的头指针</span></span><br><span class="line">arr=(<span class="type">int</span> *)<span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="type">int</span>));<span class="comment">//开辟n个大小为int类型的数组</span></span><br></pre></td></tr></table></figure><h3 id="二维动态数组"><a href="#二维动态数组" class="headerlink" title="二维动态数组"></a>二维动态数组</h3><h1 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h1><p>计算机对于数据的处理都是以<code>补码</code>的形式进行的</p><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">描述</th><th style="text-align:left">运算规则</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">按位与</td><td style="text-align:left">两个位都为1时，结果才为1</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center"></td><td style="text-align:left">按位或</td><td>两个位都为0时，结果才为0</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">按位异或</td><td style="text-align:left">两个位相同为0，相异为1</td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">按位取反</td><td style="text-align:left">0变1，1变0</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">左移</td><td style="text-align:left">各二进位全部左移若干位，高位丢弃，低位补0</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">右移</td><td style="text-align:left">各二进位全部右移若干位。无符号数，高位补0；有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</td></tr></tbody></table></div><p>注意事项</p><ol><li>只有~取反是单目操作符，其他都是双目操作符</li><li>位操作只能用于整型数据</li><li>位操作符的运算优先级比较低，因此尽量使用括号来确保运算顺序</li><li>有符号数负数的右移，不同系统的处理方式不一样，有高位补1的，也有高位补0的</li><li>复合操作符，&amp;=、|=、^=、&lt;&lt;=、&gt;&gt;=。</li></ol><h2 id="常用位操作小技巧"><a href="#常用位操作小技巧" class="headerlink" title="常用位操作小技巧"></a>常用位操作小技巧</h2><h3 id="判断奇偶"><a href="#判断奇偶" class="headerlink" title="判断奇偶"></a>判断奇偶</h3><p>奇数的最低位为1，偶数最低位为0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="type">int</span> flag = a &amp; <span class="number">1</span>; <span class="comment">//取最低位数字</span></span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;奇数\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;偶数\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交换两数"><a href="#交换两数" class="headerlink" title="交换两数"></a>交换两数</h3><p>不用第三变量实现两数的交换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入整数a,b:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">if</span> (a != b)</span><br><span class="line">    &#123;</span><br><span class="line">        a ^= b;</span><br><span class="line">        b ^= a;</span><br><span class="line">        a ^= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变换符号"><a href="#变换符号" class="headerlink" title="变换符号"></a>变换符号</h3><p>二进制取反加1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入a=&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    a = ~a + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-a=%d&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求绝对值"><a href="#求绝对值" class="headerlink" title="求绝对值"></a>求绝对值</h3><p>方法一：对符号位进行判断正负。符号位为0，则不变；符号位为1，则取反加1</p><p>方法二：取符号位，与符号位进行异或运算，再减去符号位</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入a=&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="type">int</span> i = (a &gt;&gt; <span class="number">31</span>);<span class="comment">//取符号位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|a|=%d&quot;</span>, (a ^ i) - i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字节的高低位交换"><a href="#字节的高低位交换" class="headerlink" title="字节的高低位交换"></a>字节的高低位交换</h2><h3 id="移位操作"><a href="#移位操作" class="headerlink" title="移位操作"></a>移位操作</h3><p>对原字节通过移位操作来逐位处理，然后再用另外一个变量存储交换后的结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">Reverse_byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> temp = <span class="number">0x00</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">char</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">temp=((data&gt;&gt;i)&amp;<span class="number">0x01</span>)|temp;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp=temp&lt;&lt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蝶式交换法"><a href="#蝶式交换法" class="headerlink" title="蝶式交换法"></a>蝶式交换法</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">unsigned</span> char <span class="type">Reverse_byte</span>(unsigned char <span class="class"><span class="keyword">data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">data</span>=(<span class="title">data</span>&lt;&lt;4)|(<span class="title">data</span>&gt;&gt;4);</span></span><br><span class="line"><span class="class"><span class="keyword">data</span>=((<span class="title">data</span>&lt;&lt;2)&amp;0xcc)|((<span class="title">data</span>&gt;&gt;2)&amp;0x33);</span></span><br><span class="line"><span class="class"><span class="keyword">data</span>=((<span class="title">data</span>&lt;&lt;1)&amp;0xaa)|((<span class="title">data</span>&gt;&gt;1)&amp;0x55);</span></span><br><span class="line">return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="十进制输入，二进制输出"><a href="#十进制输入，二进制输出" class="headerlink" title="十进制输入，二进制输出"></a>十进制输入，二进制输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printInBinary</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0b &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">31</span>; ~i; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="built_in">putchar</span>((x &gt;&gt; i &amp; <span class="number">1</span>) + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please input a decimal integer.&quot;</span>);</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="built_in">printInBinary</span>(x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二进制输入，十进制-十六进制输出"><a href="#二进制输入，十进制-十六进制输出" class="headerlink" title="二进制输入，十进制/十六进制输出"></a>二进制输入，十进制/十六进制输出</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 链表</span><br><span class="line"></span><br><span class="line">定义(以下使用的链表皆为此定义的链表)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>//Definition for singly-linked list<br>struct ListNode<br>{<br>    int val;<br>    struct ListNode *next;<br>};<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 创建链表</span><br><span class="line"></span><br><span class="line">### 顺序存储</span><br><span class="line"></span><br><span class="line">把新结点作为尾结点插入到链表尾部，按输入顺序顺序存储</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <stdio.h></stdio.h></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include "></a>include <stdlib.h></stdlib.h></h1><h1 id="include-2"><a href="#include-2" class="headerlink" title="include "></a>include <string.h></string.h></h1><p>struct ListNode<br>{<br>    int val;<br>    struct ListNode <em>next;<br>};<br>void printListNode(struct ListNode </em>head)<br>{<br>    while (head != NULL)<br>    {<br>        printf(“%d-&gt;”, head-&gt;val);<br>        head = head-&gt;next;<br>    }<br>    if(head==NULL) printf(“NULL\n”);<br>}<br>int main()<br>{<br>    int num;<br>    struct ListNode <em>head = NULL, </em>pre, <em>p;<br>    while (scanf(“%d-&gt;”, &amp;num) == 1)<br>    {<br>        p = (struct ListNode </em>)malloc(sizeof(struct ListNode)); //分配新结点<br>        if (p == NULL)<br>            exit(0); //分配失败<br>        p-&gt;val = num;//给数据域赋值<br>        p-&gt;next = NULL;<br>        if (head == NULL)<br>            head = p;<br>        else<br>            pre-&gt;next = p;<br>        pre = p;<br>    }<br>    printListNode(head);<br>    return 0;<br>}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 逆序存储</span><br><span class="line"></span><br><span class="line">把新结点作为头结点插入到链表头部，按输入顺序逆序存储</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="include-3"><a href="#include-3" class="headerlink" title="include "></a>include <stdio.h></stdio.h></h1><h1 id="include-4"><a href="#include-4" class="headerlink" title="include "></a>include <stdlib.h></stdlib.h></h1><h1 id="include-5"><a href="#include-5" class="headerlink" title="include "></a>include <string.h></string.h></h1><p>struct ListNode<br>{<br>    int val;<br>    struct ListNode <em>next;<br>};<br>void printListNode(struct ListNode </em>head)<br>{<br>    while (head != NULL)<br>    {<br>        printf(“%d-&gt;”, head-&gt;val);<br>        head = head-&gt;next;<br>    }<br>    if(head==NULL) printf(“NULL\n”);<br>}<br>int main()<br>{<br>    int x;<br>    struct ListNode <em>head = NULL, </em>p;<br>    while (scanf(“%d-&gt;”, &amp;x) == 1)<br>    {<br>        p = (struct ListNode <em>)malloc(sizeof(struct ListNode));<br>        if (p == NULL)<br>            exit(0); //分配失败<br>        p-&gt;val = x;<br>        p-&gt;next = NULL;<br>        if (head == NULL)<br>            head = p;<br>        else<br>        {<br>            p-&gt;next = head;<br>            head = p;<br>        }<br>    }<br>    printListNode(head);<br>    return 0;<br>}<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># 文件操作</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 栈的基本操作</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**栈**</span>(stack) 是限定仅在<span class="strong">**表尾**</span>进行插入或删除操作的线性表，表尾—<span class="strong">**栈顶**</span>，表头—<span class="strong">**栈底**</span>，不含元素的空表称空栈。栈的特点：最先放入栈中的元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除，即<span class="strong">**先进后出**</span>。</span><br><span class="line"></span><br><span class="line"><span class="section">## 顺序栈</span></span><br><span class="line"></span><br><span class="line">栈的顺序存储结构，用一组连续的存储单元依次存放栈中的每个数据元素，类似于数组</span><br><span class="line"></span><br><span class="line"><span class="strong">**约定：栈底指针存放空间的起始地址，栈顶指针指向栈顶元素的下一个位置**</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>//构造顺序栈数据类型<br>typedef int Sint;<br>//构造顺序栈的结构体<br>typedef struct Slist<br>{<br>    Sint </em>base;    //栈底指针<br>    Sint *top;     //栈顶指针<br>    int scapacity; //栈容量<br>} Slist;<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 初始化</span><br><span class="line"></span><br><span class="line">创建一个空栈</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>//宏定义一个栈容量</p><h1 id="define-Slist-max-size-100"><a href="#define-Slist-max-size-100" class="headerlink" title="define Slist_max_size 100;"></a>define Slist_max_size 100;</h1><p>//初始化栈<br>void<br>InitSlist(Slist <em>list)<br>{<br>    list-&gt;base = (Sint </em>)malloc(sizeof(Sint));<br>    if (!list-&gt;base)<br>        exit(0); //分配失败<br>    else<br>    {<br>        list-&gt;top = list-&gt;base;<br>        list-&gt;scapacity = Slist_max_size;<br>        printf(“初始化成功\n”);<br>    }<br>}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 进栈</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>//进栈<br>void push(Slist <em>list, Sint data)<br>{<br>    //判栈满<br>    if (list-&gt;top == list-&gt;base + list-&gt;scapacity)<br>    {<br>        printf(“栈满了！\n”);<br>    }<br>    else<br>    {        </em>(list-&gt;top) = data;<br>        list-&gt;top++;<br>    }<br>}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 出栈</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>//出栈<br>Sint pop(Slist <em>list)<br>{<br>    //判栈空<br>    if (list-&gt;top == list-&gt;base)<br>    {<br>        printf(“空栈！\n”);<br>        return 0;<br>    }<br>    else<br>    {<br>        list-&gt;top—;<br>        return </em>(list-&gt;top);<br>    }<br>}<br>```</p><h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><h1 id="队列的基本操作"><a href="#队列的基本操作" class="headerlink" title="队列的基本操作"></a>队列的基本操作</h1><p>队列是限定仅在一端进行插入，而在另一端进行删除操作的线性表</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》学习笔记</title>
      <link href="/2022/03/30/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/30/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>写在前面的话：<br>本文是《数据结构(c语言版)》的学习笔记<br><span id="more"></span></p><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性结构的特点：在数据元素的非空有限集中</p><ol><li>存在唯一的一个被称作“第一个”的数据元素</li><li>存在唯一的一个被称作“最后一个”的数据元素</li><li>除第一个之外，每个数据元素均只有一个前驱</li><li>除最后一个之外，每个数据元素均只有一个后继</li></ol><h2 id="线性表的类型定义"><a href="#线性表的类型定义" class="headerlink" title="线性表的类型定义"></a>线性表的类型定义</h2><p>抽象数据类型线性表的定义如下：</p><p>​    <strong>ADT List{</strong></p><p>​            数据对象：D = { ai|ai∈ElemSet , i=1,2,…,n, n&gt;=0 }</p><p>​            数据关系：R1 = { <ai-1 , ai>|ai-1 , ai∈D , i=2,…,n }</ai-1></p><p>​            基本操作：</p><div class="table-container"><table><thead><tr><th><strong>InitList(&amp;L)</strong></th><th>构造一个空的线性表L</th></tr></thead><tbody><tr><td><strong>DestroyList(&amp;L)</strong></td><td>将已存在的线性表L销毁</td></tr><tr><td><strong>ClearList(&amp;L)</strong></td><td>将已存在的线性表L重置为空表</td></tr><tr><td><strong>ListEmpty(L)</strong></td><td>若已存在的线性表L为空表，则返回TRUE，否则返回FALSE</td></tr><tr><td><strong>ListLength(L)</strong></td><td>返回已存在的线性表L中的数据元素的个数</td></tr><tr><td><strong>GetElem(L,j,&amp;e)</strong></td><td>用e返回线性表L中的第j个数据元素的值</td></tr><tr><td><strong>LocateElem(L,e,compare())</strong></td><td>返回线性表L中第一个与e满足关系compare()的数据元素的位序。若不存在，则返回值为0</td></tr><tr><td><strong>PriorElem(L,cur_e,&amp;pre_e)</strong></td><td>若cur_e是L的数据元素，且不是第一个，则用pre_e返回它的前驱，否则操作失败，pre_e无定义</td></tr><tr><td><strong>NextElem(L,cur_e,&amp;next_e)</strong></td><td>若cur_e是L的数据元素，且不是最后一个，则用next_e返回它的后继，否则操作失败，next_e无定义</td></tr><tr><td><strong>ListInsert(&amp;L,j,e)</strong></td><td>在L中第j个位置之前插入新的数据元素e，L的长度加1</td></tr><tr><td><strong>ListDelete(&amp;L,j,&amp;e)</strong></td><td>删除L的第j个数据元素，并用e返回其值，L的长度减1</td></tr><tr><td><strong>ListTraverse(L,visit())</strong></td><td>依次对L的每个数据元素调用函数visit()。一旦visit()失败，则操作失败</td></tr></tbody></table></div><p>​            <strong>}ADT List</strong></p><p>（算法2.1）求两个集合的并集</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">union</span><span class="params">(List &amp;La, List Lb)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//将所有在线性表Lb中但不在La中的数据元素插入到La中</span></span><br><span class="line">    La_len = ListLength(La);</span><br><span class="line">    Lb_len = ListLength(Lb); <span class="comment">//求线性表的长度</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= Lb_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        GetElem(Lb, i, e); <span class="comment">//取Lb中第i个数据元素赋给e</span></span><br><span class="line">        <span class="keyword">if</span>(!LocateElem(La,e,equal( )) ListInsert(La,++La_len,e);</span><br><span class="line">        <span class="comment">// La中不存在和e相同的数据元素，则插入之</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// unio</span></span><br></pre></td></tr></table></figure><p>（算法2.2）将两个有序线性表归并到新的有序线性表</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">void <span class="constructor">MergeList(List La, List Lb, List &amp;Lc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//已知线性表La和Lb中的数据元素按值非递减排列</span></span><br><span class="line">    <span class="comment">//归并La和Lb得到新的线性表Lc，Lc的数据元素也按值非递减排列</span></span><br><span class="line">    <span class="constructor">InitList(Lc)</span>;</span><br><span class="line">    i = j = <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    La_len = <span class="constructor">ListLength(La)</span>;</span><br><span class="line">    Lb_len = <span class="constructor">ListLength(Lb)</span>;</span><br><span class="line">    <span class="keyword">while</span> ((i &lt;= La_len)<span class="operator"> &amp;&amp; </span>(j &lt;= Lb_len)) <span class="comment">// La和Lb均非空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="constructor">GetElem(La, <span class="params">i</span>, <span class="params">ai</span>)</span>;</span><br><span class="line">        <span class="constructor">GetElem(Lb, <span class="params">j</span>, <span class="params">bj</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (ai &lt;= bj)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="constructor">ListInsert(Lc, <span class="operator">++</span><span class="params">k</span>, <span class="params">ai</span>)</span>;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="constructor">ListInsert(Lc, <span class="operator">++</span><span class="params">k</span>, <span class="params">bj</span>)</span>;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= La_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="constructor">GetElem(La, <span class="params">i</span><span class="operator">++</span>, <span class="params">ai</span>)</span>;</span><br><span class="line">        <span class="constructor">ListInsert(Lc, <span class="operator">++</span><span class="params">k</span>, <span class="params">ai</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= Lb_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="constructor">GetElem(Lb, <span class="params">j</span><span class="operator">++</span>, <span class="params">bj</span>)</span>;</span><br><span class="line">        <span class="constructor">ListInsert(Lc, <span class="operator">++</span><span class="params">k</span>, <span class="params">bj</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// MergeList</span></span><br></pre></td></tr></table></figure><h2 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h2><p>线性表的<strong>顺序表示</strong>指的是用一组<strong>地址连续的存储单元</strong>依次存储线性表的数据元素。这样的线性表的第一个数据元素的存储位置称做线性表的<strong>起始位置</strong>或<strong>基地址</strong>。线性表的这种机内表示称做线性表的<strong>顺序存储结构</strong>或<strong>顺序映像</strong>(sequential mapping)，通常称这种存储结构的线性表为<strong>顺序表</strong>。它的特点是，为表中相邻的元素赋以相邻的存储位置。由于只要确定了基地址，就可以对任一数据元素随机存取，所以线性表的顺序存储结构是一种<strong>随机存取</strong>的存储结构。这个特点也铸成这种存储结构的弱点：在作插入或删除操作时，需要移动大量元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------线性表的动态分配顺序存储结构-----------</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_INIT_SIZE 100 <span class="comment">//线性表存储空间的初始分配量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LISTINCREMENT 10   <span class="comment">//线性表存储空间的分配增量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType *elem; <span class="comment">//存储空间基址</span></span><br><span class="line">    <span class="type">int</span> length;     <span class="comment">//当前长度</span></span><br><span class="line">    <span class="type">int</span> listsize;   <span class="comment">//当前分配的存储容量(以sizeof(ElemType)为单位)</span></span><br><span class="line">&#125; SqList;</span><br></pre></td></tr></table></figure><p>顺序表的初始化操作就是为顺序表分配一个预定义大小的数组空间，并将线性表的长度设为“0”。</p><p>（算法2.3）构造一个空的顺序表</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Status InitList_Sq(SqList &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>构造一个空的线性表L</span><br><span class="line">    L.elem = (ElemType *)malloc(LIST_INIT_SIZE * sizeof(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!L.elem)</span><br><span class="line">        <span class="keyword">exit</span>(OVERFLOW);          <span class="regexp">//</span>存储分配失败</span><br><span class="line">    L.length = <span class="number">0</span>;                <span class="regexp">//</span>空表长度为<span class="number">0</span></span><br><span class="line">    L.listsize = LIST_INIT_SIZE; <span class="regexp">//</span>初始存储容量</span><br><span class="line">    return OK;</span><br><span class="line">&#125; <span class="regexp">//</span> InitList_Sq</span><br></pre></td></tr></table></figure><p>（算法2.4）在顺序表中插入元素</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Status ListInsert_Sq(SqList &amp;L, int i, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>在顺序线性表L中第i个位置之前插入新的元素e</span><br><span class="line">    <span class="regexp">//</span> i的合法值为<span class="number">1</span>&lt;=i&lt;=ListLength_Sq(L)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>)</span><br><span class="line">        return ERROR; <span class="regexp">//</span> i值不合法</span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= L.listsize)</span><br><span class="line">    &#123; <span class="regexp">//</span>当前存储空间已满，增加分配</span><br><span class="line">        newbase = (ElemType *)realloc(L.elem, (L.listsize + LISTINCREMENT) * sizeof(ElemType));</span><br><span class="line">        <span class="keyword">if</span> (!newbase)</span><br><span class="line">            <span class="keyword">exit</span>(OVERFLOW);          <span class="regexp">//</span>存储分配失败</span><br><span class="line">        L.elem = newbase;            <span class="regexp">//</span>新基址</span><br><span class="line">        L.listsize += LISTINCREMENT; <span class="regexp">//</span>增加存储容量</span><br><span class="line">    &#125;</span><br><span class="line">    q = &amp;(L.elem[i - <span class="number">1</span>]); <span class="regexp">//</span> q为插入位置</span><br><span class="line">    <span class="keyword">for</span> (p = &amp;(L.elem[L.length - <span class="number">1</span>]); p &gt;= q; --p)</span><br><span class="line">        *(p + <span class="number">1</span>) = *p; <span class="regexp">//</span>插入位置及之后的元素右移</span><br><span class="line">    *q = e;            <span class="regexp">//</span>插入e</span><br><span class="line">    ++L.length;        <span class="regexp">//</span>表长增<span class="number">1</span>；</span><br><span class="line">    return OK;</span><br><span class="line">&#125; <span class="regexp">//</span> ListInsert_Sq</span><br></pre></td></tr></table></figure><p>（算法2.5）在顺序表中删除元素</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status ListDelete_S<span class="string">q(SqList &amp;L, int i, ElemType &amp;e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>在顺序线性表L中删除第i个元素，并用e返回其值</span><br><span class="line">    // i的合法值为<span class="number">1</span>&lt;=i&lt;=ListLength_S<span class="string">q(L)</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;          <span class="regexp">//</span> i值不合法</span><br><span class="line">    p = &amp;(L.elem[i - <span class="number">1</span>]);      <span class="regexp">//</span> p为被删除元素的位置</span><br><span class="line">    e = *p;                    <span class="regexp">//</span>被删除元素的值赋给e</span><br><span class="line">    <span class="keyword">q</span> = L.elem + L.length - <span class="number">1</span>; <span class="regexp">//</span>表尾元素的位置</span><br><span class="line">    <span class="keyword">for</span> (++p; p &lt;= <span class="keyword">q</span>; ++p)</span><br><span class="line">        *(p - <span class="number">1</span>) = *p; <span class="regexp">//</span>被删除元素之后的元素左移</span><br><span class="line">    --L.length;        <span class="regexp">//</span>表长减<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125; // ListDelete_Sq</span><br></pre></td></tr></table></figure><p>（算法2.6）在顺序表中查找元素</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="constructor">LocateElem_Sq(SqList L, ElemType <span class="params">e</span>, Status (<span class="operator">*</span><span class="params">compare</span>)</span>(ElemType, ElemType))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在顺序线性表L中查找第1个值与e满足compare()的元素的位序</span></span><br><span class="line">    <span class="comment">//若找到，则返回其在L中的位序，否则返回0</span></span><br><span class="line">    i = <span class="number">1</span>;      <span class="comment">// i的初值为第一个元素的位序</span></span><br><span class="line">    p = <span class="module-access"><span class="module"><span class="identifier">L</span>.</span></span>elem; <span class="comment">// p的初值为第一个元素的存储位置</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="module-access"><span class="module"><span class="identifier">L</span>.</span></span>length<span class="operator"> &amp;&amp; </span>!(*compare)(*p++, e))</span><br><span class="line">        ++i;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="module-access"><span class="module"><span class="identifier">L</span>.</span></span>length)</span><br><span class="line">        return i;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        return <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">// LocateElem Sq</span></span><br></pre></td></tr></table></figure><p>（算法2.7）顺序表的归并</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void MergeList_Sq(SqList La, SqList Lb, SqList &amp;Lc)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>已知顺序线性表La和Lb的元素按值非递减排列</span><br><span class="line">    <span class="regexp">//</span>归并La和Lb得到新的顺序线性表Lc，Lc的元素也按值非递减排列</span><br><span class="line">    pa = La.elem;</span><br><span class="line">    pb = Lb.elem;</span><br><span class="line">    Lc.listsize = Lc.length = La.length + Lb.length;</span><br><span class="line">    pc = Lc.elem = (ElemType *)malloc(Lc.listsize * sizeof(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!Lc.elem)</span><br><span class="line">        <span class="keyword">exit</span>(OVERFLOW); <span class="regexp">//</span>存储分配失败</span><br><span class="line">    pa_last = La.elem + La.length - <span class="number">1</span>;</span><br><span class="line">    pb_last = Lb.elem + Lb.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (pa &lt;= pa_last &amp;&amp; pb &lt;= pb_last)</span><br><span class="line">    &#123; <span class="regexp">//</span>归并</span><br><span class="line">        <span class="keyword">if</span> (*pa &lt;= *pb)</span><br><span class="line">            *pc++ = *pa++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            *pc++ = *pb++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (pa &lt;= pa_last)</span><br><span class="line">        *pc++ = *pa++; <span class="regexp">//</span>插入La的剩余元素</span><br><span class="line">    <span class="keyword">while</span> (pb &lt;= pb_last)</span><br><span class="line">        *pc++ = *pb++; <span class="regexp">//</span>插入Lb的剩余元素</span><br><span class="line">&#125; <span class="regexp">//</span> MergeList_Sq</span><br></pre></td></tr></table></figure><h2 id="线性表的链式表示和实现"><a href="#线性表的链式表示和实现" class="headerlink" title="线性表的链式表示和实现"></a>线性表的链式表示和实现</h2><p>链式存储结构不要求逻辑上相邻的元素在物理位置上也相邻，因此它没有顺序存储结构所具有的弱点，但同时也失去了顺序表可随机存取的优点</p><h3 id="线性链表"><a href="#线性链表" class="headerlink" title="线性链表"></a>线性链表</h3><p>线性表的链式存储结构的特点是用一组<strong>任意的</strong>存储单元存储数据元素。对数据元素来说，除了存储其本身的信息之外，<strong>还需存储直接后继的存储位置</strong>，这两部分信息组成数据元素的存储映像，称为<strong>结点</strong>(node)。它包括两个域：其中存储数据元素信息的域称为数据域；存储直接后继存储位置的域称为指针域。n个结点链结成一个链表，即为线性表的链式存储结构。又由于此链表的每个结点中只包含一个指针域，故又称线性链表或单链表</p><p>整个链表的存取必须从<strong>头指针</strong>开始进行，头指针指示链表中第一个结点的存储位置。同时，最后一个结点的指针为“空”(<strong>NULL</strong>)</p><p>单链表可由头指针唯一确定，在C语言中可用“结构指针“来描述</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----线性表的单链表存储结构-----</span></span><br><span class="line">typedef <span class="keyword">struct</span> <span class="type">LNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="type">LNode</span> *next;</span><br><span class="line">&#125; LNode, *LinKList;</span><br></pre></td></tr></table></figure><p>有时会在单链表的第一个结点之前附设一个结点，称之为<strong>头结点</strong>。头结点的数据域可以不存储任何信息，其指针域存储指向第一个结点的指针。</p><p>（算法2.8）函数GetElem在单链表中的实现</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Status GetElem_L(LinkList L, int i, ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span> L为带头结点的单链表的头指针</span><br><span class="line">    <span class="regexp">//</span>当第i个元素存在时，其值赋给e并返回OK，否则返回ERROR</span><br><span class="line">    p = L-&gt;<span class="keyword">next</span>;</span><br><span class="line">    j = <span class="number">1</span>; <span class="regexp">//</span>初始化，p指向第一个结点，j为计数器</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;<span class="keyword">next</span>;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p || j &gt; i)</span><br><span class="line">        return ERROR; <span class="regexp">//</span>第i个元素不存在</span><br><span class="line">    e = p-&gt;data;      <span class="regexp">//</span>取第i个元素</span><br><span class="line">    return OK;</span><br><span class="line">&#125; <span class="regexp">//</span> GetElem_L</span><br></pre></td></tr></table></figure><p>（算法2.9）在链表中插入元素</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status ListInsert_L(LinkList &amp;L, int i, ElemType)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在带头结点的单链线性表L中第i个位置之前插入元素e</span></span><br><span class="line">    p = L;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) <span class="comment">//寻找第i-1个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p || j &gt; i - <span class="number">1</span>)</span><br><span class="line">        return ERROR;                    <span class="comment">// i小于1或者大于表长加1</span></span><br><span class="line">    s = (LinkList)malloc(sizeof(LNode)); <span class="comment">//生成新结点</span></span><br><span class="line">    <span class="function"><span class="title">s</span>-&gt;</span><span class="keyword">data</span> = e;</span><br><span class="line">    <span class="function"><span class="title">s</span>-&gt;</span><span class="function"><span class="title">next</span> = p-&gt;</span>next; <span class="comment">//插入L中</span></span><br><span class="line">    <span class="function"><span class="title">p</span>-&gt;</span>next = s;</span><br><span class="line">    return OK;</span><br><span class="line">&#125; <span class="comment">// ListInsert_L</span></span><br></pre></td></tr></table></figure><p>（算法2.10）删除链表中的元素</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status ListDelete_L(LinkList &amp;L, int i, ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在带头结点的单链线性表L中，删除第i个元素，并由e返回其值</span></span><br><span class="line">    p = L;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="title">while</span> (p-&gt;</span>next &amp;&amp; j &lt; i - <span class="number">1</span>) <span class="comment">//寻找第i个结点，并令p指向其前趋</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span> (!(p-&gt;</span>next) || j &gt; i - <span class="number">1</span>)</span><br><span class="line">        return ERROR; <span class="comment">//删除位置不合理</span></span><br><span class="line">    <span class="function"><span class="title">q</span> = p-&gt;</span>next;</span><br><span class="line">    <span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">next</span> = q-&gt;</span>next; <span class="comment">//删除并释放结点</span></span><br><span class="line">    <span class="function"><span class="title">e</span> = q-&gt;</span><span class="keyword">data</span>;</span><br><span class="line">    free(q);</span><br><span class="line">    return OK;</span><br><span class="line">&#125; <span class="comment">// ListDelete_L</span></span><br></pre></td></tr></table></figure><p>（算法2.11）从表尾到表头逆向建立单链表</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void CreateList_L(LinkList &amp;L, int n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>逆位序输入n个元素的值，建立带表头结点的单链线性表L</span><br><span class="line">    L = (LinkList)malloc(sizeof(LNode));</span><br><span class="line">    L-&gt;<span class="keyword">next</span> = NULL; <span class="regexp">//</span>先建立一个带头结点的单链表</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt; <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (LinkList)malloc(sizeof(LNode)); <span class="regexp">//</span>生成新结点</span><br><span class="line">        scanf(&amp;p-&gt;data);                     <span class="regexp">//</span>输入元素值</span><br><span class="line">        p-&gt;<span class="keyword">next</span> = L-&gt;<span class="keyword">next</span>;</span><br><span class="line">        L-&gt;<span class="keyword">next</span> = p; <span class="regexp">//</span>插入到表头</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="regexp">//</span> CreateList L</span><br></pre></td></tr></table></figure><p>（算法2.12）归并两个有序单链表</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void MergeList_L(LinkList &amp;La, LinkList &amp;Lb, LinkList &amp;Lc)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//已知单链线性表La和Lb的元素按值非递减排列</span></span><br><span class="line">    <span class="comment">//归并La和Lb得到新的单链线性表Lc，Lc的元素也按值非递减排列</span></span><br><span class="line">    <span class="function"><span class="title">pa</span> = La-&gt;</span>next;</span><br><span class="line">    <span class="function"><span class="title">pb</span> = Lb-&gt;</span>next;</span><br><span class="line">    Lc = pc = La; <span class="comment">//用La的头结点作为Lc的头结点</span></span><br><span class="line">    <span class="keyword">while</span> (pa &amp;&amp; pb)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span> (pa-&gt;</span><span class="function"><span class="title">data</span> &lt;= pb-&gt;</span><span class="keyword">data</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="title">pc</span>-&gt;</span>next = pa;</span><br><span class="line">            pc = pa;</span><br><span class="line">            <span class="function"><span class="title">pa</span> = pa-&gt;</span>next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="title">pc</span>-&gt;</span>next = pb;</span><br><span class="line">            pc = pb;</span><br><span class="line">            <span class="function"><span class="title">pb</span> = pb-&gt;</span>next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">pc</span>-&gt;</span>next = pa ? pa : pb; <span class="comment">//插入剩余段</span></span><br><span class="line">    free(Lb);                <span class="comment">//释放Lb的头结点</span></span><br><span class="line">&#125; <span class="comment">// MergeList_L</span></span><br></pre></td></tr></table></figure><p>静态链表，用一维数组来描述线性链表，用游标（指示器cur）代替指针指示结点在数组中的相对位置、</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----线性表的静态单链表存储结构-----</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 1000 <span class="comment">//链表的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">&#125; component, SLinkList[MAXSIZE];</span><br></pre></td></tr></table></figure><p>（算法2.13）在静态链表中实现的定位函数LocateElem</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int LocateElem_SL(SLinkList S, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>在静态单链线性表L中查找第<span class="number">1</span>个值为e的元素</span><br><span class="line">    <span class="regexp">//</span>若找到，则返回它在L中的位序，否则返回<span class="number">0</span></span><br><span class="line">    i = S[<span class="number">0</span>].cur; <span class="regexp">//</span> i指示表中第一个结点</span><br><span class="line">    <span class="keyword">while</span> (i &amp;&amp; S[i].data != e)</span><br><span class="line">        i = S[i].cur; <span class="regexp">//</span>在表中顺链查找</span><br><span class="line">    return i;</span><br><span class="line">&#125; <span class="regexp">//</span> LocateElem_SL</span><br></pre></td></tr></table></figure><p>（算法2.14）将整个数组空间初始化成一个链表</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void InitSpace_SL<span class="params">(SLinkList &amp;space)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">//</span>将一维数组space中各分量链成一个备用链表，space[0]<span class="string">.cur</span>为头指针，</span><br><span class="line">    <span class="string">//</span><span class="string">&quot;0&quot;</span>表示空指针</span><br><span class="line">    for <span class="params">(<span class="attr">i</span> = 0; i &lt; MAXSIZE - 1; ++i)</span></span><br><span class="line">        space[i]<span class="string">.cur</span> = i + 1;</span><br><span class="line">    space[MAXSIZE - 1]<span class="string">.cur</span> = 0;</span><br><span class="line">&#125; <span class="string">//</span> InitSpace_SL</span><br></pre></td></tr></table></figure><p>（算法2.15）从备用空间取得一个结点</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">int</span> Malloc_SL(SLinkList &amp;<span class="meta">space</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//若备用空间链表非空，则返回分配的结点下标，否则返回0</span></span><br><span class="line">    i = <span class="meta">space</span>[<span class="number">0</span>].cur<span class="comment">;</span></span><br><span class="line">    <span class="meta">if</span> (<span class="meta">space</span>[<span class="number">0</span>].cur)</span><br><span class="line">        <span class="meta">space</span>[<span class="number">0</span>].cur = <span class="meta">space</span>[i].cur<span class="comment">;</span></span><br><span class="line">    return i<span class="comment">;</span></span><br><span class="line">&#125; <span class="comment">// Malloc_SL</span></span><br></pre></td></tr></table></figure><p>（算法2.16）将空闲结点链结到备用链表上</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">void</span> Free_SL(SLinkList &amp;<span class="meta">space</span>, int k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//将下标为k的空闲结点回收到备用链表</span></span><br><span class="line">    <span class="meta">space</span>[k].cur = <span class="meta">space</span>[<span class="number">0</span>].cur<span class="comment">;</span></span><br><span class="line">    <span class="meta">space</span>[<span class="number">0</span>].cur = k<span class="comment">;</span></span><br><span class="line">&#125; <span class="comment">// Free_SL</span></span><br></pre></td></tr></table></figure><p>（算法2.17）（A-B）∪（B-A）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">void difference(SLinkList &amp;space, int &amp;S)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>依次输入集合A和B的元素，在一维数组space中建立表示集合（A-B）∪（B-A）</span><br><span class="line">    <span class="regexp">//</span>的静态链表，S为其头指针。假设备用空间足够大，space[<span class="number">0</span>].cur为其头指针</span><br><span class="line">    InitSpace_SL(space);  <span class="regexp">//</span>初始化备用空间</span><br><span class="line">    S = Malloc_SL(space); <span class="regexp">//</span>生成S的头结点</span><br><span class="line">    r = S;                <span class="regexp">//</span> r指向S的当前最后结点</span><br><span class="line">    scanf(m, n);          <span class="regexp">//</span>输入A和B的元素个数</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">    &#123;                         <span class="regexp">//</span>建立集合A的链表</span><br><span class="line">        i = Malloc_SL(space); <span class="regexp">//</span>分配结点</span><br><span class="line">        scanf(space[i].data); <span class="regexp">//</span>输入A的元素值</span><br><span class="line">        space[r].cur = <span class="number">1</span>;</span><br><span class="line">        r = i;        <span class="regexp">//</span>插入到表尾</span><br><span class="line">    &#125;                 <span class="regexp">//</span> <span class="keyword">for</span></span><br><span class="line">    space[r].cur = <span class="number">0</span>; <span class="regexp">//</span>尾结点的指针为空</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">    &#123; <span class="regexp">//</span>依次输入B的元素，若不在当前表中，则插入，否则删除</span><br><span class="line">        scanf(b);</span><br><span class="line">        p = S;</span><br><span class="line">        k = space[S].cur; <span class="regexp">//</span> k指向集合A中第一个结点</span><br><span class="line">        <span class="keyword">while</span> (k != space[r].cur &amp;&amp; space[k].data != b)</span><br><span class="line">        &#123; <span class="regexp">//</span>在当前表中查找</span><br><span class="line">            p = k;</span><br><span class="line">            k = space[k].cur;</span><br><span class="line">        &#125; <span class="regexp">//</span> whiel</span><br><span class="line">        <span class="keyword">if</span> (k == space[r].cur)</span><br><span class="line">        &#123; <span class="regexp">//</span>当前表中不存在该元素，插入在r所指结点之后，且r的位置不变</span><br><span class="line">            i = Malloc_SL(space);</span><br><span class="line">            space[i].data = b;</span><br><span class="line">            space[i].cur = space[r].cur;</span><br><span class="line">            space[r].cur = i;</span><br><span class="line">        &#125; <span class="regexp">//</span> <span class="keyword">if</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123; <span class="regexp">//</span>该元素已在表中，删除之</span><br><span class="line">            space[p].cur = space[k].cur;</span><br><span class="line">            Free_SL(space, k);</span><br><span class="line">            <span class="keyword">if</span> (r == k)</span><br><span class="line">                r = p; <span class="regexp">//</span>若删除的是r所指结点，则需修改尾指针</span><br><span class="line">        &#125;              <span class="regexp">//</span> <span class="keyword">else</span></span><br><span class="line">    &#125;                  <span class="regexp">//</span> <span class="keyword">for</span></span><br><span class="line">&#125; <span class="regexp">//</span> difference</span><br></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的C++学习笔记</title>
      <link href="/2022/03/30/%E6%88%91%E7%9A%84C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/30/%E6%88%91%E7%9A%84C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>写在前面的话：<br>以下为作者阅读《c++primer（第五版）》所做的笔记<br><span id="more"></span></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h1 id="第Ⅰ部分"><a href="#第Ⅰ部分" class="headerlink" title="第Ⅰ部分"></a>第Ⅰ部分</h1><h2 id="第2章-变量和基本类型"><a href="#第2章-变量和基本类型" class="headerlink" title="第2章 变量和基本类型"></a>第2章 变量和基本类型</h2><h3 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h3><h4 id="算术类型"><a href="#算术类型" class="headerlink" title="算术类型"></a>算术类型</h4><p>——整型（包括字符和布尔类型在内）和浮点型</p><ul><li>带符号（signed）类型和无符号（unsigned）类型<ul><li>unsigned类型仅能表示大于等于0的值</li><li>一般整型分为两种，字符型被分为三种：char、signed char和unsigned      char，其中char即可指代signed也可以是unsigned，取决于编译器</li></ul></li></ul><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li>非布尔类型的算术值赋给bool类型时，初始值为0则为false，否则为true</li><li>bool值赋给非布尔类型时，初始值为false则为0，否则为1</li><li>浮点数赋给整数类型时，结果只保留浮点数中的小数点之前的部分</li><li>整数赋给浮点类型时，小数部分为0，如果超出精度，会损失</li><li>赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示数值总数取模后的余数。例如，8比特大小的unsigned char可以表示0到255总共256个数，把-1赋给unsigned char所得的结果是-1对256取模后所得的余数255</li><li>赋给带符号类型一个超出它表示范围的值时，结果是未定义的。可能继续工作、可能崩溃，也可能生产垃圾数据</li></ul><h4 id="字面值常量"><a href="#字面值常量" class="headerlink" title="字面值常量"></a>字面值常量</h4><ul><li>整型和浮点型字面值<ul><li>整型  20（十进制） 024（八进制） 0x14（十六进制）</li><li>浮点型      3.14159      3.14159E0        0.         0e0          .001</li></ul></li><li>字符和字符串字面值<ul><li>字符       ‘a’</li><li>字符串   “hello”</li></ul></li><li>转义序列<ul><li>不可打印的字符，如退格；特殊含义的字符，如引号<br>换行符             \n      横向制表符     \t        报警（响铃）符      \a<br>纵向制表符      \v      退格符            \b       双引号                      \\”<br>反斜线              \\      问号                  \?        单引号                      \\’<br>回车符             \r      进纸符              \f </li></ul></li><li>指定字面值的类型</li><li>布尔字面值和指针字面值<ul><li>布尔  true和false</li><li>指针      nullptr</li></ul></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><p>类型说明符，紧跟一个或多个变量名组成的列表，用逗号隔开，分号结束，定义时可以同时赋值</p><ul><li>初始值<ul><li>初始化：创建变量时赋予其一个初始值</li><li>赋值：把对象的当前值擦除，而以一个新值来替代</li></ul></li><li>列表初始化<ul><li>用花括号来初始化变量，如 int num={0}</li><li>如果我们使用列表初始化且初始值存在丢失信息的风险，则编译器将报错</li></ul></li><li>默认初始化<ul><li>内置类型的变量未被显式初始化，它的值由定义的位置决定。</li><li>定义于任何函数体之外的变量被初始化为0</li><li>定义在函数体之内的将不被初始化，其值是未定义的，试图访问时会引发错误</li><li>类的对象如果没有显式地初始化，则其值由类确定</li></ul></li></ul><h4 id="变量声明和定义的关系"><a href="#变量声明和定义的关系" class="headerlink" title="变量声明和定义的关系"></a>变量声明和定义的关系</h4><ul><li><p><strong>声明</strong>使得名字为程序所知，一个文件若想使用别处定义的名字则必须包含对那个名字的声明。声明变量添加关键字extern，并不要显式地初始化变量。<strong>不建立新的储存空间</strong></p></li><li><p><strong>定义</strong>负责创建与名字关联的实体。<strong>建立了新的储存空间</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;<span class="comment">//声明</span></span><br><span class="line"><span class="type">int</span> i;<span class="comment">//定义</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//定义</span></span><br></pre></td></tr></table></figure><p>函数体内部，若试图初始化一个由extern关键字标记的变量，将引发错误  </p><p><strong>变量可以被多次声明，但只能被定义一次</strong></p></li></ul><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul><li>由字母、数字和下划线组成，必须以字母或下划线开头，对长度没有限制，但对大小写字母敏感<ul><li>不能连续出现两个下划线</li><li>不能以下划线紧连大写字母开头</li><li>定义在函数体外的标识符不能以下划线开头</li></ul></li><li>变量命名规范<ul><li>标识符要能体现实际含义</li><li>变量名一般用小写字母</li><li>用户自定义的类名一般以大写字母开头</li><li>如果标识符由多个单词组成，则单词间应有明显的区分，如student_loan或studentLoan</li></ul></li></ul><h4 id="名字的作用域"><a href="#名字的作用域" class="headerlink" title="名字的作用域"></a>名字的作用域</h4><ul><li>名字指向一个特定的实体：变量、函数、类型等</li><li>作用域是程序的一部分，在其中名字有其特定的含义。以花括号分隔</li><li>同一个名字在不同的作用域中可能指向不同的实体。名字的有效区域始于名字的声明语句，以声明语句所在的作用域末端为结束</li><li>全局作用域</li><li>块作用域</li><li>嵌套的作用域：内层作用域，外层作用域。</li><li>作用域中一旦声明了某个名字，他所嵌套的所有作用域中都能访问改名字。同时，允许在内层作用域中重新定义外层作用域已有的名字</li></ul><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><p>基于其他类型定义的类型<br>一条声明语句由一个<strong>基本数据类型</strong>和紧随其后的一个<strong>声明符</strong>列表组成。每个声明符命名了一个变量并指定该变量为与基本数据类型有关的某种类型</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><ul><li>左值引用<br>为对象起另外一个名字，引用类型引用另外一种类型<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="built_in">int</span> &amp;<span class="built_in">ref</span>Val = ival;<span class="comment">//refVal指向ival（ival的另外一个名字）</span></span><br><span class="line"><span class="built_in">int</span> &amp;<span class="built_in">ref</span>Val2;<span class="comment">//报错：引用必须被初始化</span></span><br></pre></td></tr></table></figure><ul><li>引用即别名<br><strong>引用并非对象</strong>，相反的，他只是为一个已经存在的对象起的<strong>另外一个名字</strong><br>因为引用本身不是一个对象，所以不能定义引用的引用</li><li>引用的定义<br>引用只能绑定在对象上，<strong>引用类型的初始值必须是一个对象</strong>，且<strong>引用类型和初始值类型一致</strong></li></ul></li><li>右值引用</li></ul><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p>指针本身就是一个对象，允许对指针赋值和拷贝，而且在指针的生命周期内它可以先后指向几个不同的对象<br>指针无须在定义时赋值</p><ul><li><p>获取对象的地址<br><strong>指针存放对象的地址</strong>，使用取地址符（操作符&amp;）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int *p = <span class="meta">&amp;ival;</span></span><br></pre></td></tr></table></figure><p>不能定义指向引用的指针，因为引用不是对象，没有实际地址<br><strong>指针的类型和其指向的对象的类型相匹配</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> dval;</span><br><span class="line"><span class="built_in">double</span> *pd = &amp;dval;<span class="comment">//初始值是double型对象的地址</span></span><br><span class="line"><span class="built_in">double</span> *pd2 = pd;<span class="comment">//初始值是指向double对象的指针</span></span><br></pre></td></tr></table></figure></li><li>指针值<br>指针的值（即地址）应属于下列4种状态之一：<ul><li>指向一个对象</li><li>指向紧邻对象所占空间的下一个位置</li><li>空指针，意味着指针没有指向任何对象</li><li>无效指针，也就是上述情况以外的其他值</li></ul></li><li>利用指针访问对象<br>使用解引用符（操作符*）来访问对象<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int <span class="attr">ival</span> = <span class="number">42</span>;</span><br><span class="line">int *<span class="attr">p</span> = &amp;ival;</span><br><span class="line">*<span class="attr">p</span> = <span class="number">0</span>;//对指针p所指的对象赋值<span class="number">0</span>，即<span class="attr">ival=0</span></span><br></pre></td></tr></table></figure>解引用操作仅适用于那些确实指向了某个对象的有效指针</li><li>空指针<br>不指向任何对象<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int *p1 <span class="operator">=</span> nullptr<span class="comment">;</span></span><br><span class="line">int *p2 <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">int *p3 <span class="operator">=</span> NULL<span class="comment">;//需要首先#include cstdlib</span></span><br></pre></td></tr></table></figure></li><li>赋值和指针<br>记住赋值永远改变的是等号左侧的对象</li></ul><h4 id="理解复合类型的声明"><a href="#理解复合类型的声明" class="headerlink" title="理解复合类型的声明"></a>理解复合类型的声明</h4><ul><li>定义多个变量<br>类型修饰符（*或&amp;）属于声明符的一部分，也就是说，类型修饰符只作用于一个变量</li><li>指向指针的指针<br>通过*的个数区分指针的级别<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="built_in">int</span> *<span class="built_in">pi</span> = &amp;ival;//<span class="built_in">pi</span>指向一个<span class="built_in">int</span>型的数</span><br><span class="line"><span class="built_in">int</span> **ppi = &amp;<span class="built_in">pi</span>;//ppi指向一个<span class="built_in">int</span>型的指针 </span><br></pre></td></tr></table></figure></li><li>指向指针的引用<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i = <span class="number">42</span>;</span><br><span class="line">int *p;<span class="regexp">//</span>p是一个int型指针</span><br><span class="line">int *&amp;r = p;<span class="regexp">//</span>r是一个对指针p的引用</span><br><span class="line">r = &amp;i;<span class="regexp">//</span>r引用了一个指针，即p指向i</span><br><span class="line">*r = <span class="number">0</span>;<span class="regexp">//</span>解引用r得到i，也就是p指向的对象，然后赋值为<span class="number">0</span></span><br></pre></td></tr></table></figure><strong>离变量名最近的符号对变量的类型有最直接的影响</strong>，因此r是一个引用，声明符其余部分以确定r引用的类型<br>面对一条比较复杂的指针或引用的声明语句时，<strong>从右向左</strong>阅读有助于弄清楚他的真实含义</li></ul><h3 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h3><p>关键字const对变量的类型加以限定，使其值不再改变<br>因为const对象一旦创建后其值就不能再改变，所以<strong>const对象必须初始化</strong><br>默认状态下，const对象仅在文件内有效，如果想在多个文件之间共享const对象，必须在变量的<strong>定义之前</strong>添加extern关键字</p><h4 id="const的引用"><a href="#const的引用" class="headerlink" title="const的引用"></a>const的引用</h4><p>对常量的引用，不能被用作修改它所绑定的对象<br>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> ci = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> &amp;r1 = ci;</span><br></pre></td></tr></table></figure></p><ul><li><p>初始化和对const的引用<br><strong>引用的类型必须与其所引用对象的类型一致</strong>，但是有<strong>两个例外</strong><br>第一种，在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。尤其，允许为一个常量引用绑定非常量的对象、字面值，甚至是个一般表达式</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span><span class="comment">;</span></span><br><span class="line">const <span class="keyword">int</span> &amp;<span class="built_in">r1</span> = i<span class="comment">;</span></span><br><span class="line">const <span class="keyword">int</span> &amp;<span class="built_in">r2</span> = <span class="number">42</span><span class="comment">;</span></span><br><span class="line">const <span class="keyword">int</span> &amp;<span class="built_in">r3</span> = <span class="built_in">r1</span>*<span class="number">2</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>下面是一个复杂的情况：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">int</span> &amp;ri = dval;<span class="comment">//错误</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> &amp;ri = dval;<span class="comment">//正确</span></span><br></pre></td></tr></table></figure><p>实际上编译器把上述代码变成了</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> temp = dval;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> &amp;ri = temp;</span><br></pre></td></tr></table></figure><p>ri绑定了一个临时量对象，即当编译器需要一个空间来暂存表达式的求值结果临时创建的一个未命名的对象</p></li><li>对const的引用可能引用一个并非const的对象<br><strong>常量引用</strong>仅对引用<strong>可参与的操作</strong>做出了限定，对于引用的<strong>对象本身是不是一个常量未作限定</strong><br>对象也可能是个非常量，所以<strong>允许通过其他途径改变他的值</strong></li></ul><h4 id="指针和const"><a href="#指针和const" class="headerlink" title="指针和const"></a>指针和const</h4><p>指向常量的指针，<strong>不能用于改变其所指对象的值</strong>，但没有规定那个对象的值不能<strong>通过其他途径</strong>改变<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> pi = <span class="number">3.14</span>;<span class="comment">//pi是个常量，它的值不能改变</span></span><br><span class="line"><span class="built_in">double</span> *ptr = &amp;pi;<span class="comment">//错误，ptr是一个普通指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> *cptr = &amp;pi;<span class="comment">//正确，cptr可以指向一个双精度常量</span></span><br><span class="line">*cptr = <span class="number">42</span>;<span class="comment">//错误，不能给*cptr赋值</span></span><br></pre></td></tr></table></figure><br><strong>指针的类型必须与其所指对象的类型一致</strong>，但是有<strong>两个例外</strong>。第一种是允许令一个指向常量的指针指向一个非常量对象</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> *cptr = &amp;dval;</span><br></pre></td></tr></table></figure><p>所谓指向常量的指针或引用，不过是“自以为是”罢了，他们觉得自己指向了常量，所以<strong>自觉地不去改变所指对象的值</strong></p><ul><li><p>const指针<br><strong>常量指针必须初始化</strong>，而且一旦初始化完成，则它的<strong>值（也就是存放在指针中的那个地址）就不能再改变了</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> errNumb = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> *<span class="keyword">const</span> curErr = &amp;errNumb;<span class="comment">//curErr将一直指向errNumb</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> *<span class="keyword">const</span> pip = &amp;pi;<span class="comment">//pip是一个指向常量对象的常量指针</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h4><p>顶层表示指针本身是个常量，底层表示指针所指的对象是一个常量<br>更一般的，<strong>顶层const</strong>可以表示<strong>任意的对象是常量</strong>，底层const则与指针和引用等复合类型的基本类型部分有关<br>比较特殊的是，<strong>指针类型既可以是顶层const也可以是底层</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> *<span class="keyword">const</span> pl = &amp;I;<span class="comment">//不能改变pl的值，顶层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> ci = <span class="number">42</span>;<span class="comment">//不能改变ci的值，顶层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> *p2 = &amp;ci;<span class="comment">//允许改变p2的值，底层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> *<span class="keyword">const</span> p3 = p2;<span class="comment">//靠右的const是顶层const，靠左的是底层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> &amp;r = ci;<span class="comment">//用于声明引用的const都是底层const</span></span><br></pre></td></tr></table></figure><p>当执行对象的拷贝操作时，常量是顶层const还是底层const区别明显。其中，顶层const不受什么影响：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">i</span> <span class="operator">=</span> ci<span class="comment">;//正确，拷贝ci的值，ci是一个顶层const，对此操作无影响</span></span><br><span class="line"><span class="attribute">p2</span> <span class="operator">=</span> p3<span class="comment">;//正确，p2和p3指向的对象类型相同，p3顶层const的部分不影响</span></span><br></pre></td></tr></table></figure><br>另一方面，<strong>底层const的限制</strong>却不能忽视。当执行对象的拷贝操作时，<strong>拷入和拷出的对象必须具有相同的底层const资格</strong>，或者<strong>两个对象的数据类型必须能够转换</strong>。一般来说，<strong>非常量可以转换成常量</strong>，反之则不行<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int *p = p3;//错误，p3包含底层const的定义，而p没有</span><br><span class="line">p2 = p3;//正确，p2和p3都是底层const</span><br><span class="line">p2 = &amp;i;//正确，int*能转换成const int*<span class="built_in"></span></span><br><span class="line"><span class="built_in">int </span>&amp;r = ci;//错误，普通的int&amp;不能绑定到int常量上<span class="built_in"></span></span><br><span class="line"><span class="built_in">const </span>int &amp;r2 = i;//正确，const int&amp;可以绑定到一个普通int上</span><br><span class="line">p3既是顶层const也是底层const，拷贝p3时可以不在乎它是一个顶层const，但是必须清楚它指向的对象得是一个常量。因此，不能用p3去初始化p，因为p指向的是一个普通的（非常量）整数。另一方面，p3的值可以赋给p2，是因为这两个指针都是底层const，尽管p3同时也是一个常量指针（顶层const）仅就这次赋值而言不会有什么影响</span><br></pre></td></tr></table></figure></p><h4 id="constexpr和常量表达式"><a href="#constexpr和常量表达式" class="headerlink" title="constexpr和常量表达式"></a>constexpr和常量表达式</h4><p><strong>常量表达式</strong>是指值不会改变并且在编译过程就能得到计算结果的表达式。一个对象（或表达式）是不是常量表达式由它的<strong>数据类型</strong>和<strong>初始值</strong>共同决定。例如</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> max_files = <span class="number">20</span>;         <span class="comment">//max_files是常量表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> limit = max_files + <span class="number">1</span>;  <span class="comment">//limit是常量表达式</span></span><br><span class="line"><span class="built_in">int</span> staff_size = <span class="number">27</span>;              <span class="comment">//staff_size不是常量表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> sz = get_size();        <span class="comment">//sz不是常量表达式</span></span><br><span class="line">尽管staff_size的初始值是个字面值常量，但由于他的数据类型只是一个普通<span class="built_in">int</span>而非<span class="keyword">const</span> <span class="built_in">int</span>，所以它不属于常量表达式。另一方面，尽管sz本身是一个常量，但它的具体值直到运行时才获取到，所以也不是常量表达式</span><br></pre></td></tr></table></figure><ul><li><p>constexpr变量</p><p>允许将变量声明为constexpr类型以便由编译器来验证变量的值是否是一个常量表达式。声明为constexpr的变量一定是一个常量，而且必须用常量表达式初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mf = <span class="number">20</span>;         <span class="comment">//20是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> limit = mf + <span class="number">1</span>;  <span class="comment">//mf+1是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> sz = <span class="built_in">size</span>();     <span class="comment">//只有当size是一个constexpr函数时才是一条正确的声明语句</span></span><br></pre></td></tr></table></figure><p>一般来说，如果认定变量是一个常数表达式，那就把它声明成constexpr类型</p></li><li><p>字面值类型</p><p>常量表达式的值需要在编译时就得到计算，因此对声明constexpr时用到的类型必须有所限制。</p><p>尽管指针和引用都能定义成constexpr，但它们的初始值却受到严格的限制。一个constexpr指针的初始值必须是nullptr或者0，或者是存储于某个固定地址中的对象</p><p>函数体内定义的变量一般来说并非存放在固定地址中，因此constexpr指针不能指向这样的变量。相反的，定义于所有函数体之外的对象其地址固定不变，能用来初始化constexpr指针</p><p>允许函数定义一类有效范围超出函数本身的变量，这类变量和定义在函数体之外的变量一样也有固定地址。因此，constexpr引用能绑定到这样的变量上，constexpr指针也能指向这样的变量</p></li><li><p>指针和constexpr</p><p>在constexpr声明中如果定义了一个指针，限定符constexpr仅对指针有效，与指针所指的对象无关：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p = <span class="literal">nullptr</span>;         <span class="comment">//p是一个指向整型常量的指针</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *q = <span class="literal">nullptr</span>;     <span class="comment">//q是一个指向整数的常量指针</span></span><br><span class="line">p和q的类型相差甚远，p是一个指向常量的指针，而q是一个常量指针，其中的关键在于<span class="keyword">constexpr</span>把它所定义的对象置为了顶层<span class="type">const</span></span><br></pre></td></tr></table></figure><p>与其他常量指针类似，constexpr指针既可以指向常量也可以指向一个非常量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *np = <span class="literal">nullptr</span>;   <span class="comment">//np是一个指向整数的常量指针，其值为空</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> i = <span class="number">42</span>;          <span class="comment">//i的类型是整型常量</span></span><br><span class="line"><span class="comment">//i和j都必须定义在函数体之外</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">const</span> <span class="type">int</span> *p = &amp;i;   <span class="comment">//p是常量指针，指向整型常量i</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *p1 = &amp;j;        <span class="comment">//p1是常量指针，指向整数j</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h3><h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><p>类型别名是一个名字，他是某种类型的同义词。有两种方法可用于定义类型别名，</p><p>传统的方法是使用关键字<strong>typedef</strong>：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">double</span> wages;    <span class="comment">//wages是double的同义词</span></span><br><span class="line"><span class="keyword">typedef</span> wages base, *p;  <span class="comment">//base是double的同义词，p是double*的同义词</span></span><br></pre></td></tr></table></figure><p>typedef作为声明语句中的基本数据类型的一部分出现，含有typedef的声明语句定义的不再是变量而是类型别名</p><p>新标准规定了一种新的方法，使用<strong>别名声明</strong>来定义类型的别名：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using SI <span class="operator">=</span> Sales_item<span class="comment">;  //SI是Sales——item的同义词</span></span><br></pre></td></tr></table></figure><h4 id="指针、常量和类型别名"><a href="#指针、常量和类型别名" class="headerlink" title="指针、常量和类型别名"></a>指针、常量和类型别名</h4><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+Hexo(Next)博客搭建及美化</title>
      <link href="/2022/03/09/GitHub-Hexo-Next-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/03/09/GitHub-Hexo-Next-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>参考b站教程：<a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=1">2021最新保姆级Hexo+GitHub搭建个人博客</a><br><span id="more"></span></p><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><h2 id="NEXT主题的安装"><a href="#NEXT主题的安装" class="headerlink" title="NEXT主题的安装"></a>NEXT主题的安装</h2><p>在博客根目录下执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span></span><br><span class="line">themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>然后设置博客配置文件<code>__config.yml</code>：（博客根目录下的<code>_config.yml</code>）</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> <span class="keyword">next</span></span><br></pre></td></tr></table></figure><h2 id="透明背景"><a href="#透明背景" class="headerlink" title="透明背景"></a>透明背景</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>博客根目录 <code>themes\next\source\css\_schemes\Pisces\_layout.styl</code> 文件 <code>.content-wrap</code>标签下 <code>background:</code>修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><p>博客根目录<code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>文件<code>.header-inner</code> 标签下 <code>background:</code> 修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>);</span><br></pre></td></tr></table></figure><h2 id="夜间模式-可切换"><a href="#夜间模式-可切换" class="headerlink" title="夜间模式(可切换)"></a>夜间模式(可切换)</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="built_in">next</span>-darkmode <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>修改主题配置，添加代码</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Dark Mode</span></span><br><span class="line">darkmode: <span class="literal">false</span></span><br><span class="line"><span class="meta"># 下面的是添加的配置</span></span><br><span class="line"><span class="meta"># Darkmode JS</span></span><br><span class="line">darkmode_js:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  bottom: <span class="string">&#x27;64px&#x27;</span> <span class="meta"># default: <span class="string">&#x27;32px&#x27;</span></span></span><br><span class="line">  right: <span class="string">&#x27;unset&#x27;</span> <span class="meta"># default: <span class="string">&#x27;32px&#x27;</span></span></span><br><span class="line">  left: <span class="string">&#x27;32px&#x27;</span> <span class="meta"># default: <span class="string">&#x27;unset&#x27;</span></span></span><br><span class="line">  time: <span class="string">&#x27;0.5s&#x27;</span> <span class="meta"># default: <span class="string">&#x27;0.3s&#x27;</span></span></span><br><span class="line">  mixColor: <span class="string">&#x27;transparent&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#fff&#x27;</span></span></span><br><span class="line">  backgroundColor: <span class="string">&#x27;transparent&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#fff&#x27;</span></span></span><br><span class="line">  buttonColorDark: <span class="string">&#x27;#100f2c&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#100f2c&#x27;</span></span></span><br><span class="line">  buttonColorLight: <span class="string">&#x27;#fff&#x27;</span> <span class="meta"># default: <span class="string">&#x27;#fff&#x27;</span></span></span><br><span class="line">  isActivated: <span class="literal">false</span> <span class="meta"># default false</span></span><br><span class="line">  saveInCookies: <span class="literal">true</span> <span class="meta"># default: true</span></span><br><span class="line">  label: <span class="string">&#x27;🌓&#x27;</span> <span class="meta"># default: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">  autoMatchOsTheme: <span class="literal">true</span> <span class="meta"># default: true</span></span><br><span class="line">  libUrl: <span class="meta"># Set custom library cdn url for Darkmode.js</span></span><br></pre></td></tr></table></figure><h2 id="公式块"><a href="#公式块" class="headerlink" title="公式块"></a>公式块</h2><p>下面介绍hexo-filter的安装和配置。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装之前先检查是否安装有hexo-math。在hexo目录下使用下面的命令查看是否已经安装了hexo-math插件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">list</span> hexo-<span class="keyword">math</span></span><br></pre></td></tr></table></figure><p>若有安装，则显示版本号；否则显示empty。有安装则卸载</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-<span class="built_in">math</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>之后开始安装hexo-filter-mathjax：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="attribute">filter</span>-mathjax <span class="attr">--save</span></span><br></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list hexo-<span class="built_in">filter</span>-mathjax</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在根目录下打开_config.yml文件，在最后添加以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mathjax</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">none</span> <span class="comment"># or &#x27;ams&#x27; or &#x27;all&#x27;</span></span><br><span class="line">  <span class="attr">single_dollars:</span> <span class="literal">true</span> <span class="comment"># enable single dollar signs as in-line math delimiters</span></span><br><span class="line">  <span class="attr">cjk_width:</span> <span class="number">0.9</span> <span class="comment"># relative CJK char width</span></span><br><span class="line">  <span class="attr">normal_width:</span> <span class="number">0.6</span> <span class="comment"># relative normal (monospace) width</span></span><br><span class="line">  <span class="attr">append_css:</span> <span class="literal">true</span> <span class="comment"># add CSS to pages rendered by MathJax</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">false</span> <span class="comment"># if true, every page will be rendered by MathJax regardless the `mathjax` setting in Front-matter</span></span><br></pre></td></tr></table></figure><p>接下来是安装公式渲染器。hexo-math默认的公式渲染器是hexo-renderer-marked，它和markdown的语法有冲突，我们将其卸载。同上卸载hexo-math。安装<code>hexo-renderer-kramed</code></p><p>然后打开根目录下的文件<code>\node_modules\kramed\lib\rules\inline.js</code>，修改下面的规则</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>escape: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/</span>,</span><br><span class="line"><span class="regexp">//</span>修改为：</span><br><span class="line">escape: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>em: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br><span class="line"><span class="regexp">//</span>修改为</span><br><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>最后在主题目录下的_config.yml中开启对mathjax的支持</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="keyword">math</span>:</span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  per_page: <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  mathjax:</span><br><span class="line">    enable: <span class="keyword">true</span>//由<span class="keyword">false</span>改为<span class="keyword">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    mhchem: <span class="keyword">true</span>//由<span class="keyword">false</span>改为<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>默认情况下是所有文章都开启对mathjax渲染的支持，在文章的头部配置中设置<code>mathjax: true</code>可以加速。</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="常规设置"><a href="#常规设置" class="headerlink" title="常规设置"></a>常规设置</h3><p>主题配置文件中包括高亮、复制、样式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span>         <span class="comment">#代码高亮设置</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>                        <span class="comment">#代码复制按钮</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span>                          <span class="comment">#代码样式，也就是框框的样子</span></span><br></pre></td></tr></table></figure><h3 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h3><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-sliding-spoiler <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>通过修改<code>blog/node_modules/hexo-sliding-spoiler/assets/spoiler.css</code>下的内容，从而自定义配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.spoiler</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;    #边框像素、样式、颜色</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span> <span class="selector-class">.spoiler-title</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent;          #背景颜色</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;                   #字体颜色</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;                  #字体大小</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span> <span class="selector-class">.spoiler-title</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span><span class="selector-class">.collapsed</span> <span class="selector-class">.spoiler-title</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;▼ Show Code&quot;</span>;           #展开提示内容</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spoiler</span><span class="selector-class">.expanded</span> <span class="selector-class">.spoiler-title</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;▲ Hide &quot;</span>;               #隐藏提示内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><p>在markdown文章中直接以标签的形式加入，注意，中间内容支持markdown语法、代码块、数学公式</p><p>参考代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% spoiler <span class="string">&quot;点击显/隐内容&quot;</span> %&#125;</span><br><span class="line"></span><br><span class="line">隐藏的内容</span><br><span class="line"></span><br><span class="line">支持markdown语法，代码块，数学公式</span><br><span class="line"></span><br><span class="line">/```c++</span><br><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">int main() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">/```</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br><span class="line">e^&#123;ix&#125; = cosx+isinx</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br><span class="line"></span><br><span class="line">&#123;% endspoiler %&#125;</span><br></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐内容    </div>    <div class="spoiler-content">        <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">隐藏的内容</span><br><span class="line"></span><br><span class="line">支持markdown语法，代码块，数学公式</span><br><span class="line"></span><br><span class="line">/```c++</span><br><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">int main() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">/```</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br><span class="line">e^&#123;ix&#125; = cosx+isinx</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span></span><br></pre></td></tr></table></figure>    </div></div><h2 id="Github入口"><a href="#Github入口" class="headerlink" title="Github入口"></a>Github入口</h2><p>1.首先到<a href="http://tholman.com/github-corners/">GitHub Corners</a>选择自己喜欢的图标，然后copy相应的代码</p><p>2.然后将刚才复制的代码粘贴到<code>themes/next/layout/_layout.swig</code>文件中<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面一行</p><p>3.把代码中的<code>href</code>后面的值替换成你要跳转的地址，比如你的GitHub主页</p><h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><p>在博客根目录下执行下列命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>generator<span class="operator">-</span><span class="keyword">search</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>安装之后，会在站点目录的 <code>public</code> 文件夹下创建一个 <code>search.xml</code>文件。</p><h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><p>在站点配置文件 <code>_config.yml</code> 中添加如下内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Search </span></span><br><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> .<span class="keyword">/public/</span>search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>path：索引文件的路径，相对于站点根目录</li><li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li><li>limit：限制搜索的条目数</li></ul><p>在主题配置文件 <code>_config.yml</code> 中找到如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>确保 enable 设成 true。</p><p>top_n_per_article 字段表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量。</p><p>然后，重新部署网站即可愉快的使用本地搜索功能了。</p><h2 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h2><p>1、下载相应的资源包：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-canvas-nest themes<span class="regexp">/next/</span>source<span class="regexp">/lib/</span>canvas-nest</span><br></pre></td></tr></table></figure><p>2、在主题配置中做相关参数修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span></span><br><span class="line"><span class="comment"># size: The width of the ribbon.</span></span><br><span class="line"><span class="comment"># alpha: The transparency of the ribbon.</span></span><br><span class="line"><span class="comment"># zIndex: The display level of the ribbon.</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果没有下面的代码，就把下面的加上</span></span><br><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="comment"># 网络背景</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,0&#x27;</span> <span class="comment"># RGB values, use &#x27;,&#x27; to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">150</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></figure><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>参考<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fnetcan%2Fhexo-generator-index-pin-top">Github</a>上开源项目，命令操作如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-<span class="built_in">index</span> --<span class="keyword">save</span></span><br><span class="line">$ npm install hexo-generator-<span class="built_in">index</span>-pin-top --<span class="keyword">save</span></span><br></pre></td></tr></table></figure><p>在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code> 或者<code>top: 任意数字</code>，top中数字越大，文章越靠前。比如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span>  <span class="string">java应用导致JVM内存溢出（OOM）的问题</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">2</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><h3 id="安装插件-2"><a href="#安装插件-2" class="headerlink" title="安装插件"></a>安装插件</h3><p>在hexo根目录打开Git Bash，安装<code>hexo-asset-image</code></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在根目录下的配置文件_config.yml里找到<code>post_asset_folder</code>，把这个选项改为<code>true</code></p><p>打开<code>/node_modules/hexo-asset-image/index.js</code>，把内容改为下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPosition</span>(<span class="params">str, m, i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(m, i).<span class="title function_">join</span>(m).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="title class_">String</span>(hexo.<span class="property">version</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">    <span class="keyword">if</span>(version.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="title class_">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.<span class="title function_">substring</span>(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.<span class="title function_">test</span>(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.<span class="title function_">shift</span>();</span><br><span class="line">              src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">              <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.<span class="property">root</span> + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.<span class="title function_">html</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>hexo new</code>生成新的文章的时候会在同一个目录下<code>source/_posts</code>，生成一个<code>.md</code>文件和一个同名的文件夹，该文件夹用来存放文章里引用到的其他资源，例如图片。在markdown文件里按照markdown的标准<code>![这里是代替图片的文字，随便写](图片名+格式)</code>写，就可以插入图片了。注意，typora上无法显示图片，但是上传后可以在网页上显示。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
